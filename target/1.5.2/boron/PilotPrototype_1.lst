
c:/Users/adams/OneDrive/Documents/GitHub/ParticleWorkbench/PilotPrototype_1/target/1.5.2/boron/PilotPrototype_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003270  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7290  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e2e4  000d7294  0001e2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004a0  2003e350  2003e350  0002e350  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7300  000d7300  00027300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7328  000d7328  00027328  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ddd1d  00000000  00000000  0002732c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000111b4  00000000  00000000  00105049  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f150  00000000  00000000  001161fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002550  00000000  00000000  0013534d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000048c0  00000000  00000000  0013789d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000357bf  00000000  00000000  0013c15d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000281bd  00000000  00000000  0017191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108d9b  00000000  00000000  00199ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d1c8  00000000  00000000  002a2874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fe99 	bl	d6d68 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fe9e 	bl	d6d7e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e2e4 	.word	0x2003e2e4
   d404c:	000d7294 	.word	0x000d7294
   d4050:	2003e350 	.word	0x2003e350
   d4054:	2003e350 	.word	0x2003e350
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 ff8d 	bl	d4f7c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7284 	.word	0x000d7284
   d4084:	000d724c 	.word	0x000d724c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b9fa 	b.w	d4480 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fa4b 	bl	d4528 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bf33 	b.w	d4f00 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bce3 	b.w	d4a64 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bce9 	b.w	d4a74 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bce7 	b.w	d4a74 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z9ledToggle6String>:
void  filterData(float *accelData, float *gyroData){

}

/*========== Toggle the LED on or off depending on the given command ==========*/
int ledToggle(String command) {
   d40b8:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ba:	490d      	ldr	r1, [pc, #52]	; (d40f0 <_Z9ledToggle6String+0x38>)
   d40bc:	4605      	mov	r5, r0
   d40be:	f000 fdeb 	bl	d4c98 <_ZNK6String6equalsEPKc>
    if (command == "on") {
   d40c2:	4604      	mov	r4, r0
   d40c4:	b128      	cbz	r0, d40d2 <_Z9ledToggle6String+0x1a>
        digitalWrite(led, HIGH);
   d40c6:	2101      	movs	r1, #1
   d40c8:	2007      	movs	r0, #7
   d40ca:	f001 fe78 	bl	d5dbe <digitalWrite>
   d40ce:	2001      	movs	r0, #1
   d40d0:	bd38      	pop	{r3, r4, r5, pc}
   d40d2:	4908      	ldr	r1, [pc, #32]	; (d40f4 <_Z9ledToggle6String+0x3c>)
   d40d4:	4628      	mov	r0, r5
   d40d6:	f000 fddf 	bl	d4c98 <_ZNK6String6equalsEPKc>
        return 1;
    }
    else if (command == "off") {
   d40da:	b128      	cbz	r0, d40e8 <_Z9ledToggle6String+0x30>
        digitalWrite(led, LOW);
   d40dc:	4621      	mov	r1, r4
   d40de:	2007      	movs	r0, #7
   d40e0:	f001 fe6d 	bl	d5dbe <digitalWrite>
        return 0;
   d40e4:	4620      	mov	r0, r4
   d40e6:	bd38      	pop	{r3, r4, r5, pc}
    }
    else {
        return -1;
   d40e8:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
   d40ec:	bd38      	pop	{r3, r4, r5, pc}
   d40ee:	bf00      	nop
   d40f0:	000d6e5c 	.word	0x000d6e5c
   d40f4:	000d6e5f 	.word	0x000d6e5f

000d40f8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40f8:	b510      	push	{r4, lr}
   d40fa:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40fc:	6800      	ldr	r0, [r0, #0]
   d40fe:	b108      	cbz	r0, d4104 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4100:	f000 fcb8 	bl	d4a74 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4104:	4620      	mov	r0, r4
   d4106:	bd10      	pop	{r4, pc}

000d4108 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4108:	6803      	ldr	r3, [r0, #0]
   d410a:	b2c9      	uxtb	r1, r1
   d410c:	689b      	ldr	r3, [r3, #8]
   d410e:	4718      	bx	r3

000d4110 <_Z12configSensoriii>:
const float gyroCalibration_1[3] = {3.396479224, 0.218546759, -1.138894073};          // Calibration values for gyroscope on slave device 1

// 

/*========== Configure MPU-6050 ==========*/
void configSensor(int slaveAddress, int subAddress, int data){
   d4110:	b570      	push	{r4, r5, r6, lr}
   d4112:	4606      	mov	r6, r0
   d4114:	4614      	mov	r4, r2
   d4116:	460d      	mov	r5, r1
    Wire.beginTransmission(slaveAddress);
   d4118:	f001 fe9c 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d411c:	4631      	mov	r1, r6
   d411e:	f001 fc9b 	bl	d5a58 <_ZN7TwoWire17beginTransmissionEi>
    Serial.print("Transmission begin...");
   d4122:	f001 fb1b 	bl	d575c <_Z16_fetch_usbserialv>
   d4126:	4929      	ldr	r1, [pc, #164]	; (d41cc <_Z12configSensoriii+0xbc>)
   d4128:	f000 fe12 	bl	d4d50 <_ZN5Print5printEPKc>
    Serial.println("");
   d412c:	f001 fb16 	bl	d575c <_Z16_fetch_usbserialv>
   d4130:	4927      	ldr	r1, [pc, #156]	; (d41d0 <_Z12configSensoriii+0xc0>)
   d4132:	f000 fe20 	bl	d4d76 <_ZN5Print7printlnEPKc>
    Wire.write(subAddress);
   d4136:	f001 fe8d 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d413a:	4629      	mov	r1, r5
   d413c:	f7ff ffe4 	bl	d4108 <_ZN7TwoWire5writeEi>
    Serial.printf("writing - %d subAddress", subAddress);
   d4140:	f001 fb0c 	bl	d575c <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4144:	462b      	mov	r3, r5
   d4146:	4a23      	ldr	r2, [pc, #140]	; (d41d4 <_Z12configSensoriii+0xc4>)
   d4148:	2100      	movs	r1, #0
   d414a:	f000 fe3e 	bl	d4dca <_ZN5Print11printf_implEbPKcz>
    Serial.println("");
   d414e:	f001 fb05 	bl	d575c <_Z16_fetch_usbserialv>
   d4152:	491f      	ldr	r1, [pc, #124]	; (d41d0 <_Z12configSensoriii+0xc0>)
   d4154:	f000 fe0f 	bl	d4d76 <_ZN5Print7printlnEPKc>
    Wire.write(data);
   d4158:	f001 fe7c 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d415c:	4621      	mov	r1, r4
   d415e:	f7ff ffd3 	bl	d4108 <_ZN7TwoWire5writeEi>
    Serial.printf("writing - %d data", data);
   d4162:	f001 fafb 	bl	d575c <_Z16_fetch_usbserialv>
   d4166:	4623      	mov	r3, r4
   d4168:	4a1b      	ldr	r2, [pc, #108]	; (d41d8 <_Z12configSensoriii+0xc8>)
    Serial.println("");
    result = Wire.endTransmission(true);
   d416a:	4c1c      	ldr	r4, [pc, #112]	; (d41dc <_Z12configSensoriii+0xcc>)
   d416c:	2100      	movs	r1, #0
   d416e:	f000 fe2c 	bl	d4dca <_ZN5Print11printf_implEbPKcz>
    Wire.write(subAddress);
    Serial.printf("writing - %d subAddress", subAddress);
    Serial.println("");
    Wire.write(data);
    Serial.printf("writing - %d data", data);
    Serial.println("");
   d4172:	f001 faf3 	bl	d575c <_Z16_fetch_usbserialv>
   d4176:	4916      	ldr	r1, [pc, #88]	; (d41d0 <_Z12configSensoriii+0xc0>)
   d4178:	f000 fdfd 	bl	d4d76 <_ZN5Print7printlnEPKc>
    result = Wire.endTransmission(true);
   d417c:	f001 fe6a 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d4180:	2101      	movs	r1, #1
   d4182:	f001 fc6c 	bl	d5a5e <_ZN7TwoWire15endTransmissionEh>
   d4186:	6020      	str	r0, [r4, #0]
    if(!result){
   d4188:	b928      	cbnz	r0, d4196 <_Z12configSensoriii+0x86>
        Serial.print("Transmission successful!");
   d418a:	f001 fae7 	bl	d575c <_Z16_fetch_usbserialv>
   d418e:	4914      	ldr	r1, [pc, #80]	; (d41e0 <_Z12configSensoriii+0xd0>)
   d4190:	f000 fdde 	bl	d4d50 <_ZN5Print5printEPKc>
   d4194:	e010      	b.n	d41b8 <_Z12configSensoriii+0xa8>
        Serial.println("");
    }
    else{
        Serial.print("Transmission failed.");
   d4196:	f001 fae1 	bl	d575c <_Z16_fetch_usbserialv>
   d419a:	4912      	ldr	r1, [pc, #72]	; (d41e4 <_Z12configSensoriii+0xd4>)
   d419c:	f000 fdd8 	bl	d4d50 <_ZN5Print5printEPKc>
        Serial.println("");
   d41a0:	f001 fadc 	bl	d575c <_Z16_fetch_usbserialv>
   d41a4:	490a      	ldr	r1, [pc, #40]	; (d41d0 <_Z12configSensoriii+0xc0>)
   d41a6:	f000 fde6 	bl	d4d76 <_ZN5Print7printlnEPKc>
        Serial.printf("As Wire.endTransmission returns a non-zero value i.e., %d", result);
   d41aa:	f001 fad7 	bl	d575c <_Z16_fetch_usbserialv>
   d41ae:	6823      	ldr	r3, [r4, #0]
   d41b0:	4a0d      	ldr	r2, [pc, #52]	; (d41e8 <_Z12configSensoriii+0xd8>)
   d41b2:	2100      	movs	r1, #0
   d41b4:	f000 fe09 	bl	d4dca <_ZN5Print11printf_implEbPKcz>
        Serial.println("");
   d41b8:	f001 fad0 	bl	d575c <_Z16_fetch_usbserialv>
   d41bc:	4904      	ldr	r1, [pc, #16]	; (d41d0 <_Z12configSensoriii+0xc0>)
   d41be:	f000 fdda 	bl	d4d76 <_ZN5Print7printlnEPKc>
    }
    delay(200);
   d41c2:	20c8      	movs	r0, #200	; 0xc8
}
   d41c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Serial.print("Transmission failed.");
        Serial.println("");
        Serial.printf("As Wire.endTransmission returns a non-zero value i.e., %d", result);
        Serial.println("");
    }
    delay(200);
   d41c8:	f000 be4c 	b.w	d4e64 <delay>
   d41cc:	000d6e63 	.word	0x000d6e63
   d41d0:	000d7024 	.word	0x000d7024
   d41d4:	000d6e79 	.word	0x000d6e79
   d41d8:	000d6e91 	.word	0x000d6e91
   d41dc:	2003e3a0 	.word	0x2003e3a0
   d41e0:	000d6ea3 	.word	0x000d6ea3
   d41e4:	000d6ebc 	.word	0x000d6ebc
   d41e8:	000d6ed1 	.word	0x000d6ed1

000d41ec <_Z10sensorReadiPfRfS_>:
}

/*========== Perform Accelerometer, Temperature, and Gyroscope data read from MPU-6050 ==========*/
int sensorRead(int slaveAddress, float *accelData, float &temp, float *gyroData){
   d41ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d41f0:	ed2d 8b02 	vpush	{d8}
   d41f4:	4605      	mov	r5, r0
   d41f6:	b083      	sub	sp, #12
   d41f8:	469a      	mov	sl, r3
   d41fa:	460c      	mov	r4, r1
   d41fc:	4693      	mov	fp, r2
    Wire.beginTransmission(slaveAddress);           // Address desired slave device to read from                
   d41fe:	f001 fe29 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d4202:	4629      	mov	r1, r5
   d4204:	f001 fc28 	bl	d5a58 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(ACCEL_REG_ADDR);                     // Indicate target address for reading in data
   d4208:	f001 fe24 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d420c:	213b      	movs	r1, #59	; 0x3b
   d420e:	f7ff ff7b 	bl	d4108 <_ZN7TwoWire5writeEi>
    Wire.endTransmission(false);                    // Indicate we will send a restart signal (next line) to read in data
   d4212:	f001 fe1f 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d4216:	2100      	movs	r1, #0
   d4218:	f001 fc21 	bl	d5a5e <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(slaveAddress, 14, true);       // request 14 bytes of data
   d421c:	f001 fe1a 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d4220:	b2e9      	uxtb	r1, r5
   d4222:	220e      	movs	r2, #14
   d4224:	2301      	movs	r3, #1
   d4226:	f001 fc01 	bl	d5a2c <_ZN7TwoWire11requestFromEhjh>

    // Read in MSB, bitshift by eight, switch positions with LSB, and store in temporary variable
    int xAccRaw = (int) Wire.read()<<8 | Wire.read();  
   d422a:	f001 fe13 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d422e:	6803      	ldr	r3, [r0, #0]
   d4230:	695b      	ldr	r3, [r3, #20]
   d4232:	4798      	blx	r3
   d4234:	4680      	mov	r8, r0
   d4236:	f001 fe0d 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d423a:	6803      	ldr	r3, [r0, #0]
   d423c:	695b      	ldr	r3, [r3, #20]
   d423e:	4798      	blx	r3
   d4240:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
    int yAccRaw = (int) Wire.read()<<8 | Wire.read();
   d4244:	f001 fe06 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d4248:	6803      	ldr	r3, [r0, #0]
   d424a:	695b      	ldr	r3, [r3, #20]
   d424c:	4798      	blx	r3
   d424e:	4607      	mov	r7, r0
   d4250:	f001 fe00 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d4254:	6803      	ldr	r3, [r0, #0]
   d4256:	695b      	ldr	r3, [r3, #20]
   d4258:	4798      	blx	r3
   d425a:	ea40 2707 	orr.w	r7, r0, r7, lsl #8
    int zAccRaw = (int) Wire.read()<<8 | Wire.read();
   d425e:	f001 fdf9 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d4262:	6803      	ldr	r3, [r0, #0]
   d4264:	695b      	ldr	r3, [r3, #20]
   d4266:	4798      	blx	r3
   d4268:	4606      	mov	r6, r0
   d426a:	f001 fdf3 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d426e:	6803      	ldr	r3, [r0, #0]
   d4270:	695b      	ldr	r3, [r3, #20]
   d4272:	4798      	blx	r3
   d4274:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
   d4278:	f001 fdec 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d427c:	6803      	ldr	r3, [r0, #0]
   d427e:	695b      	ldr	r3, [r3, #20]
   d4280:	4798      	blx	r3
   d4282:	4605      	mov	r5, r0
   d4284:	f001 fde6 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d4288:	6803      	ldr	r3, [r0, #0]
   d428a:	695b      	ldr	r3, [r3, #20]
   d428c:	4798      	blx	r3
   d428e:	ea40 2305 	orr.w	r3, r0, r5, lsl #8
   d4292:	ee08 3a10 	vmov	s16, r3
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d4296:	f001 fddd 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d429a:	6803      	ldr	r3, [r0, #0]
   d429c:	695b      	ldr	r3, [r3, #20]
   d429e:	4798      	blx	r3
   d42a0:	4605      	mov	r5, r0
   d42a2:	f001 fdd7 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d42a6:	6803      	ldr	r3, [r0, #0]
   d42a8:	695b      	ldr	r3, [r3, #20]
   d42aa:	4798      	blx	r3
   d42ac:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d42b0:	f001 fdd0 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d42b4:	6803      	ldr	r3, [r0, #0]
   d42b6:	695b      	ldr	r3, [r3, #20]
   d42b8:	4798      	blx	r3
   d42ba:	4681      	mov	r9, r0
   d42bc:	f001 fdca 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d42c0:	6803      	ldr	r3, [r0, #0]
   d42c2:	695b      	ldr	r3, [r3, #20]
   d42c4:	4798      	blx	r3
   d42c6:	ea40 2209 	orr.w	r2, r0, r9, lsl #8
   d42ca:	9201      	str	r2, [sp, #4]
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d42cc:	f001 fdc2 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d42d0:	6803      	ldr	r3, [r0, #0]
   d42d2:	695b      	ldr	r3, [r3, #20]
   d42d4:	4798      	blx	r3
   d42d6:	4681      	mov	r9, r0
   d42d8:	f001 fdbc 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d42dc:	6803      	ldr	r3, [r0, #0]
   d42de:	695b      	ldr	r3, [r3, #20]
   d42e0:	4798      	blx	r3
   d42e2:	ea40 2909 	orr.w	r9, r0, r9, lsl #8

    result = Wire.endTransmission(true);
   d42e6:	f001 fdb5 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d42ea:	2101      	movs	r1, #1
   d42ec:	f001 fbb7 	bl	d5a5e <_ZN7TwoWire15endTransmissionEh>

    // Determine if raw value is intended to be read as positive or negative
    // Accelerometer
    if(xAccRaw < 32768){
   d42f0:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
        xAccRaw = -xAccRaw;
   d42f4:	bfb4      	ite	lt
   d42f6:	f1c8 0800 	rsblt	r8, r8, #0
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
   d42fa:	f5c8 3880 	rsbge	r8, r8, #65536	; 0x10000
    }
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d42fe:	ee07 8a90 	vmov	s15, r8
   d4302:	eddf 6a4d 	vldr	s13, [pc, #308]	; d4438 <_Z10sensorReadiPfRfS_+0x24c>
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();

    result = Wire.endTransmission(true);
   d4306:	4b4d      	ldr	r3, [pc, #308]	; (d443c <_Z10sensorReadiPfRfS_+0x250>)

    // Determine if raw value is intended to be read as positive or negative
    // Accelerometer
    if(xAccRaw < 32768){
   d4308:	9a01      	ldr	r2, [sp, #4]
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();

    result = Wire.endTransmission(true);
   d430a:	6018      	str	r0, [r3, #0]
        xAccRaw = -xAccRaw;
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
    }
    if(yAccRaw < 32768){
   d430c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    }
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d4310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
    }
    if(yAccRaw < 32768){
        yAccRaw = -yAccRaw;
   d4314:	bfb4      	ite	lt
   d4316:	427f      	neglt	r7, r7
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
   d4318:	f5c7 3780 	rsbge	r7, r7, #65536	; 0x10000
    }
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d431c:	ee27 7a26 	vmul.f32	s14, s14, s13
        yAccRaw = -yAccRaw;
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
    }
    if(zAccRaw < 32768){
   d4320:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4324:	ee07 7a90 	vmov	s15, r7
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
    }
    if(zAccRaw < 32768){
        zAccRaw = -zAccRaw;
   d4328:	bfb4      	ite	lt
   d432a:	4276      	neglt	r6, r6
    }
    else{
        zAccRaw = -(zAccRaw - 65536);
   d432c:	f5c6 3680 	rsbge	r6, r6, #65536	; 0x10000
    }
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d4330:	ed84 7a00 	vstr	s14, [r4]
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4338:	ee07 6a90 	vmov	s15, r6
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d433c:	ee27 7a26 	vmul.f32	s14, s14, s13
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4344:	ed84 7a01 	vstr	s14, [r4, #4]
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4348:	ee67 7aa6 	vmul.f32	s15, s15, s13
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d434c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; d4440 <_Z10sensorReadiPfRfS_+0x254>
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4350:	edc4 7a02 	vstr	s15, [r4, #8]
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4354:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    else{
        zAccRaw = -(zAccRaw - 65536);
    }

    // Gyroscope
    if(xGyrRaw < 32768){
   d4358:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d435c:	eec8 7a07 	vdiv.f32	s15, s16, s14
        zAccRaw = -(zAccRaw - 65536);
    }

    // Gyroscope
    if(xGyrRaw < 32768){
        xGyrRaw = -xGyrRaw;
   d4360:	bfb4      	ite	lt
   d4362:	426d      	neglt	r5, r5
    }
    else{
        xGyrRaw = -(xGyrRaw - 65536);
   d4364:	f5c5 3580 	rsbge	r5, r5, #65536	; 0x10000
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d4368:	426d      	negs	r5, r5
        xGyrRaw = -xGyrRaw;
    }
    else{
        xGyrRaw = -(xGyrRaw - 65536);
    }
    if(yGyrRaw < 32768){
   d436a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        yGyrRaw = -yGyrRaw;
   d436e:	bfb4      	ite	lt
   d4370:	4252      	neglt	r2, r2
    }
    else{
        yGyrRaw = -(yGyrRaw - 65536);
   d4372:	f5c2 3280 	rsbge	r2, r2, #65536	; 0x10000
    }
    if(zGyrRaw < 32768){
   d4376:	f5b9 4f00 	cmp.w	r9, #32768	; 0x8000
        zGyrRaw = -zGyrRaw;
   d437a:	bfb4      	ite	lt
   d437c:	f1c9 0900 	rsblt	r9, r9, #0
    }
    else{
        zGyrRaw = -(zGyrRaw - 65536);
   d4380:	f5c9 3980 	rsbge	r9, r9, #65536	; 0x10000
   d4384:	9301      	str	r3, [sp, #4]
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4386:	ed9f 7a2f 	vldr	s14, [pc, #188]	; d4444 <_Z10sensorReadiPfRfS_+0x258>
   d438a:	ee77 7a87 	vadd.f32	s15, s15, s14
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d438e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; d4448 <_Z10sensorReadiPfRfS_+0x25c>
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4392:	edcb 7a00 	vstr	s15, [fp]
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d4396:	ee07 5a90 	vmov	s15, r5
   d439a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d439e:	eec7 6a87 	vdiv.f32	s13, s15, s14
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d43a2:	ee07 2a90 	vmov	s15, r2
   d43a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d43aa:	edca 6a00 	vstr	s13, [sl]
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d43ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;
   d43b2:	ee07 9a90 	vmov	s15, r9
   d43b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d43ba:	edca 6a01 	vstr	s13, [sl, #4]
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;
   d43be:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d43c2:	edca 6a02 	vstr	s13, [sl, #8]

    // Normalize and Calibrate Data
    float accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
   d43c6:	edd4 7a01 	vldr	s15, [r4, #4]
   d43ca:	edd4 6a00 	vldr	s13, [r4]
   d43ce:	ed94 7a02 	vldr	s14, [r4, #8]
   d43d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
   d43d6:	eee6 7aa6 	vfma.f32	s15, s13, s13
   d43da:	eee7 7a07 	vfma.f32	s15, s14, s14
   d43de:	ee17 0a90 	vmov	r0, s15
   d43e2:	f002 f95f 	bl	d66a4 <__aeabi_f2d>
   d43e6:	ec41 0b10 	vmov	d0, r0, r1
   d43ea:	f001 fec5 	bl	d6178 <sqrt>
   d43ee:	ec51 0b10 	vmov	r0, r1, d0
   d43f2:	f002 fc5b 	bl	d6cac <__aeabi_d2f>
   d43f6:	4915      	ldr	r1, [pc, #84]	; (d444c <_Z10sensorReadiPfRfS_+0x260>)
   d43f8:	4a15      	ldr	r2, [pc, #84]	; (d4450 <_Z10sensorReadiPfRfS_+0x264>)
   d43fa:	9b01      	ldr	r3, [sp, #4]
   d43fc:	ee06 0a90 	vmov	s13, r0
   d4400:	f104 000c 	add.w	r0, r4, #12
    for( int i = 0; i < 3; i++){
        accelData[i] = accelData[i]/accelMagnitude;             // Normalize accelerometer data
        accelData[i] = accelData[i] + accelCalibration_1[i];    // Calibrate accelerometer data with offset
   d4404:	ed94 6a00 	vldr	s12, [r4]
   d4408:	ecb1 7a01 	vldmia	r1!, {s14}
   d440c:	eec6 7a26 	vdiv.f32	s15, s12, s13
   d4410:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4414:	ece4 7a01 	vstmia	r4!, {s15}
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
   d4418:	ecb2 7a01 	vldmia	r2!, {s14}
   d441c:	edda 7a00 	vldr	s15, [sl]
   d4420:	ee77 7a87 	vadd.f32	s15, s15, s14
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;

    // Normalize and Calibrate Data
    float accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
    for( int i = 0; i < 3; i++){
   d4424:	42a0      	cmp	r0, r4
        accelData[i] = accelData[i]/accelMagnitude;             // Normalize accelerometer data
        accelData[i] = accelData[i] + accelCalibration_1[i];    // Calibrate accelerometer data with offset
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
   d4426:	ecea 7a01 	vstmia	sl!, {s15}
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;

    // Normalize and Calibrate Data
    float accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
    for( int i = 0; i < 3; i++){
   d442a:	d1eb      	bne.n	d4404 <_Z10sensorReadiPfRfS_+0x218>
        accelData[i] = accelData[i] + accelCalibration_1[i];    // Calibrate accelerometer data with offset
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
    }

    return result;
}
   d442c:	6818      	ldr	r0, [r3, #0]
   d442e:	b003      	add	sp, #12
   d4430:	ecbd 8b02 	vpop	{d8}
   d4434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4438:	38800000 	.word	0x38800000
   d443c:	2003e3a0 	.word	0x2003e3a0
   d4440:	43aa0000 	.word	0x43aa0000
   d4444:	42121eb8 	.word	0x42121eb8
   d4448:	43030000 	.word	0x43030000
   d444c:	000d6e50 	.word	0x000d6e50
   d4450:	000d6f40 	.word	0x000d6f40

000d4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4454:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4456:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4458:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d445a:	b17c      	cbz	r4, d447c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d445c:	6863      	ldr	r3, [r4, #4]
   d445e:	3b01      	subs	r3, #1
   d4460:	6063      	str	r3, [r4, #4]
   d4462:	b95b      	cbnz	r3, d447c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4464:	6823      	ldr	r3, [r4, #0]
   d4466:	4620      	mov	r0, r4
   d4468:	689b      	ldr	r3, [r3, #8]
   d446a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d446c:	68a3      	ldr	r3, [r4, #8]
   d446e:	3b01      	subs	r3, #1
   d4470:	60a3      	str	r3, [r4, #8]
   d4472:	b91b      	cbnz	r3, d447c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4474:	6823      	ldr	r3, [r4, #0]
   d4476:	4620      	mov	r0, r4
   d4478:	68db      	ldr	r3, [r3, #12]
   d447a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d447c:	4628      	mov	r0, r5
   d447e:	bd38      	pop	{r3, r4, r5, pc}

000d4480 <setup>:
float gyroData[3];      // Vector for gyroscope raw data
float temp_C = 0;       // Variable for temperature data [deg C]


/*========== Setup ==========*/
void setup() {
   d4480:	b530      	push	{r4, r5, lr}
   d4482:	b085      	sub	sp, #20
  Serial.begin(9600); // Initiate serial communication at 9600 BAUD
   d4484:	f001 f96a 	bl	d575c <_Z16_fetch_usbserialv>
   d4488:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d448c:	f001 f95a 	bl	d5744 <_ZN9USBSerial5beginEl>
  Wire.begin();       // Initiate Wire library
   d4490:	f001 fce0 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d4494:	f001 faa8 	bl	d59e8 <_ZN7TwoWire5beginEv>
  delay(100);         // delay 100 milliseconds for startup
   d4498:	2064      	movs	r0, #100	; 0x64
   d449a:	f000 fce3 	bl	d4e64 <delay>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d449e:	4d18      	ldr	r5, [pc, #96]	; (d4500 <setup+0x80>)
  pinMode(led, OUTPUT);   // LED pin as output
  // Note: reading from analog pins does not require pinMode()
  
  // Particle Cloud Variables, Functions, and Publishing
  Particle.variable("containerWeight", sgRawValue); // Declare Particle.variable to access value from the cloud
  sprintf(weightStr, "%d", sgRawValue);
   d44a0:	4c18      	ldr	r4, [pc, #96]	; (d4504 <setup+0x84>)
  Serial.begin(9600); // Initiate serial communication at 9600 BAUD
  Wire.begin();       // Initiate Wire library
  delay(100);         // delay 100 milliseconds for startup
  
  // Configure sensor with default settings
  configSensor(MPU_SLAVE_ADDR_1, PWR_MGMT_1, NRML_PWR);
   d44a2:	2200      	movs	r2, #0
   d44a4:	216b      	movs	r1, #107	; 0x6b
   d44a6:	2068      	movs	r0, #104	; 0x68
   d44a8:	f7ff fe32 	bl	d4110 <_Z12configSensoriii>

  // Set up GPIO
  pinMode(led, OUTPUT);   // LED pin as output
   d44ac:	2101      	movs	r1, #1
   d44ae:	2007      	movs	r0, #7
   d44b0:	f001 fc74 	bl	d5d9c <pinMode>
   d44b4:	2300      	movs	r3, #0
   d44b6:	4629      	mov	r1, r5
   d44b8:	2202      	movs	r2, #2
   d44ba:	4813      	ldr	r0, [pc, #76]	; (d4508 <setup+0x88>)
   d44bc:	f000 faaa 	bl	d4a14 <spark_variable>
  // Note: reading from analog pins does not require pinMode()
  
  // Particle Cloud Variables, Functions, and Publishing
  Particle.variable("containerWeight", sgRawValue); // Declare Particle.variable to access value from the cloud
  sprintf(weightStr, "%d", sgRawValue);
   d44c0:	682a      	ldr	r2, [r5, #0]
   d44c2:	4912      	ldr	r1, [pc, #72]	; (d450c <setup+0x8c>)
   d44c4:	4620      	mov	r0, r4
   d44c6:	f000 fae5 	bl	d4a94 <sprintf>
   d44ca:	4621      	mov	r1, r4
   d44cc:	2300      	movs	r3, #0
   d44ce:	2204      	movs	r2, #4
   d44d0:	480f      	ldr	r0, [pc, #60]	; (d4510 <setup+0x90>)
   d44d2:	f000 fa9f 	bl	d4a14 <spark_variable>
   d44d6:	4b0f      	ldr	r3, [pc, #60]	; (d4514 <setup+0x94>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d44d8:	490f      	ldr	r1, [pc, #60]	; (d4518 <setup+0x98>)
   d44da:	781b      	ldrb	r3, [r3, #0]
   d44dc:	f88d 3000 	strb.w	r3, [sp]
   d44e0:	4622      	mov	r2, r4
   d44e2:	233c      	movs	r3, #60	; 0x3c
   d44e4:	a802      	add	r0, sp, #8
   d44e6:	f000 fee3 	bl	d52b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d44ea:	a803      	add	r0, sp, #12
   d44ec:	f7ff ffb2 	bl	d4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d44f0:	4a0a      	ldr	r2, [pc, #40]	; (d451c <setup+0x9c>)
   d44f2:	490b      	ldr	r1, [pc, #44]	; (d4520 <setup+0xa0>)
   d44f4:	480b      	ldr	r0, [pc, #44]	; (d4524 <setup+0xa4>)
   d44f6:	f000 fdcb 	bl	d5090 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("StringWeight", weightStr);
  Particle.publish("dumpster-loading", weightStr, PRIVATE);
  Particle.function("led", ledToggle);
}
   d44fa:	b005      	add	sp, #20
   d44fc:	bd30      	pop	{r4, r5, pc}
   d44fe:	bf00      	nop
   d4500:	2003e390 	.word	0x2003e390
   d4504:	2003e370 	.word	0x2003e370
   d4508:	000d6f0b 	.word	0x000d6f0b
   d450c:	000d6f08 	.word	0x000d6f08
   d4510:	000d6f1b 	.word	0x000d6f1b
   d4514:	2003e38e 	.word	0x2003e38e
   d4518:	000d6f28 	.word	0x000d6f28
   d451c:	000d6f39 	.word	0x000d6f39
   d4520:	000d40b9 	.word	0x000d40b9
   d4524:	000d5065 	.word	0x000d5065

000d4528 <loop>:

/*========== Main Loop ===========*/
void loop() {
   d4528:	b530      	push	{r4, r5, lr}
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
   d452a:	2013      	movs	r0, #19
  Particle.publish("dumpster-loading", weightStr, PRIVATE);
  Particle.function("led", ledToggle);
}

/*========== Main Loop ===========*/
void loop() {
   d452c:	b085      	sub	sp, #20
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
   d452e:	f001 fc5f 	bl	d5df0 <analogRead>
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
   d4532:	ee07 0a90 	vmov	s15, r0
   d4536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d453a:	eddf 7a27 	vldr	s15, [pc, #156]	; d45d8 <loop+0xb0>
}

/*========== Main Loop ===========*/
void loop() {
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
   d453e:	4b27      	ldr	r3, [pc, #156]	; (d45dc <loop+0xb4>)
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
  
  // Particle Event Publishing
  sprintf(weightStr, "%d", sgRawValue);  // Update string variables
   d4540:	4d27      	ldr	r5, [pc, #156]	; (d45e0 <loop+0xb8>)
}

/*========== Main Loop ===========*/
void loop() {
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
   d4542:	6018      	str	r0, [r3, #0]
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
   d4544:	eec7 6a27 	vdiv.f32	s13, s14, s15
}

/*========== Main Loop ===========*/
void loop() {
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
   d4548:	4604      	mov	r4, r0
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
   d454a:	ee16 0a90 	vmov	r0, s13
   d454e:	f002 f8a9 	bl	d66a4 <__aeabi_f2d>
   d4552:	a31d      	add	r3, pc, #116	; (adr r3, d45c8 <loop+0xa0>)
   d4554:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4558:	f002 f8f8 	bl	d674c <__aeabi_dmul>
   d455c:	a31c      	add	r3, pc, #112	; (adr r3, d45d0 <loop+0xa8>)
   d455e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4562:	f002 f8f3 	bl	d674c <__aeabi_dmul>
   d4566:	f002 fba1 	bl	d6cac <__aeabi_d2f>
   d456a:	4b1e      	ldr	r3, [pc, #120]	; (d45e4 <loop+0xbc>)
  
  // Particle Event Publishing
  sprintf(weightStr, "%d", sgRawValue);  // Update string variables
   d456c:	491e      	ldr	r1, [pc, #120]	; (d45e8 <loop+0xc0>)

/*========== Main Loop ===========*/
void loop() {
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
   d456e:	6018      	str	r0, [r3, #0]
  
  // Particle Event Publishing
  sprintf(weightStr, "%d", sgRawValue);  // Update string variables
   d4570:	4622      	mov	r2, r4
   d4572:	4628      	mov	r0, r5
   d4574:	f000 fa8e 	bl	d4a94 <sprintf>
   d4578:	4b1c      	ldr	r3, [pc, #112]	; (d45ec <loop+0xc4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d457a:	491d      	ldr	r1, [pc, #116]	; (d45f0 <loop+0xc8>)
   d457c:	781b      	ldrb	r3, [r3, #0]
   d457e:	f88d 3000 	strb.w	r3, [sp]
   d4582:	462a      	mov	r2, r5
   d4584:	233c      	movs	r3, #60	; 0x3c
   d4586:	a802      	add	r0, sp, #8
  Particle.publish("dumpster-loading", weightStr, PRIVATE); // Publish data as event to Particle Cloud
  
  // Read in data from MPU-6050
  result = sensorRead(MPU_SLAVE_ADDR_1, accelData, temp_C, gyroData);  
   d4588:	4c1a      	ldr	r4, [pc, #104]	; (d45f4 <loop+0xcc>)
   d458a:	f000 fe91 	bl	d52b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d458e:	a803      	add	r0, sp, #12
   d4590:	f7ff ff60 	bl	d4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4594:	4622      	mov	r2, r4
   d4596:	4918      	ldr	r1, [pc, #96]	; (d45f8 <loop+0xd0>)
   d4598:	4b18      	ldr	r3, [pc, #96]	; (d45fc <loop+0xd4>)
   d459a:	2068      	movs	r0, #104	; 0x68
   d459c:	f7ff fe26 	bl	d41ec <_Z10sensorReadiPfRfS_>
   d45a0:	4b17      	ldr	r3, [pc, #92]	; (d4600 <loop+0xd8>)
   d45a2:	6018      	str	r0, [r3, #0]
  Serial.printlnf("%f", gyroData[1]);
  Serial.printlnf("%f", gyroData[2]);
  Serial.println();
*/
  // Temperature Sensor
  Serial.printlnf("%f", temp_C);
   d45a4:	f001 f8da 	bl	d575c <_Z16_fetch_usbserialv>
   d45a8:	4605      	mov	r5, r0
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d45aa:	6820      	ldr	r0, [r4, #0]
   d45ac:	f002 f87a 	bl	d66a4 <__aeabi_f2d>
   d45b0:	4a14      	ldr	r2, [pc, #80]	; (d4604 <loop+0xdc>)
   d45b2:	e9cd 0100 	strd	r0, r1, [sp]
   d45b6:	2101      	movs	r1, #1
   d45b8:	4628      	mov	r0, r5
   d45ba:	f000 fc06 	bl	d4dca <_ZN5Print11printf_implEbPKcz>

  delay(100);  // Wait one millisecond
   d45be:	2064      	movs	r0, #100	; 0x64
   d45c0:	f000 fc50 	bl	d4e64 <delay>
   d45c4:	b005      	add	sp, #20
   d45c6:	bd30      	pop	{r4, r5, pc}
   d45c8:	66666666 	.word	0x66666666
   d45cc:	400a6666 	.word	0x400a6666
   d45d0:	cccccccd 	.word	0xcccccccd
   d45d4:	4000cccc 	.word	0x4000cccc
   d45d8:	457ff000 	.word	0x457ff000
   d45dc:	2003e390 	.word	0x2003e390
   d45e0:	2003e370 	.word	0x2003e370
   d45e4:	2003e3a4 	.word	0x2003e3a4
   d45e8:	000d6f08 	.word	0x000d6f08
   d45ec:	2003e38e 	.word	0x2003e38e
   d45f0:	000d6f28 	.word	0x000d6f28
   d45f4:	2003e354 	.word	0x2003e354
   d45f8:	2003e358 	.word	0x2003e358
   d45fc:	2003e364 	.word	0x2003e364
   d4600:	2003e3a0 	.word	0x2003e3a0
   d4604:	000d6f3d 	.word	0x000d6f3d

000d4608 <_GLOBAL__sub_I_result>:
   d4608:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d460a:	4b0c      	ldr	r3, [pc, #48]	; (d463c <_GLOBAL__sub_I_result+0x34>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d460c:	4c0c      	ldr	r4, [pc, #48]	; (d4640 <_GLOBAL__sub_I_result+0x38>)
   d460e:	2201      	movs	r2, #1
   d4610:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4612:	f000 f82b 	bl	d466c <HAL_Pin_Map>
   d4616:	2300      	movs	r3, #0
   d4618:	6023      	str	r3, [r4, #0]
   d461a:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d461c:	71a3      	strb	r3, [r4, #6]
   d461e:	8123      	strh	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4620:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4622:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4626:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4628:	f000 f970 	bl	d490c <set_system_mode>
#include "Wire.h"                 // This library allows I2C communication
#include "Math.h"                 // This library allows certain mathematical functions to be used (i.e., sqrt, sq, etc.)
#include "PeripheralFunctions.h"  // Holds all peripheral functions for reading in data from MPU-6050, etc.

/*========== Device System Settings ==========*/
SYSTEM_MODE(SEMI_AUTOMATIC);
   d462c:	4620      	mov	r0, r4
   d462e:	4a05      	ldr	r2, [pc, #20]	; (d4644 <_GLOBAL__sub_I_result+0x3c>)
   d4630:	4905      	ldr	r1, [pc, #20]	; (d4648 <_GLOBAL__sub_I_result+0x40>)
*/
  // Temperature Sensor
  Serial.printlnf("%f", temp_C);

  delay(100);  // Wait one millisecond
   d4632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "Wire.h"                 // This library allows I2C communication
#include "Math.h"                 // This library allows certain mathematical functions to be used (i.e., sqrt, sq, etc.)
#include "PeripheralFunctions.h"  // Holds all peripheral functions for reading in data from MPU-6050, etc.

/*========== Device System Settings ==========*/
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4636:	f001 bc33 	b.w	d5ea0 <__aeabi_atexit>
   d463a:	bf00      	nop
   d463c:	2003e38e 	.word	0x2003e38e
   d4640:	2003e394 	.word	0x2003e394
   d4644:	2003e350 	.word	0x2003e350
   d4648:	000d40f9 	.word	0x000d40f9

000d464c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <netdb_freeaddrinfo+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	689b      	ldr	r3, [r3, #8]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	00030268 	.word	0x00030268

000d465c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <netdb_getaddrinfo+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	68db      	ldr	r3, [r3, #12]
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030268 	.word	0x00030268

000d466c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <HAL_Pin_Map+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	681b      	ldr	r3, [r3, #0]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	0003022c 	.word	0x0003022c

000d467c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <HAL_Validate_Pin_Function+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	685b      	ldr	r3, [r3, #4]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	0003022c 	.word	0x0003022c

000d468c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <HAL_Pin_Mode+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	689b      	ldr	r3, [r3, #8]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	0003022c 	.word	0x0003022c

000d469c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <HAL_Get_Pin_Mode+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	68db      	ldr	r3, [r3, #12]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	0003022c 	.word	0x0003022c

000d46ac <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <HAL_GPIO_Write+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	691b      	ldr	r3, [r3, #16]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	0003022c 	.word	0x0003022c

000d46bc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <HAL_ADC_Read+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	0003022c 	.word	0x0003022c

000d46cc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <HAL_SPI_Init+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	69db      	ldr	r3, [r3, #28]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030230 	.word	0x00030230

000d46dc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <HAL_SPI_Is_Enabled+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	6a1b      	ldr	r3, [r3, #32]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030230 	.word	0x00030230

000d46ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <HAL_RNG_GetRandomNumber+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	685b      	ldr	r3, [r3, #4]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030218 	.word	0x00030218

000d46fc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	695b      	ldr	r3, [r3, #20]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030218 	.word	0x00030218

000d470c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <os_thread_is_current+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	689b      	ldr	r3, [r3, #8]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030248 	.word	0x00030248

000d471c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <os_thread_join+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	691b      	ldr	r3, [r3, #16]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030248 	.word	0x00030248

000d472c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <os_thread_cleanup+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	695b      	ldr	r3, [r3, #20]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030248 	.word	0x00030248

000d473c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <os_mutex_recursive_create+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030248 	.word	0x00030248

000d474c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <os_mutex_recursive_destroy+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030248 	.word	0x00030248

000d475c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <inet_inet_ntop+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	695b      	ldr	r3, [r3, #20]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030264 	.word	0x00030264

000d476c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <HAL_USART_Init+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	681b      	ldr	r3, [r3, #0]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	0003023c 	.word	0x0003023c

000d477c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <HAL_USART_Write_Data+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	68db      	ldr	r3, [r3, #12]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	0003023c 	.word	0x0003023c

000d478c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <HAL_USART_Available_Data+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	691b      	ldr	r3, [r3, #16]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	0003023c 	.word	0x0003023c

000d479c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <HAL_USART_Read_Data+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	695b      	ldr	r3, [r3, #20]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	0003023c 	.word	0x0003023c

000d47ac <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <HAL_USART_Peek_Data+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	699b      	ldr	r3, [r3, #24]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	0003023c 	.word	0x0003023c

000d47bc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <HAL_USART_Flush_Data+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	69db      	ldr	r3, [r3, #28]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	0003023c 	.word	0x0003023c

000d47cc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <HAL_USART_Is_Enabled+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6a1b      	ldr	r3, [r3, #32]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	0003023c 	.word	0x0003023c

000d47dc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <HAL_USART_Available_Data_For_Write+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	0003023c 	.word	0x0003023c

000d47ec <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <HAL_I2C_Begin+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	68db      	ldr	r3, [r3, #12]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030228 	.word	0x00030228

000d47fc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <HAL_I2C_Begin_Transmission+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	699b      	ldr	r3, [r3, #24]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030228 	.word	0x00030228

000d480c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <HAL_I2C_End_Transmission+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	69db      	ldr	r3, [r3, #28]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030228 	.word	0x00030228

000d481c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <HAL_I2C_Write_Data+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	6a1b      	ldr	r3, [r3, #32]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030228 	.word	0x00030228

000d482c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <HAL_I2C_Available_Data+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030228 	.word	0x00030228

000d483c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <HAL_I2C_Read_Data+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030228 	.word	0x00030228

000d484c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <HAL_I2C_Peek_Data+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030228 	.word	0x00030228

000d485c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <HAL_I2C_Flush_Data+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030228 	.word	0x00030228

000d486c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <HAL_I2C_Is_Enabled+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030228 	.word	0x00030228

000d487c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <HAL_I2C_Init+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030228 	.word	0x00030228

000d488c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <HAL_I2C_Request_Data_Ex+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030228 	.word	0x00030228

000d489c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <HAL_USB_USART_Init+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	681b      	ldr	r3, [r3, #0]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003024c 	.word	0x0003024c

000d48ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <HAL_USB_USART_Begin+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	685b      	ldr	r3, [r3, #4]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003024c 	.word	0x0003024c

000d48bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <HAL_USB_USART_Available_Data+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	691b      	ldr	r3, [r3, #16]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	0003024c 	.word	0x0003024c

000d48cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	695b      	ldr	r3, [r3, #20]
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	0003024c 	.word	0x0003024c

000d48dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <HAL_USB_USART_Receive_Data+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	699b      	ldr	r3, [r3, #24]
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	0003024c 	.word	0x0003024c

000d48ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <HAL_USB_USART_Send_Data+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	69db      	ldr	r3, [r3, #28]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	0003024c 	.word	0x0003024c

000d48fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <HAL_USB_USART_Flush_Data+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	6a1b      	ldr	r3, [r3, #32]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	0003024c 	.word	0x0003024c

000d490c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <set_system_mode+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	685b      	ldr	r3, [r3, #4]
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	00030220 	.word	0x00030220

000d491c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <system_delay_ms+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	695b      	ldr	r3, [r3, #20]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030220 	.word	0x00030220

000d492c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <application_thread_current+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030220 	.word	0x00030220

000d493c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <application_thread_invoke+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030220 	.word	0x00030220

000d494c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b03      	ldr	r3, [pc, #12]	; (d495c <system_ctrl_set_app_request_handler+0x10>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4956:	9301      	str	r3, [sp, #4]
   d4958:	bd08      	pop	{r3, pc}
   d495a:	0000      	.short	0x0000
   d495c:	00030220 	.word	0x00030220

000d4960 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b03      	ldr	r3, [pc, #12]	; (d4970 <system_ctrl_set_result+0x10>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d496a:	9301      	str	r3, [sp, #4]
   d496c:	bd08      	pop	{r3, pc}
   d496e:	0000      	.short	0x0000
   d4970:	00030220 	.word	0x00030220

000d4974 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <network_connect+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	685b      	ldr	r3, [r3, #4]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030240 	.word	0x00030240

000d4984 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <network_connecting+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	689b      	ldr	r3, [r3, #8]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030240 	.word	0x00030240

000d4994 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <network_disconnect+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	68db      	ldr	r3, [r3, #12]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030240 	.word	0x00030240

000d49a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <network_ready+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	691b      	ldr	r3, [r3, #16]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030240 	.word	0x00030240

000d49b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <network_on+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	695b      	ldr	r3, [r3, #20]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030240 	.word	0x00030240

000d49c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <network_off+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	699b      	ldr	r3, [r3, #24]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030240 	.word	0x00030240

000d49d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <network_listen+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	69db      	ldr	r3, [r3, #28]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030240 	.word	0x00030240

000d49e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <network_listening+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6a1b      	ldr	r3, [r3, #32]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030240 	.word	0x00030240

000d49f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <network_set_listen_timeout+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030240 	.word	0x00030240

000d4a04 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <network_get_listen_timeout+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030240 	.word	0x00030240

000d4a14 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <spark_variable+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	681b      	ldr	r3, [r3, #0]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030244 	.word	0x00030244

000d4a24 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <spark_function+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	685b      	ldr	r3, [r3, #4]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030244 	.word	0x00030244

000d4a34 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <spark_cloud_flag_connected+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	695b      	ldr	r3, [r3, #20]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030244 	.word	0x00030244

000d4a44 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <spark_send_event+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	6a1b      	ldr	r3, [r3, #32]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030244 	.word	0x00030244

000d4a54 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030244 	.word	0x00030244

000d4a64 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <malloc+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	681b      	ldr	r3, [r3, #0]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003021c 	.word	0x0003021c

000d4a74 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <free+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	685b      	ldr	r3, [r3, #4]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003021c 	.word	0x0003021c

000d4a84 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <realloc+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	689b      	ldr	r3, [r3, #8]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003021c 	.word	0x0003021c

000d4a94 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <sprintf+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	68db      	ldr	r3, [r3, #12]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003021c 	.word	0x0003021c

000d4aa4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <vsnprintf+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	0003021c 	.word	0x0003021c

000d4ab4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <abort+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003021c 	.word	0x0003021c

000d4ac4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <_malloc_r+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003021c 	.word	0x0003021c

000d4ad4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <__errno+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	0003021c 	.word	0x0003021c

000d4ae4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ae4:	2200      	movs	r2, #0
   d4ae6:	4611      	mov	r1, r2
   d4ae8:	6840      	ldr	r0, [r0, #4]
   d4aea:	f7ff bf7b 	b.w	d49e4 <network_listening>

000d4aee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4aee:	2200      	movs	r2, #0
   d4af0:	4611      	mov	r1, r2
   d4af2:	6840      	ldr	r0, [r0, #4]
   d4af4:	f7ff bf86 	b.w	d4a04 <network_get_listen_timeout>

000d4af8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4af8:	2200      	movs	r2, #0
   d4afa:	6840      	ldr	r0, [r0, #4]
   d4afc:	f7ff bf7a 	b.w	d49f4 <network_set_listen_timeout>

000d4b00 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b00:	2200      	movs	r2, #0
   d4b02:	f081 0101 	eor.w	r1, r1, #1
   d4b06:	6840      	ldr	r0, [r0, #4]
   d4b08:	f7ff bf64 	b.w	d49d4 <network_listen>

000d4b0c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4b0c:	2300      	movs	r3, #0
   d4b0e:	461a      	mov	r2, r3
   d4b10:	4619      	mov	r1, r3
   d4b12:	6840      	ldr	r0, [r0, #4]
   d4b14:	f7ff bf56 	b.w	d49c4 <network_off>

000d4b18 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4b18:	2300      	movs	r3, #0
   d4b1a:	461a      	mov	r2, r3
   d4b1c:	4619      	mov	r1, r3
   d4b1e:	6840      	ldr	r0, [r0, #4]
   d4b20:	f7ff bf48 	b.w	d49b4 <network_on>

000d4b24 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b24:	2200      	movs	r2, #0
   d4b26:	4611      	mov	r1, r2
   d4b28:	6840      	ldr	r0, [r0, #4]
   d4b2a:	f7ff bf3b 	b.w	d49a4 <network_ready>

000d4b2e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b2e:	2200      	movs	r2, #0
   d4b30:	4611      	mov	r1, r2
   d4b32:	6840      	ldr	r0, [r0, #4]
   d4b34:	f7ff bf26 	b.w	d4984 <network_connecting>

000d4b38 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b38:	2200      	movs	r2, #0
   d4b3a:	2102      	movs	r1, #2
   d4b3c:	6840      	ldr	r0, [r0, #4]
   d4b3e:	f7ff bf29 	b.w	d4994 <network_disconnect>

000d4b42 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b42:	2300      	movs	r3, #0
   d4b44:	461a      	mov	r2, r3
   d4b46:	6840      	ldr	r0, [r0, #4]
   d4b48:	f7ff bf14 	b.w	d4974 <network_connect>

000d4b4c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b4c:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b4e:	2203      	movs	r2, #3
   d4b50:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b52:	4a02      	ldr	r2, [pc, #8]	; (d4b5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b54:	601a      	str	r2, [r3, #0]
   d4b56:	4770      	bx	lr
   d4b58:	2003e3a8 	.word	0x2003e3a8
   d4b5c:	000d6f54 	.word	0x000d6f54

000d4b60 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4b60:	b510      	push	{r4, lr}
   d4b62:	4604      	mov	r4, r0
{
    _spi = spi;
   d4b64:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4b66:	4608      	mov	r0, r1
   d4b68:	f7ff fdb0 	bl	d46cc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4b6c:	2300      	movs	r3, #0
   d4b6e:	6063      	str	r3, [r4, #4]
}
   d4b70:	4620      	mov	r0, r4
   d4b72:	bd10      	pop	{r4, pc}

000d4b74 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4b74:	7800      	ldrb	r0, [r0, #0]
   d4b76:	f7ff bdb1 	b.w	d46dc <HAL_SPI_Is_Enabled>
	...

000d4b7c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4b7c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b7e:	4c09      	ldr	r4, [pc, #36]	; (d4ba4 <_GLOBAL__sub_I_System+0x28>)
   d4b80:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b82:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b86:	6020      	str	r0, [r4, #0]
   d4b88:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b8a:	71a0      	strb	r0, [r4, #6]
   d4b8c:	8120      	strh	r0, [r4, #8]
   d4b8e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b90:	f7ff febc 	bl	d490c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4b94:	4620      	mov	r0, r4
   d4b96:	4a04      	ldr	r2, [pc, #16]	; (d4ba8 <_GLOBAL__sub_I_System+0x2c>)
   d4b98:	4904      	ldr	r1, [pc, #16]	; (d4bac <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4b9e:	f001 b97f 	b.w	d5ea0 <__aeabi_atexit>
   d4ba2:	bf00      	nop
   d4ba4:	2003e3b0 	.word	0x2003e3b0
   d4ba8:	2003e350 	.word	0x2003e350
   d4bac:	000d40f9 	.word	0x000d40f9

000d4bb0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4bb0:	b510      	push	{r4, lr}
   d4bb2:	4604      	mov	r4, r0
{
	free(buffer);
   d4bb4:	6800      	ldr	r0, [r0, #0]
   d4bb6:	f7ff ff5d 	bl	d4a74 <free>
}
   d4bba:	4620      	mov	r0, r4
   d4bbc:	bd10      	pop	{r4, pc}

000d4bbe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4bbe:	b510      	push	{r4, lr}
   d4bc0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4bc2:	6800      	ldr	r0, [r0, #0]
   d4bc4:	b108      	cbz	r0, d4bca <_ZN6String10invalidateEv+0xc>
   d4bc6:	f7ff ff55 	bl	d4a74 <free>
	buffer = NULL;
   d4bca:	2300      	movs	r3, #0
   d4bcc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4bce:	60a3      	str	r3, [r4, #8]
   d4bd0:	6063      	str	r3, [r4, #4]
   d4bd2:	bd10      	pop	{r4, pc}

000d4bd4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4bd4:	b538      	push	{r3, r4, r5, lr}
   d4bd6:	4604      	mov	r4, r0
   d4bd8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4bda:	6800      	ldr	r0, [r0, #0]
   d4bdc:	3101      	adds	r1, #1
   d4bde:	f7ff ff51 	bl	d4a84 <realloc>
	if (newbuffer) {
   d4be2:	b110      	cbz	r0, d4bea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4be4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4be8:	2001      	movs	r0, #1
	}
	return 0;
}
   d4bea:	bd38      	pop	{r3, r4, r5, pc}

000d4bec <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4bec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4bee:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4bf0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4bf2:	b113      	cbz	r3, d4bfa <_ZN6String7reserveEj+0xe>
   d4bf4:	6843      	ldr	r3, [r0, #4]
   d4bf6:	428b      	cmp	r3, r1
   d4bf8:	d207      	bcs.n	d4c0a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4bfa:	4620      	mov	r0, r4
   d4bfc:	f7ff ffea 	bl	d4bd4 <_ZN6String12changeBufferEj>
   d4c00:	b120      	cbz	r0, d4c0c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4c02:	68a3      	ldr	r3, [r4, #8]
   d4c04:	b90b      	cbnz	r3, d4c0a <_ZN6String7reserveEj+0x1e>
   d4c06:	6822      	ldr	r2, [r4, #0]
   d4c08:	7013      	strb	r3, [r2, #0]
   d4c0a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4c0c:	bd10      	pop	{r4, pc}

000d4c0e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c0e:	b570      	push	{r4, r5, r6, lr}
   d4c10:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4c12:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c14:	4604      	mov	r4, r0
   d4c16:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4c18:	f7ff ffe8 	bl	d4bec <_ZN6String7reserveEj>
   d4c1c:	b918      	cbnz	r0, d4c26 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4c1e:	4620      	mov	r0, r4
   d4c20:	f7ff ffcd 	bl	d4bbe <_ZN6String10invalidateEv>
		return *this;
   d4c24:	e009      	b.n	d4c3a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4c26:	462a      	mov	r2, r5
   d4c28:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4c2a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4c2c:	6820      	ldr	r0, [r4, #0]
   d4c2e:	f002 f89b 	bl	d6d68 <memcpy>
	buffer[len] = 0;
   d4c32:	6822      	ldr	r2, [r4, #0]
   d4c34:	68a3      	ldr	r3, [r4, #8]
   d4c36:	2100      	movs	r1, #0
   d4c38:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4c3a:	4620      	mov	r0, r4
   d4c3c:	bd70      	pop	{r4, r5, r6, pc}

000d4c3e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c3e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c40:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c42:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c44:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4c46:	6043      	str	r3, [r0, #4]
	len = 0;
   d4c48:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c4a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4c4c:	460d      	mov	r5, r1
   d4c4e:	b139      	cbz	r1, d4c60 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4c50:	4608      	mov	r0, r1
   d4c52:	f002 f8ea 	bl	d6e2a <strlen>
   d4c56:	4629      	mov	r1, r5
   d4c58:	4602      	mov	r2, r0
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	f7ff ffd7 	bl	d4c0e <_ZN6String4copyEPKcj>
}
   d4c60:	4620      	mov	r0, r4
   d4c62:	bd38      	pop	{r3, r4, r5, pc}

000d4c64 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4c64:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4c66:	b510      	push	{r4, lr}
   d4c68:	460b      	mov	r3, r1
   d4c6a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4c6c:	d007      	beq.n	d4c7e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4c6e:	6809      	ldr	r1, [r1, #0]
   d4c70:	b119      	cbz	r1, d4c7a <_ZN6StringaSERKS_+0x16>
   d4c72:	689a      	ldr	r2, [r3, #8]
   d4c74:	f7ff ffcb 	bl	d4c0e <_ZN6String4copyEPKcj>
   d4c78:	e001      	b.n	d4c7e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4c7a:	f7ff ffa0 	bl	d4bbe <_ZN6String10invalidateEv>

	return *this;
}
   d4c7e:	4620      	mov	r0, r4
   d4c80:	bd10      	pop	{r4, pc}

000d4c82 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4c82:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c84:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4c86:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c88:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4c8a:	6043      	str	r3, [r0, #4]
	len = 0;
   d4c8c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c8e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d4c90:	f7ff ffe8 	bl	d4c64 <_ZN6StringaSERKS_>
}
   d4c94:	4620      	mov	r0, r4
   d4c96:	bd10      	pop	{r4, pc}

000d4c98 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4c98:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4c9a:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4c9c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4c9e:	b912      	cbnz	r2, d4ca6 <_ZNK6String6equalsEPKc+0xe>
   d4ca0:	b919      	cbnz	r1, d4caa <_ZNK6String6equalsEPKc+0x12>
   d4ca2:	2001      	movs	r0, #1
   d4ca4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4ca6:	b911      	cbnz	r1, d4cae <_ZNK6String6equalsEPKc+0x16>
   d4ca8:	6803      	ldr	r3, [r0, #0]
   d4caa:	7818      	ldrb	r0, [r3, #0]
   d4cac:	e002      	b.n	d4cb4 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d4cae:	6800      	ldr	r0, [r0, #0]
   d4cb0:	f002 f896 	bl	d6de0 <strcmp>
   d4cb4:	fab0 f080 	clz	r0, r0
   d4cb8:	0940      	lsrs	r0, r0, #5
}
   d4cba:	bd08      	pop	{r3, pc}

000d4cbc <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4cbc:	b510      	push	{r4, lr}
   d4cbe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4cc0:	6800      	ldr	r0, [r0, #0]
   d4cc2:	b108      	cbz	r0, d4cc8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4cc4:	f7ff fd42 	bl	d474c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4cc8:	4620      	mov	r0, r4
   d4cca:	bd10      	pop	{r4, pc}

000d4ccc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4ccc:	680b      	ldr	r3, [r1, #0]
   d4cce:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4cd0:	b113      	cbz	r3, d4cd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4cd2:	685a      	ldr	r2, [r3, #4]
   d4cd4:	3201      	adds	r2, #1
   d4cd6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4cd8:	4770      	bx	lr
	...

000d4cdc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4cdc:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4cde:	4c06      	ldr	r4, [pc, #24]	; (d4cf8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4ce0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4ce2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4ce4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4ce6:	f7ff fd29 	bl	d473c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4cea:	4620      	mov	r0, r4
   d4cec:	4a03      	ldr	r2, [pc, #12]	; (d4cfc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4cee:	4904      	ldr	r1, [pc, #16]	; (d4d00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4cf4:	f001 b8d4 	b.w	d5ea0 <__aeabi_atexit>
   d4cf8:	2003e3bc 	.word	0x2003e3bc
   d4cfc:	2003e350 	.word	0x2003e350
   d4d00:	000d4cbd 	.word	0x000d4cbd

000d4d04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d06:	4606      	mov	r6, r0
   d4d08:	460d      	mov	r5, r1
   d4d0a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4d0c:	2400      	movs	r4, #0
  while (size--) {
   d4d0e:	42bd      	cmp	r5, r7
   d4d10:	d00c      	beq.n	d4d2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4d12:	6833      	ldr	r3, [r6, #0]
   d4d14:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d18:	689b      	ldr	r3, [r3, #8]
   d4d1a:	4630      	mov	r0, r6
   d4d1c:	4798      	blx	r3
     if (chunk>=0)
   d4d1e:	2800      	cmp	r0, #0
   d4d20:	db01      	blt.n	d4d26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d22:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4d24:	e7f3      	b.n	d4d0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d26:	2c00      	cmp	r4, #0
   d4d28:	bf08      	it	eq
   d4d2a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d30 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d30:	b570      	push	{r4, r5, r6, lr}
   d4d32:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4d34:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4d36:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4d38:	b149      	cbz	r1, d4d4e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4d3a:	f002 f876 	bl	d6e2a <strlen>
   d4d3e:	682b      	ldr	r3, [r5, #0]
   d4d40:	4602      	mov	r2, r0
   d4d42:	4621      	mov	r1, r4
   d4d44:	4628      	mov	r0, r5
   d4d46:	68db      	ldr	r3, [r3, #12]
    }
   d4d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4d4c:	4718      	bx	r3
    }
   d4d4e:	bd70      	pop	{r4, r5, r6, pc}

000d4d50 <_ZN5Print5printEPKc>:
   d4d50:	b508      	push	{r3, lr}
   d4d52:	f7ff ffed 	bl	d4d30 <_ZN5Print5writeEPKc>
   d4d56:	bd08      	pop	{r3, pc}

000d4d58 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4d58:	6803      	ldr	r3, [r0, #0]
   d4d5a:	689b      	ldr	r3, [r3, #8]
   d4d5c:	4718      	bx	r3

000d4d5e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d5e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d60:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d62:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d64:	f7ff fff8 	bl	d4d58 <_ZN5Print5printEc>
  n += print('\n');
   d4d68:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4d6a:	4604      	mov	r4, r0
  n += print('\n');
   d4d6c:	4628      	mov	r0, r5
   d4d6e:	f7ff fff3 	bl	d4d58 <_ZN5Print5printEc>
  return n;
}
   d4d72:	4420      	add	r0, r4
   d4d74:	bd38      	pop	{r3, r4, r5, pc}

000d4d76 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4d76:	b538      	push	{r3, r4, r5, lr}
   d4d78:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d7a:	f7ff ffd9 	bl	d4d30 <_ZN5Print5writeEPKc>
   d4d7e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4d80:	4628      	mov	r0, r5
   d4d82:	f7ff ffec 	bl	d4d5e <_ZN5Print7printlnEv>
  return n;
}
   d4d86:	4420      	add	r0, r4
   d4d88:	bd38      	pop	{r3, r4, r5, pc}

000d4d8a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d8a:	b530      	push	{r4, r5, lr}
   d4d8c:	b08b      	sub	sp, #44	; 0x2c
   d4d8e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d90:	2100      	movs	r1, #0
   d4d92:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d96:	2a01      	cmp	r2, #1
   d4d98:	bf98      	it	ls
   d4d9a:	220a      	movls	r2, #10
   d4d9c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4da0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4da4:	fb05 3312 	mls	r3, r5, r2, r3
   d4da8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4dac:	2b09      	cmp	r3, #9
   d4dae:	bf94      	ite	ls
   d4db0:	3330      	addls	r3, #48	; 0x30
   d4db2:	3337      	addhi	r3, #55	; 0x37
   d4db4:	b2db      	uxtb	r3, r3
   d4db6:	4621      	mov	r1, r4
   d4db8:	f804 3901 	strb.w	r3, [r4], #-1
   d4dbc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4dbe:	2d00      	cmp	r5, #0
   d4dc0:	d1ee      	bne.n	d4da0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4dc2:	f7ff ffb5 	bl	d4d30 <_ZN5Print5writeEPKc>
}
   d4dc6:	b00b      	add	sp, #44	; 0x2c
   d4dc8:	bd30      	pop	{r4, r5, pc}

000d4dca <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4dca:	b40c      	push	{r2, r3}
   d4dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4dd0:	b087      	sub	sp, #28
   d4dd2:	af00      	add	r7, sp, #0
   d4dd4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4dd8:	4605      	mov	r5, r0
   d4dda:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4dde:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4de0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4de2:	4623      	mov	r3, r4
   d4de4:	464a      	mov	r2, r9
   d4de6:	2114      	movs	r1, #20
   d4de8:	1d38      	adds	r0, r7, #4
   d4dea:	f7ff fe5b 	bl	d4aa4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4dee:	2813      	cmp	r0, #19
   d4df0:	d805      	bhi.n	d4dfe <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4df2:	1d39      	adds	r1, r7, #4
   d4df4:	4628      	mov	r0, r5
   d4df6:	f7ff ff9b 	bl	d4d30 <_ZN5Print5writeEPKc>
   d4dfa:	4604      	mov	r4, r0
   d4dfc:	e013      	b.n	d4e26 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4dfe:	f100 0308 	add.w	r3, r0, #8
   d4e02:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4e06:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4e08:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4e0c:	1c41      	adds	r1, r0, #1
   d4e0e:	4623      	mov	r3, r4
   d4e10:	464a      	mov	r2, r9
   d4e12:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4e14:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4e16:	f7ff fe45 	bl	d4aa4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e1a:	4669      	mov	r1, sp
   d4e1c:	4628      	mov	r0, r5
   d4e1e:	f7ff ff87 	bl	d4d30 <_ZN5Print5writeEPKc>
   d4e22:	4604      	mov	r4, r0
   d4e24:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4e26:	b11e      	cbz	r6, d4e30 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4e28:	4628      	mov	r0, r5
   d4e2a:	f7ff ff98 	bl	d4d5e <_ZN5Print7printlnEv>
   d4e2e:	4404      	add	r4, r0
    return n;
}
   d4e30:	4620      	mov	r0, r4
   d4e32:	371c      	adds	r7, #28
   d4e34:	46bd      	mov	sp, r7
   d4e36:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4e3a:	b002      	add	sp, #8
   d4e3c:	4770      	bx	lr
	...

000d4e40 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e40:	4b01      	ldr	r3, [pc, #4]	; (d4e48 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e42:	4a02      	ldr	r2, [pc, #8]	; (d4e4c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e44:	601a      	str	r2, [r3, #0]
   d4e46:	4770      	bx	lr
   d4e48:	2003e3c0 	.word	0x2003e3c0
   d4e4c:	000d6ff3 	.word	0x000d6ff3

000d4e50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e50:	4b02      	ldr	r3, [pc, #8]	; (d4e5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e52:	681a      	ldr	r2, [r3, #0]
   d4e54:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4e56:	601a      	str	r2, [r3, #0]
   d4e58:	4770      	bx	lr
   d4e5a:	bf00      	nop
   d4e5c:	2003e2e4 	.word	0x2003e2e4
   d4e60:	2003e3c4 	.word	0x2003e3c4

000d4e64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4e64:	2100      	movs	r1, #0
   d4e66:	f7ff bd59 	b.w	d491c <system_delay_ms>

000d4e6a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e6a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e6c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e6e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4e70:	b113      	cbz	r3, d4e78 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e72:	2203      	movs	r2, #3
   d4e74:	4601      	mov	r1, r0
   d4e76:	4798      	blx	r3
    }
   d4e78:	4620      	mov	r0, r4
   d4e7a:	bd10      	pop	{r4, pc}

000d4e7c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4e7c:	b510      	push	{r4, lr}
   d4e7e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e80:	f7ff fff3 	bl	d4e6a <_ZNSt14_Function_baseD1Ev>
   d4e84:	4620      	mov	r0, r4
   d4e86:	bd10      	pop	{r4, pc}

000d4e88 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4e88:	b513      	push	{r0, r1, r4, lr}
   d4e8a:	460b      	mov	r3, r1
   d4e8c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e8e:	c803      	ldmia	r0, {r0, r1}
   d4e90:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4e94:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4e98:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4e9c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4ea0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4ea4:	b002      	add	sp, #8
   d4ea6:	bd10      	pop	{r4, pc}

000d4ea8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ea8:	4803      	ldr	r0, [pc, #12]	; (d4eb8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4eaa:	4a04      	ldr	r2, [pc, #16]	; (d4ebc <_GLOBAL__sub_I_RGB+0x14>)
   d4eac:	4904      	ldr	r1, [pc, #16]	; (d4ec0 <_GLOBAL__sub_I_RGB+0x18>)
   d4eae:	2300      	movs	r3, #0
   d4eb0:	6083      	str	r3, [r0, #8]
   d4eb2:	f000 bff5 	b.w	d5ea0 <__aeabi_atexit>
   d4eb6:	bf00      	nop
   d4eb8:	2003e3c8 	.word	0x2003e3c8
   d4ebc:	2003e350 	.word	0x2003e350
   d4ec0:	000d4e7d 	.word	0x000d4e7d

000d4ec4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4ec4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4ec6:	4b0c      	ldr	r3, [pc, #48]	; (d4ef8 <serialEventRun+0x34>)
   d4ec8:	b133      	cbz	r3, d4ed8 <serialEventRun+0x14>
   d4eca:	f000 fc47 	bl	d575c <_Z16_fetch_usbserialv>
   d4ece:	6803      	ldr	r3, [r0, #0]
   d4ed0:	691b      	ldr	r3, [r3, #16]
   d4ed2:	4798      	blx	r3
   d4ed4:	2800      	cmp	r0, #0
   d4ed6:	dc09      	bgt.n	d4eec <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4ed8:	4b08      	ldr	r3, [pc, #32]	; (d4efc <serialEventRun+0x38>)
   d4eda:	b163      	cbz	r3, d4ef6 <serialEventRun+0x32>
   d4edc:	f000 fd0c 	bl	d58f8 <_Z22__fetch_global_Serial1v>
   d4ee0:	6803      	ldr	r3, [r0, #0]
   d4ee2:	691b      	ldr	r3, [r3, #16]
   d4ee4:	4798      	blx	r3
   d4ee6:	2800      	cmp	r0, #0
   d4ee8:	dc03      	bgt.n	d4ef2 <serialEventRun+0x2e>
   d4eea:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4eec:	f3af 8000 	nop.w
   d4ef0:	e7f2      	b.n	d4ed8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4ef2:	f3af 8000 	nop.w
   d4ef6:	bd08      	pop	{r3, pc}
	...

000d4f00 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4f00:	b508      	push	{r3, lr}
	serialEventRun();
   d4f02:	f7ff ffdf 	bl	d4ec4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4f06:	f7ff fbf9 	bl	d46fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4f0a:	4b01      	ldr	r3, [pc, #4]	; (d4f10 <_post_loop+0x10>)
   d4f0c:	6018      	str	r0, [r3, #0]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	2003e730 	.word	0x2003e730

000d4f14 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4f14:	4802      	ldr	r0, [pc, #8]	; (d4f20 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4f16:	4a03      	ldr	r2, [pc, #12]	; (d4f24 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4f18:	4903      	ldr	r1, [pc, #12]	; (d4f28 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4f1a:	1a12      	subs	r2, r2, r0
   d4f1c:	f001 bf24 	b.w	d6d68 <memcpy>
   d4f20:	2003f400 	.word	0x2003f400
   d4f24:	2003f404 	.word	0x2003f404
   d4f28:	000d7290 	.word	0x000d7290

000d4f2c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4f2c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f2e:	2300      	movs	r3, #0
   d4f30:	9300      	str	r3, [sp, #0]
   d4f32:	461a      	mov	r2, r3
   d4f34:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f38:	f7ff fd12 	bl	d4960 <system_ctrl_set_result>
}
   d4f3c:	b003      	add	sp, #12
   d4f3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4f44 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4f44:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4f46:	8843      	ldrh	r3, [r0, #2]
   d4f48:	2b0a      	cmp	r3, #10
   d4f4a:	d008      	beq.n	d4f5e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4f4c:	2b50      	cmp	r3, #80	; 0x50
   d4f4e:	d109      	bne.n	d4f64 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4f50:	4b09      	ldr	r3, [pc, #36]	; (d4f78 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4f52:	681b      	ldr	r3, [r3, #0]
   d4f54:	b13b      	cbz	r3, d4f66 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4f56:	b003      	add	sp, #12
   d4f58:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4f5c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4f5e:	f7ff ffe5 	bl	d4f2c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4f62:	e006      	b.n	d4f72 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f64:	2300      	movs	r3, #0
   d4f66:	9300      	str	r3, [sp, #0]
   d4f68:	461a      	mov	r2, r3
   d4f6a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f6e:	f7ff fcf7 	bl	d4960 <system_ctrl_set_result>
        break;
    }
}
   d4f72:	b003      	add	sp, #12
   d4f74:	f85d fb04 	ldr.w	pc, [sp], #4
   d4f78:	2003e3d8 	.word	0x2003e3d8

000d4f7c <module_user_init_hook>:

void module_user_init_hook()
{
   d4f7c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4f7e:	4c10      	ldr	r4, [pc, #64]	; (d4fc0 <module_user_init_hook+0x44>)
   d4f80:	4d10      	ldr	r5, [pc, #64]	; (d4fc4 <module_user_init_hook+0x48>)
   d4f82:	6823      	ldr	r3, [r4, #0]
   d4f84:	42ab      	cmp	r3, r5
   d4f86:	4b10      	ldr	r3, [pc, #64]	; (d4fc8 <module_user_init_hook+0x4c>)
   d4f88:	bf0c      	ite	eq
   d4f8a:	2201      	moveq	r2, #1
   d4f8c:	2200      	movne	r2, #0
   d4f8e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4f90:	d002      	beq.n	d4f98 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4f92:	f7ff ffbf 	bl	d4f14 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4f96:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4f98:	f7ff fba8 	bl	d46ec <HAL_RNG_GetRandomNumber>
   d4f9c:	4604      	mov	r4, r0
    srand(seed);
   d4f9e:	f001 fef7 	bl	d6d90 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4fa2:	4b0a      	ldr	r3, [pc, #40]	; (d4fcc <module_user_init_hook+0x50>)
   d4fa4:	b113      	cbz	r3, d4fac <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4fac:	2100      	movs	r1, #0
   d4fae:	4807      	ldr	r0, [pc, #28]	; (d4fcc <module_user_init_hook+0x50>)
   d4fb0:	f7ff fd50 	bl	d4a54 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4fb4:	2100      	movs	r1, #0
   d4fb6:	4806      	ldr	r0, [pc, #24]	; (d4fd0 <module_user_init_hook+0x54>)
}
   d4fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4fbc:	f7ff bcc6 	b.w	d494c <system_ctrl_set_app_request_handler>
   d4fc0:	2003f400 	.word	0x2003f400
   d4fc4:	9a271c1e 	.word	0x9a271c1e
   d4fc8:	2003e3dc 	.word	0x2003e3dc
   d4fcc:	00000000 	.word	0x00000000
   d4fd0:	000d4f45 	.word	0x000d4f45

000d4fd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4fd4:	4770      	bx	lr

000d4fd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4fd6:	2000      	movs	r0, #0
   d4fd8:	4770      	bx	lr

000d4fda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4fda:	b510      	push	{r4, lr}
   d4fdc:	2110      	movs	r1, #16
   d4fde:	4604      	mov	r4, r0
   d4fe0:	f000 ff6c 	bl	d5ebc <_ZdlPvj>
   d4fe4:	4620      	mov	r0, r4
   d4fe6:	bd10      	pop	{r4, pc}

000d4fe8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4fe8:	b508      	push	{r3, lr}
      { delete this; }
   d4fea:	b108      	cbz	r0, d4ff0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4fec:	f7ff fff5 	bl	d4fda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4ff0:	bd08      	pop	{r3, pc}

000d4ff2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ff2:	2200      	movs	r2, #0
   d4ff4:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4ff6:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ff8:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4ffc:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ffe:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5002:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5004:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5006:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5008:	680c      	ldr	r4, [r1, #0]
   d500a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d500c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d500e:	bd10      	pop	{r4, pc}

000d5010 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5010:	b510      	push	{r4, lr}
   d5012:	4604      	mov	r4, r0
    free((void*)msg_);
   d5014:	6800      	ldr	r0, [r0, #0]
   d5016:	f7ff fd2d 	bl	d4a74 <free>
}
   d501a:	4620      	mov	r0, r4
   d501c:	bd10      	pop	{r4, pc}

000d501e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d501e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5020:	68c4      	ldr	r4, [r0, #12]
   d5022:	b1f4      	cbz	r4, d5062 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5024:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5026:	2b02      	cmp	r3, #2
   d5028:	d103      	bne.n	d5032 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d502a:	f104 000c 	add.w	r0, r4, #12
   d502e:	f7ff ffef 	bl	d5010 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5032:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5034:	b135      	cbz	r5, d5044 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5036:	4628      	mov	r0, r5
   d5038:	f7ff ff17 	bl	d4e6a <_ZNSt14_Function_baseD1Ev>
   d503c:	2110      	movs	r1, #16
   d503e:	4628      	mov	r0, r5
   d5040:	f000 ff3c 	bl	d5ebc <_ZdlPvj>
   d5044:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5046:	b135      	cbz	r5, d5056 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5048:	4628      	mov	r0, r5
   d504a:	f7ff ff0e 	bl	d4e6a <_ZNSt14_Function_baseD1Ev>
   d504e:	2110      	movs	r1, #16
   d5050:	4628      	mov	r0, r5
   d5052:	f000 ff33 	bl	d5ebc <_ZdlPvj>
   d5056:	4620      	mov	r0, r4
   d5058:	2114      	movs	r1, #20
   d505a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d505e:	f000 bf2d 	b.w	d5ebc <_ZdlPvj>
   d5062:	bd38      	pop	{r3, r4, r5, pc}

000d5064 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5064:	b510      	push	{r4, lr}
   d5066:	b088      	sub	sp, #32
   d5068:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d506a:	4668      	mov	r0, sp
   d506c:	f7ff fde7 	bl	d4c3e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5070:	4669      	mov	r1, sp
   d5072:	a804      	add	r0, sp, #16
   d5074:	f7ff fe05 	bl	d4c82 <_ZN6StringC1ERKS_>
   d5078:	a804      	add	r0, sp, #16
   d507a:	47a0      	blx	r4
   d507c:	4604      	mov	r4, r0
   d507e:	a804      	add	r0, sp, #16
   d5080:	f7ff fd96 	bl	d4bb0 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5084:	4668      	mov	r0, sp
   d5086:	f7ff fd93 	bl	d4bb0 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d508a:	4620      	mov	r0, r4
   d508c:	b008      	add	sp, #32
   d508e:	bd10      	pop	{r4, pc}

000d5090 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5090:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5092:	2410      	movs	r4, #16
   d5094:	b085      	sub	sp, #20
   d5096:	4607      	mov	r7, r0
   d5098:	460e      	mov	r6, r1
   d509a:	4615      	mov	r5, r2
   d509c:	2100      	movs	r1, #0
   d509e:	4622      	mov	r2, r4
   d50a0:	4668      	mov	r0, sp
   d50a2:	f001 fe6c 	bl	d6d7e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d50a6:	2200      	movs	r2, #0
   d50a8:	4669      	mov	r1, sp
   d50aa:	4610      	mov	r0, r2
         size = sizeof(*this);
   d50ac:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d50b0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d50b2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d50b4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d50b6:	f7ff fcb5 	bl	d4a24 <spark_function>
}
   d50ba:	b005      	add	sp, #20
   d50bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d50be:	b513      	push	{r0, r1, r4, lr}
   d50c0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d50c2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d50c6:	2300      	movs	r3, #0
   d50c8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d50ca:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d50cc:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d50ce:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50d0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d50d2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d50d4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50d6:	f7ff f9bd 	bl	d4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50da:	4620      	mov	r0, r4
   d50dc:	b002      	add	sp, #8
   d50de:	bd10      	pop	{r4, pc}

000d50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d50e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50e2:	460c      	mov	r4, r1
   d50e4:	ad02      	add	r5, sp, #8
   d50e6:	f854 3b04 	ldr.w	r3, [r4], #4
   d50ea:	f845 3d08 	str.w	r3, [r5, #-8]!
   d50ee:	4606      	mov	r6, r0
   d50f0:	460f      	mov	r7, r1
   d50f2:	a801      	add	r0, sp, #4
   d50f4:	4621      	mov	r1, r4
   d50f6:	f7ff fde9 	bl	d4ccc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d50fa:	4629      	mov	r1, r5
   d50fc:	4630      	mov	r0, r6
   d50fe:	f7ff ffde 	bl	d50be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5102:	a801      	add	r0, sp, #4
   d5104:	f7ff f9a6 	bl	d4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5108:	4620      	mov	r0, r4
   d510a:	f7ff f9a3 	bl	d4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d510e:	4638      	mov	r0, r7
   d5110:	2108      	movs	r1, #8
   d5112:	f000 fed3 	bl	d5ebc <_ZdlPvj>
        return p;
    }
   d5116:	4630      	mov	r0, r6
   d5118:	b003      	add	sp, #12
   d511a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d511c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d511c:	b538      	push	{r3, r4, r5, lr}
   d511e:	2300      	movs	r3, #0
   d5120:	4604      	mov	r4, r0
   d5122:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5124:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5126:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5128:	f7fe ffb7 	bl	d409a <_Znwj>
   d512c:	b128      	cbz	r0, d513a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d512e:	2301      	movs	r3, #1
   d5130:	6043      	str	r3, [r0, #4]
   d5132:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5134:	4b02      	ldr	r3, [pc, #8]	; (d5140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5136:	6003      	str	r3, [r0, #0]
   d5138:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d513a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d513c:	4620      	mov	r0, r4
   d513e:	bd38      	pop	{r3, r4, r5, pc}
   d5140:	000d7090 	.word	0x000d7090

000d5144 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5144:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5146:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5148:	b90a      	cbnz	r2, d514e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d514a:	f000 feca 	bl	d5ee2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d514e:	68c3      	ldr	r3, [r0, #12]
    }
   d5150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5154:	4718      	bx	r3

000d5156 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5156:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5158:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d515a:	f100 0110 	add.w	r1, r0, #16
   d515e:	f7ff fff1 	bl	d5144 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5162:	bd08      	pop	{r3, pc}

000d5164 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5164:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5166:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5168:	b90a      	cbnz	r2, d516e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d516a:	f000 feba 	bl	d5ee2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d516e:	68c3      	ldr	r3, [r0, #12]
    }
   d5170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5174:	4718      	bx	r3

000d5176 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5176:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5178:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d517a:	f100 0110 	add.w	r1, r0, #16
   d517e:	f7ff fff1 	bl	d5164 <_ZNKSt8functionIFvRKbEEclES1_>
   d5182:	bd08      	pop	{r3, pc}

000d5184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5184:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5186:	2300      	movs	r3, #0
   d5188:	6083      	str	r3, [r0, #8]
   d518a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d518c:	4604      	mov	r4, r0
   d518e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5190:	b12b      	cbz	r3, d519e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5192:	2202      	movs	r2, #2
   d5194:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5196:	68eb      	ldr	r3, [r5, #12]
   d5198:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d519a:	68ab      	ldr	r3, [r5, #8]
   d519c:	60a3      	str	r3, [r4, #8]
	}
    }
   d519e:	4620      	mov	r0, r4
   d51a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d51a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d51a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d51a6:	b089      	sub	sp, #36	; 0x24
   d51a8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d51aa:	4668      	mov	r0, sp
   d51ac:	f7ff ff21 	bl	d4ff2 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d51b0:	2300      	movs	r3, #0
   d51b2:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d51b6:	f04f 0202 	mov.w	r2, #2
   d51ba:	e8d4 3f4f 	ldrexb	r3, [r4]
   d51be:	2b00      	cmp	r3, #0
   d51c0:	d103      	bne.n	d51ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d51c2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d51c6:	2900      	cmp	r1, #0
   d51c8:	d1f7      	bne.n	d51ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d51ca:	d002      	beq.n	d51d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d51cc:	f88d 3008 	strb.w	r3, [sp, #8]
   d51d0:	e063      	b.n	d529a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d51d2:	f114 050c 	adds.w	r5, r4, #12
   d51d6:	d003      	beq.n	d51e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d51d8:	4669      	mov	r1, sp
   d51da:	4628      	mov	r0, r5
   d51dc:	f7ff ff09 	bl	d4ff2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d51e0:	f3bf 8f5f 	dmb	sy
   d51e4:	2301      	movs	r3, #1
   d51e6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d51e8:	2000      	movs	r0, #0
   d51ea:	f104 0308 	add.w	r3, r4, #8
   d51ee:	f3bf 8f5f 	dmb	sy
   d51f2:	e853 6f00 	ldrex	r6, [r3]
   d51f6:	e843 0200 	strex	r2, r0, [r3]
   d51fa:	2a00      	cmp	r2, #0
   d51fc:	d1f9      	bne.n	d51f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d51fe:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5202:	2e00      	cmp	r6, #0
   d5204:	d049      	beq.n	d529a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5206:	f7ff fb91 	bl	d492c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d520a:	b120      	cbz	r0, d5216 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d520c:	4629      	mov	r1, r5
   d520e:	4630      	mov	r0, r6
   d5210:	f7ff ff98 	bl	d5144 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5214:	e03a      	b.n	d528c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5216:	4631      	mov	r1, r6
   d5218:	a802      	add	r0, sp, #8
   d521a:	f7ff ffb3 	bl	d5184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d521e:	68e0      	ldr	r0, [r4, #12]
   d5220:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5224:	b108      	cbz	r0, d522a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5226:	f001 fde5 	bl	d6df4 <strdup>
   d522a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d522c:	2010      	movs	r0, #16
   d522e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5232:	f7fe ff32 	bl	d409a <_Znwj>
   d5236:	4605      	mov	r5, r0
   d5238:	b1e8      	cbz	r0, d5276 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d523a:	2700      	movs	r7, #0
   d523c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d523e:	2018      	movs	r0, #24
   d5240:	f7fe ff2b 	bl	d409a <_Znwj>
   d5244:	4604      	mov	r4, r0
   d5246:	b188      	cbz	r0, d526c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5248:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d524a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d524c:	a802      	add	r0, sp, #8
   d524e:	f7ff fe1b 	bl	d4e88 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5252:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5254:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5256:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5258:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d525a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d525c:	a906      	add	r1, sp, #24
   d525e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5260:	60e3      	str	r3, [r4, #12]
   d5262:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5266:	9205      	str	r2, [sp, #20]
   d5268:	f7ff fec3 	bl	d4ff2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d526c:	4b0d      	ldr	r3, [pc, #52]	; (d52a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d526e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5270:	4b0d      	ldr	r3, [pc, #52]	; (d52a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5272:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5274:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5276:	a806      	add	r0, sp, #24
   d5278:	f7ff feca 	bl	d5010 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d527c:	a802      	add	r0, sp, #8
   d527e:	f7ff fdf4 	bl	d4e6a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5282:	2200      	movs	r2, #0
   d5284:	4629      	mov	r1, r5
   d5286:	4809      	ldr	r0, [pc, #36]	; (d52ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5288:	f7ff fb58 	bl	d493c <application_thread_invoke>
   d528c:	4630      	mov	r0, r6
   d528e:	f7ff fdec 	bl	d4e6a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5292:	2110      	movs	r1, #16
   d5294:	4630      	mov	r0, r6
   d5296:	f000 fe11 	bl	d5ebc <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d529a:	4668      	mov	r0, sp
   d529c:	f7ff feb8 	bl	d5010 <_ZN8particle5ErrorD1Ev>
    }
   d52a0:	b009      	add	sp, #36	; 0x24
   d52a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d52a4:	000d5157 	.word	0x000d5157
   d52a8:	000d53cd 	.word	0x000d53cd
   d52ac:	000d5945 	.word	0x000d5945

000d52b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d52b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d52b4:	b08b      	sub	sp, #44	; 0x2c
   d52b6:	4606      	mov	r6, r0
   d52b8:	460f      	mov	r7, r1
   d52ba:	4690      	mov	r8, r2
   d52bc:	4699      	mov	r9, r3
   d52be:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d52c2:	f7ff fbb7 	bl	d4a34 <spark_cloud_flag_connected>
   d52c6:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d52c8:	4683      	mov	fp, r0
   d52ca:	bb30      	cbnz	r0, d531a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d52cc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d52d0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d52d2:	a905      	add	r1, sp, #20
   d52d4:	4628      	mov	r0, r5
   d52d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d52da:	f7ff fe8a 	bl	d4ff2 <_ZN8particle5ErrorC1EOS0_>
   d52de:	2014      	movs	r0, #20
   d52e0:	f7fe fedb 	bl	d409a <_Znwj>
   d52e4:	4604      	mov	r4, r0
   d52e6:	b158      	cbz	r0, d5300 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d52e8:	2302      	movs	r3, #2
   d52ea:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d52ec:	2301      	movs	r3, #1
   d52ee:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d52f0:	f8c0 b004 	str.w	fp, [r0, #4]
   d52f4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d52f8:	4629      	mov	r1, r5
   d52fa:	300c      	adds	r0, #12
   d52fc:	f7ff fe79 	bl	d4ff2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5300:	4630      	mov	r0, r6
   d5302:	4621      	mov	r1, r4
   d5304:	f840 4b04 	str.w	r4, [r0], #4
   d5308:	f7ff ff08 	bl	d511c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d530c:	4628      	mov	r0, r5
   d530e:	f7ff fe7f 	bl	d5010 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5312:	a805      	add	r0, sp, #20
   d5314:	f7ff fe7c 	bl	d5010 <_ZN8particle5ErrorD1Ev>
   d5318:	e052      	b.n	d53c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d531a:	2400      	movs	r4, #0
   d531c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d531e:	2014      	movs	r0, #20
   d5320:	606c      	str	r4, [r5, #4]
   d5322:	60ac      	str	r4, [r5, #8]
   d5324:	9307      	str	r3, [sp, #28]
   d5326:	f7fe feb8 	bl	d409a <_Znwj>
   d532a:	4601      	mov	r1, r0
   d532c:	b118      	cbz	r0, d5336 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d532e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5330:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5332:	6044      	str	r4, [r0, #4]
   d5334:	6084      	str	r4, [r0, #8]
   d5336:	a804      	add	r0, sp, #16
   d5338:	9103      	str	r1, [sp, #12]
   d533a:	f7ff feef 	bl	d511c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d533e:	4b22      	ldr	r3, [pc, #136]	; (d53c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5340:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5342:	2008      	movs	r0, #8
   d5344:	f7fe fea9 	bl	d409a <_Znwj>
   d5348:	4604      	mov	r4, r0
   d534a:	b128      	cbz	r0, d5358 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d534c:	9b03      	ldr	r3, [sp, #12]
   d534e:	f840 3b04 	str.w	r3, [r0], #4
   d5352:	a904      	add	r1, sp, #16
   d5354:	f7ff fcba 	bl	d4ccc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5358:	9500      	str	r5, [sp, #0]
   d535a:	fa5f f38a 	uxtb.w	r3, sl
   d535e:	464a      	mov	r2, r9
   d5360:	4641      	mov	r1, r8
   d5362:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5364:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5366:	f7ff fb6d 	bl	d4a44 <spark_send_event>
   d536a:	b920      	cbnz	r0, d5376 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d536c:	9b03      	ldr	r3, [sp, #12]
   d536e:	785b      	ldrb	r3, [r3, #1]
   d5370:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5374:	b183      	cbz	r3, d5398 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5376:	9b03      	ldr	r3, [sp, #12]
   d5378:	9305      	str	r3, [sp, #20]
   d537a:	a904      	add	r1, sp, #16
   d537c:	a806      	add	r0, sp, #24
   d537e:	f7ff fca5 	bl	d4ccc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5382:	a905      	add	r1, sp, #20
   d5384:	4630      	mov	r0, r6
   d5386:	f7ff fe9a 	bl	d50be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d538a:	a806      	add	r0, sp, #24
   d538c:	f7ff f862 	bl	d4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5390:	a804      	add	r0, sp, #16
   d5392:	f7ff f85f 	bl	d4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5396:	e013      	b.n	d53c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5398:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d539c:	a905      	add	r1, sp, #20
   d539e:	a803      	add	r0, sp, #12
   d53a0:	9205      	str	r2, [sp, #20]
   d53a2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d53a6:	f7ff fefd 	bl	d51a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d53aa:	a805      	add	r0, sp, #20
   d53ac:	f7ff fe30 	bl	d5010 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d53b0:	a805      	add	r0, sp, #20
   d53b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d53b4:	f7ff fe94 	bl	d50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d53b8:	a806      	add	r0, sp, #24
   d53ba:	f7ff f84b 	bl	d4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53be:	e7da      	b.n	d5376 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d53c0:	4630      	mov	r0, r6
   d53c2:	b00b      	add	sp, #44	; 0x2c
   d53c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d53c8:	000d553d 	.word	0x000d553d

000d53cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d53cc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d53ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53d0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d53d2:	d006      	beq.n	d53e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d53d4:	2a03      	cmp	r2, #3
   d53d6:	d017      	beq.n	d5408 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d53d8:	2a01      	cmp	r2, #1
   d53da:	d122      	bne.n	d5422 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d53dc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d53de:	6003      	str	r3, [r0, #0]
	      break;
   d53e0:	e01f      	b.n	d5422 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d53e2:	2018      	movs	r0, #24
   d53e4:	680e      	ldr	r6, [r1, #0]
   d53e6:	f7fe fe58 	bl	d409a <_Znwj>
   d53ea:	4605      	mov	r5, r0
   d53ec:	b150      	cbz	r0, d5404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d53ee:	4631      	mov	r1, r6
   d53f0:	f7ff fec8 	bl	d5184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d53f4:	6930      	ldr	r0, [r6, #16]
   d53f6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d53fa:	b108      	cbz	r0, d5400 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d53fc:	f001 fcfa 	bl	d6df4 <strdup>
   d5400:	6128      	str	r0, [r5, #16]
   d5402:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5404:	6025      	str	r5, [r4, #0]
   d5406:	e00c      	b.n	d5422 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5408:	6804      	ldr	r4, [r0, #0]
   d540a:	b154      	cbz	r4, d5422 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d540c:	f104 0010 	add.w	r0, r4, #16
   d5410:	f7ff fdfe 	bl	d5010 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5414:	4620      	mov	r0, r4
   d5416:	f7ff fd28 	bl	d4e6a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d541a:	2118      	movs	r1, #24
   d541c:	4620      	mov	r0, r4
   d541e:	f000 fd4d 	bl	d5ebc <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5422:	2000      	movs	r0, #0
   d5424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5426 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5426:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5428:	2300      	movs	r3, #0
   d542a:	6083      	str	r3, [r0, #8]
   d542c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d542e:	4604      	mov	r4, r0
   d5430:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5432:	b12b      	cbz	r3, d5440 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5434:	2202      	movs	r2, #2
   d5436:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5438:	68eb      	ldr	r3, [r5, #12]
   d543a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d543c:	68ab      	ldr	r3, [r5, #8]
   d543e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5440:	4620      	mov	r0, r4
   d5442:	bd38      	pop	{r3, r4, r5, pc}

000d5444 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5444:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5446:	b570      	push	{r4, r5, r6, lr}
   d5448:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d544a:	d006      	beq.n	d545a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d544c:	2a03      	cmp	r2, #3
   d544e:	d011      	beq.n	d5474 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5450:	2a01      	cmp	r2, #1
   d5452:	d118      	bne.n	d5486 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5454:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5456:	6003      	str	r3, [r0, #0]
	      break;
   d5458:	e015      	b.n	d5486 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d545a:	2014      	movs	r0, #20
   d545c:	680e      	ldr	r6, [r1, #0]
   d545e:	f7fe fe1c 	bl	d409a <_Znwj>
   d5462:	4605      	mov	r5, r0
   d5464:	b120      	cbz	r0, d5470 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5466:	4631      	mov	r1, r6
   d5468:	f7ff ffdd 	bl	d5426 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d546c:	7c33      	ldrb	r3, [r6, #16]
   d546e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5470:	6025      	str	r5, [r4, #0]
   d5472:	e008      	b.n	d5486 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5474:	6804      	ldr	r4, [r0, #0]
   d5476:	b134      	cbz	r4, d5486 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5478:	4620      	mov	r0, r4
   d547a:	f7ff fcf6 	bl	d4e6a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d547e:	2114      	movs	r1, #20
   d5480:	4620      	mov	r0, r4
   d5482:	f000 fd1b 	bl	d5ebc <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5486:	2000      	movs	r0, #0
   d5488:	bd70      	pop	{r4, r5, r6, pc}
	...

000d548c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d548c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d548e:	2300      	movs	r3, #0
   d5490:	b087      	sub	sp, #28
   d5492:	460c      	mov	r4, r1
   d5494:	f3bf 8f5f 	dmb	sy
   d5498:	e850 6f00 	ldrex	r6, [r0]
   d549c:	e840 3200 	strex	r2, r3, [r0]
   d54a0:	2a00      	cmp	r2, #0
   d54a2:	d1f9      	bne.n	d5498 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d54a4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d54a8:	2e00      	cmp	r6, #0
   d54aa:	d03f      	beq.n	d552c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d54ac:	4618      	mov	r0, r3
   d54ae:	f7ff fa3d 	bl	d492c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d54b2:	4607      	mov	r7, r0
   d54b4:	b120      	cbz	r0, d54c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d54b6:	4621      	mov	r1, r4
   d54b8:	4630      	mov	r0, r6
   d54ba:	f7ff fe53 	bl	d5164 <_ZNKSt8functionIFvRKbEEclES1_>
   d54be:	e02e      	b.n	d551e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d54c0:	4631      	mov	r1, r6
   d54c2:	a801      	add	r0, sp, #4
   d54c4:	f7ff ffaf 	bl	d5426 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d54c8:	7823      	ldrb	r3, [r4, #0]
   d54ca:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d54ce:	2010      	movs	r0, #16
   d54d0:	f7fe fde3 	bl	d409a <_Znwj>
   d54d4:	4605      	mov	r5, r0
   d54d6:	b1d0      	cbz	r0, d550e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54d8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d54da:	2014      	movs	r0, #20
   d54dc:	f7fe fddd 	bl	d409a <_Znwj>
   d54e0:	4604      	mov	r4, r0
   d54e2:	b178      	cbz	r0, d5504 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54e4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d54e6:	4601      	mov	r1, r0
   d54e8:	a801      	add	r0, sp, #4
   d54ea:	f7ff fccd 	bl	d4e88 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54ee:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d54f0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d54f2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54f4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d54f6:	9203      	str	r2, [sp, #12]
   d54f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d54fa:	60e3      	str	r3, [r4, #12]
   d54fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5500:	9204      	str	r2, [sp, #16]
   d5502:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5504:	4b0a      	ldr	r3, [pc, #40]	; (d5530 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5506:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5508:	4b0a      	ldr	r3, [pc, #40]	; (d5534 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d550a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d550c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d550e:	a801      	add	r0, sp, #4
   d5510:	f7ff fcab 	bl	d4e6a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5514:	2200      	movs	r2, #0
   d5516:	4629      	mov	r1, r5
   d5518:	4807      	ldr	r0, [pc, #28]	; (d5538 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d551a:	f7ff fa0f 	bl	d493c <application_thread_invoke>
   d551e:	4630      	mov	r0, r6
   d5520:	f7ff fca3 	bl	d4e6a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5524:	2110      	movs	r1, #16
   d5526:	4630      	mov	r0, r6
   d5528:	f000 fcc8 	bl	d5ebc <_ZdlPvj>
        }
    }
   d552c:	b007      	add	sp, #28
   d552e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5530:	000d5177 	.word	0x000d5177
   d5534:	000d5445 	.word	0x000d5445
   d5538:	000d5945 	.word	0x000d5945

000d553c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d553c:	b530      	push	{r4, r5, lr}
   d553e:	b085      	sub	sp, #20
   d5540:	4604      	mov	r4, r0
   d5542:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5544:	4668      	mov	r0, sp
   d5546:	4611      	mov	r1, r2
   d5548:	f7ff fdca 	bl	d50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d554c:	b17c      	cbz	r4, d556e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d554e:	b224      	sxth	r4, r4
   d5550:	4628      	mov	r0, r5
   d5552:	b10d      	cbz	r5, d5558 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5554:	f001 fc4e 	bl	d6df4 <strdup>
   d5558:	9002      	str	r0, [sp, #8]
   d555a:	a902      	add	r1, sp, #8
   d555c:	4668      	mov	r0, sp
   d555e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5562:	f7ff fe1f 	bl	d51a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5566:	a802      	add	r0, sp, #8
   d5568:	f7ff fd52 	bl	d5010 <_ZN8particle5ErrorD1Ev>
   d556c:	e01d      	b.n	d55aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d556e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5570:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5574:	f04f 0201 	mov.w	r2, #1
   d5578:	e8d0 3f4f 	ldrexb	r3, [r0]
   d557c:	42a3      	cmp	r3, r4
   d557e:	d103      	bne.n	d5588 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5580:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5584:	2900      	cmp	r1, #0
   d5586:	d1f7      	bne.n	d5578 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5588:	d002      	beq.n	d5590 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d558a:	f88d 3008 	strb.w	r3, [sp, #8]
   d558e:	e00c      	b.n	d55aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5590:	f110 010c 	adds.w	r1, r0, #12
   d5594:	f04f 0301 	mov.w	r3, #1
   d5598:	bf18      	it	ne
   d559a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d559c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d55a0:	3004      	adds	r0, #4
   d55a2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d55a6:	f7ff ff71 	bl	d548c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d55aa:	a801      	add	r0, sp, #4
   d55ac:	f7fe ff52 	bl	d4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d55b0:	b005      	add	sp, #20
   d55b2:	bd30      	pop	{r4, r5, pc}

000d55b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d55b4:	4770      	bx	lr

000d55b6 <_ZN9IPAddressD0Ev>:
   d55b6:	b510      	push	{r4, lr}
   d55b8:	2118      	movs	r1, #24
   d55ba:	4604      	mov	r4, r0
   d55bc:	f000 fc7e 	bl	d5ebc <_ZdlPvj>
   d55c0:	4620      	mov	r0, r4
   d55c2:	bd10      	pop	{r4, pc}

000d55c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d55c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d55c6:	7d03      	ldrb	r3, [r0, #20]
   d55c8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d55ca:	b08d      	sub	sp, #52	; 0x34
   d55cc:	460e      	mov	r6, r1
   d55ce:	f100 0704 	add.w	r7, r0, #4
   d55d2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d55d6:	d002      	beq.n	d55de <_ZNK9IPAddress7printToER5Print+0x1a>
   d55d8:	f100 0508 	add.w	r5, r0, #8
   d55dc:	e018      	b.n	d5610 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d55de:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55e0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d55e2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55e6:	232f      	movs	r3, #47	; 0x2f
   d55e8:	462a      	mov	r2, r5
   d55ea:	200a      	movs	r0, #10
   d55ec:	f7ff f8b6 	bl	d475c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d55f0:	4628      	mov	r0, r5
   d55f2:	f001 fc1a 	bl	d6e2a <strlen>
   d55f6:	6833      	ldr	r3, [r6, #0]
   d55f8:	4602      	mov	r2, r0
   d55fa:	68db      	ldr	r3, [r3, #12]
   d55fc:	4629      	mov	r1, r5
   d55fe:	4630      	mov	r0, r6
   d5600:	4798      	blx	r3
   d5602:	e00f      	b.n	d5624 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5604:	b124      	cbz	r4, d5610 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5606:	212e      	movs	r1, #46	; 0x2e
   d5608:	4630      	mov	r0, r6
   d560a:	f7ff fba5 	bl	d4d58 <_ZN5Print5printEc>
   d560e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5610:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5614:	220a      	movs	r2, #10
   d5616:	4630      	mov	r0, r6
   d5618:	f7ff fbb7 	bl	d4d8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d561c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d561e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5620:	d1f0      	bne.n	d5604 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5622:	4620      	mov	r0, r4
    }
    return n;
}
   d5624:	b00d      	add	sp, #52	; 0x34
   d5626:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5628 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5628:	b510      	push	{r4, lr}
   d562a:	4b05      	ldr	r3, [pc, #20]	; (d5640 <_ZN9IPAddressC1Ev+0x18>)
   d562c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d562e:	2211      	movs	r2, #17
   d5630:	f840 3b04 	str.w	r3, [r0], #4
   d5634:	2100      	movs	r1, #0
   d5636:	f001 fba2 	bl	d6d7e <memset>
{
    clear();
}
   d563a:	4620      	mov	r0, r4
   d563c:	bd10      	pop	{r4, pc}
   d563e:	bf00      	nop
   d5640:	000d70ac 	.word	0x000d70ac

000d5644 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5644:	4603      	mov	r3, r0
   d5646:	4a07      	ldr	r2, [pc, #28]	; (d5664 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5648:	b510      	push	{r4, lr}
   d564a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d564e:	f101 0210 	add.w	r2, r1, #16
   d5652:	f851 4b04 	ldr.w	r4, [r1], #4
   d5656:	f843 4b04 	str.w	r4, [r3], #4
   d565a:	4291      	cmp	r1, r2
   d565c:	d1f9      	bne.n	d5652 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d565e:	780a      	ldrb	r2, [r1, #0]
   d5660:	701a      	strb	r2, [r3, #0]
}
   d5662:	bd10      	pop	{r4, pc}
   d5664:	000d70ac 	.word	0x000d70ac

000d5668 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5668:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d566a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d566e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5672:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5676:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d567a:	2304      	movs	r3, #4
   d567c:	6041      	str	r1, [r0, #4]
   d567e:	7503      	strb	r3, [r0, #20]
   d5680:	bd10      	pop	{r4, pc}

000d5682 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5682:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5684:	780d      	ldrb	r5, [r1, #0]
   d5686:	788b      	ldrb	r3, [r1, #2]
   d5688:	784a      	ldrb	r2, [r1, #1]
   d568a:	78c9      	ldrb	r1, [r1, #3]
   d568c:	9100      	str	r1, [sp, #0]
   d568e:	4629      	mov	r1, r5
   d5690:	f7ff ffea 	bl	d5668 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5694:	b003      	add	sp, #12
   d5696:	bd30      	pop	{r4, r5, pc}

000d5698 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5698:	7441      	strb	r1, [r0, #17]
   d569a:	4770      	bx	lr

000d569c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d569c:	4770      	bx	lr

000d569e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d569e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d56a0:	2100      	movs	r1, #0
   d56a2:	7c00      	ldrb	r0, [r0, #16]
   d56a4:	f7ff f91a 	bl	d48dc <HAL_USB_USART_Receive_Data>
}
   d56a8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56ac:	bf28      	it	cs
   d56ae:	f04f 30ff 	movcs.w	r0, #4294967295
   d56b2:	bd08      	pop	{r3, pc}

000d56b4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d56b4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d56b6:	2101      	movs	r1, #1
   d56b8:	7c00      	ldrb	r0, [r0, #16]
   d56ba:	f7ff f90f 	bl	d48dc <HAL_USB_USART_Receive_Data>
}
   d56be:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56c2:	bf28      	it	cs
   d56c4:	f04f 30ff 	movcs.w	r0, #4294967295
   d56c8:	bd08      	pop	{r3, pc}

000d56ca <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d56ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d56cc:	7c00      	ldrb	r0, [r0, #16]
   d56ce:	f7ff f8fd 	bl	d48cc <HAL_USB_USART_Available_Data_For_Write>
}
   d56d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56d6:	bd08      	pop	{r3, pc}

000d56d8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d56d8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d56da:	7c00      	ldrb	r0, [r0, #16]
   d56dc:	f7ff f8ee 	bl	d48bc <HAL_USB_USART_Available_Data>
}
   d56e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56e4:	bd08      	pop	{r3, pc}

000d56e6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d56e6:	7c00      	ldrb	r0, [r0, #16]
   d56e8:	f7ff b908 	b.w	d48fc <HAL_USB_USART_Flush_Data>

000d56ec <_ZN9USBSerialD0Ev>:
   d56ec:	b510      	push	{r4, lr}
   d56ee:	2114      	movs	r1, #20
   d56f0:	4604      	mov	r4, r0
   d56f2:	f000 fbe3 	bl	d5ebc <_ZdlPvj>
   d56f6:	4620      	mov	r0, r4
   d56f8:	bd10      	pop	{r4, pc}

000d56fa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d56fa:	b538      	push	{r3, r4, r5, lr}
   d56fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d56fe:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5700:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5702:	f7ff f8e3 	bl	d48cc <HAL_USB_USART_Available_Data_For_Write>
   d5706:	2800      	cmp	r0, #0
   d5708:	dc01      	bgt.n	d570e <_ZN9USBSerial5writeEh+0x14>
   d570a:	7c60      	ldrb	r0, [r4, #17]
   d570c:	b128      	cbz	r0, d571a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d570e:	4629      	mov	r1, r5
   d5710:	7c20      	ldrb	r0, [r4, #16]
   d5712:	f7ff f8eb 	bl	d48ec <HAL_USB_USART_Send_Data>
   d5716:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d571a:	bd38      	pop	{r3, r4, r5, pc}

000d571c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d571c:	b510      	push	{r4, lr}
   d571e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5720:	2300      	movs	r3, #0
   d5722:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5728:	60a3      	str	r3, [r4, #8]
   d572a:	4b05      	ldr	r3, [pc, #20]	; (d5740 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d572c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d572e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5730:	4608      	mov	r0, r1
{
  _serial = serial;
   d5732:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5734:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5736:	4611      	mov	r1, r2
   d5738:	f7ff f8b0 	bl	d489c <HAL_USB_USART_Init>
}
   d573c:	4620      	mov	r0, r4
   d573e:	bd10      	pop	{r4, pc}
   d5740:	000d70c0 	.word	0x000d70c0

000d5744 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5744:	2200      	movs	r2, #0
   d5746:	7c00      	ldrb	r0, [r0, #16]
   d5748:	f7ff b8b0 	b.w	d48ac <HAL_USB_USART_Begin>

000d574c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d574c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d574e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5750:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5752:	2100      	movs	r1, #0
   d5754:	f001 fb13 	bl	d6d7e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5758:	4620      	mov	r0, r4
   d575a:	bd10      	pop	{r4, pc}

000d575c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d575c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d575e:	4d0e      	ldr	r5, [pc, #56]	; (d5798 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5760:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5762:	a801      	add	r0, sp, #4
   d5764:	f7ff fff2 	bl	d574c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5768:	6829      	ldr	r1, [r5, #0]
   d576a:	f011 0401 	ands.w	r4, r1, #1
   d576e:	d110      	bne.n	d5792 <_Z16_fetch_usbserialv+0x36>
   d5770:	4628      	mov	r0, r5
   d5772:	f7fe fc98 	bl	d40a6 <__cxa_guard_acquire>
   d5776:	b160      	cbz	r0, d5792 <_Z16_fetch_usbserialv+0x36>
   d5778:	aa01      	add	r2, sp, #4
   d577a:	4621      	mov	r1, r4
   d577c:	4807      	ldr	r0, [pc, #28]	; (d579c <_Z16_fetch_usbserialv+0x40>)
   d577e:	f7ff ffcd 	bl	d571c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5782:	4628      	mov	r0, r5
   d5784:	f7fe fc94 	bl	d40b0 <__cxa_guard_release>
   d5788:	4a05      	ldr	r2, [pc, #20]	; (d57a0 <_Z16_fetch_usbserialv+0x44>)
   d578a:	4906      	ldr	r1, [pc, #24]	; (d57a4 <_Z16_fetch_usbserialv+0x48>)
   d578c:	4803      	ldr	r0, [pc, #12]	; (d579c <_Z16_fetch_usbserialv+0x40>)
   d578e:	f000 fb87 	bl	d5ea0 <__aeabi_atexit>
	return _usbserial;
}
   d5792:	4802      	ldr	r0, [pc, #8]	; (d579c <_Z16_fetch_usbserialv+0x40>)
   d5794:	b007      	add	sp, #28
   d5796:	bd30      	pop	{r4, r5, pc}
   d5798:	2003e3e0 	.word	0x2003e3e0
   d579c:	2003e3e4 	.word	0x2003e3e4
   d57a0:	2003e350 	.word	0x2003e350
   d57a4:	000d569d 	.word	0x000d569d

000d57a8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d57a8:	2200      	movs	r2, #0
   d57aa:	4611      	mov	r1, r2
   d57ac:	6840      	ldr	r0, [r0, #4]
   d57ae:	f7ff b8f9 	b.w	d49a4 <network_ready>

000d57b2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57b2:	2200      	movs	r2, #0
   d57b4:	4611      	mov	r1, r2
   d57b6:	6840      	ldr	r0, [r0, #4]
   d57b8:	f7ff b914 	b.w	d49e4 <network_listening>

000d57bc <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57bc:	2200      	movs	r2, #0
   d57be:	4611      	mov	r1, r2
   d57c0:	6840      	ldr	r0, [r0, #4]
   d57c2:	f7ff b91f 	b.w	d4a04 <network_get_listen_timeout>

000d57c6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d57c6:	2200      	movs	r2, #0
   d57c8:	6840      	ldr	r0, [r0, #4]
   d57ca:	f7ff b913 	b.w	d49f4 <network_set_listen_timeout>

000d57ce <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d57ce:	2200      	movs	r2, #0
   d57d0:	f081 0101 	eor.w	r1, r1, #1
   d57d4:	6840      	ldr	r0, [r0, #4]
   d57d6:	f7ff b8fd 	b.w	d49d4 <network_listen>

000d57da <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d57da:	2300      	movs	r3, #0
   d57dc:	461a      	mov	r2, r3
   d57de:	4619      	mov	r1, r3
   d57e0:	6840      	ldr	r0, [r0, #4]
   d57e2:	f7ff b8ef 	b.w	d49c4 <network_off>

000d57e6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d57e6:	2300      	movs	r3, #0
   d57e8:	461a      	mov	r2, r3
   d57ea:	4619      	mov	r1, r3
   d57ec:	6840      	ldr	r0, [r0, #4]
   d57ee:	f7ff b8e1 	b.w	d49b4 <network_on>

000d57f2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d57f2:	2200      	movs	r2, #0
   d57f4:	4611      	mov	r1, r2
   d57f6:	6840      	ldr	r0, [r0, #4]
   d57f8:	f7ff b8c4 	b.w	d4984 <network_connecting>

000d57fc <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d57fc:	2200      	movs	r2, #0
   d57fe:	2102      	movs	r1, #2
   d5800:	6840      	ldr	r0, [r0, #4]
   d5802:	f7ff b8c7 	b.w	d4994 <network_disconnect>

000d5806 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5806:	2300      	movs	r3, #0
   d5808:	461a      	mov	r2, r3
   d580a:	6840      	ldr	r0, [r0, #4]
   d580c:	f7ff b8b2 	b.w	d4974 <network_connect>

000d5810 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5810:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5812:	4c08      	ldr	r4, [pc, #32]	; (d5834 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5814:	2528      	movs	r5, #40	; 0x28
   d5816:	462a      	mov	r2, r5
   d5818:	2100      	movs	r1, #0
   d581a:	4620      	mov	r0, r4
   d581c:	f001 faaf 	bl	d6d7e <memset>
        cid = -1;
   d5820:	f04f 33ff 	mov.w	r3, #4294967295
   d5824:	6063      	str	r3, [r4, #4]
   d5826:	4b04      	ldr	r3, [pc, #16]	; (d5838 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5828:	8025      	strh	r5, [r4, #0]
   d582a:	2204      	movs	r2, #4
   d582c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d582e:	4a03      	ldr	r2, [pc, #12]	; (d583c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5830:	601a      	str	r2, [r3, #0]
   d5832:	bd38      	pop	{r3, r4, r5, pc}
   d5834:	2003e400 	.word	0x2003e400
   d5838:	2003e3f8 	.word	0x2003e3f8
   d583c:	000d70f0 	.word	0x000d70f0

000d5840 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5840:	4770      	bx	lr

000d5842 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5842:	7441      	strb	r1, [r0, #17]
   d5844:	4770      	bx	lr

000d5846 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5846:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5848:	7c00      	ldrb	r0, [r0, #16]
   d584a:	f7fe ffc7 	bl	d47dc <HAL_USART_Available_Data_For_Write>
}
   d584e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5852:	bd08      	pop	{r3, pc}

000d5854 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5854:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5856:	7c00      	ldrb	r0, [r0, #16]
   d5858:	f7fe ff98 	bl	d478c <HAL_USART_Available_Data>
}
   d585c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5860:	bd08      	pop	{r3, pc}

000d5862 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5862:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5864:	7c00      	ldrb	r0, [r0, #16]
   d5866:	f7fe ffa1 	bl	d47ac <HAL_USART_Peek_Data>
}
   d586a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d586e:	bf28      	it	cs
   d5870:	f04f 30ff 	movcs.w	r0, #4294967295
   d5874:	bd08      	pop	{r3, pc}

000d5876 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5876:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5878:	7c00      	ldrb	r0, [r0, #16]
   d587a:	f7fe ff8f 	bl	d479c <HAL_USART_Read_Data>
}
   d587e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5882:	bf28      	it	cs
   d5884:	f04f 30ff 	movcs.w	r0, #4294967295
   d5888:	bd08      	pop	{r3, pc}

000d588a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d588a:	7c00      	ldrb	r0, [r0, #16]
   d588c:	f7fe bf96 	b.w	d47bc <HAL_USART_Flush_Data>

000d5890 <_ZN11USARTSerialD0Ev>:
   d5890:	b510      	push	{r4, lr}
   d5892:	2114      	movs	r1, #20
   d5894:	4604      	mov	r4, r0
   d5896:	f000 fb11 	bl	d5ebc <_ZdlPvj>
   d589a:	4620      	mov	r0, r4
   d589c:	bd10      	pop	{r4, pc}

000d589e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d589e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d58a0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d58a2:	4604      	mov	r4, r0
   d58a4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d58a6:	b925      	cbnz	r5, d58b2 <_ZN11USARTSerial5writeEh+0x14>
   d58a8:	7c00      	ldrb	r0, [r0, #16]
   d58aa:	f7fe ff97 	bl	d47dc <HAL_USART_Available_Data_For_Write>
   d58ae:	2800      	cmp	r0, #0
   d58b0:	dd05      	ble.n	d58be <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d58b2:	4631      	mov	r1, r6
   d58b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d58b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d58ba:	f7fe bf5f 	b.w	d477c <HAL_USART_Write_Data>
  }
  return 0;
}
   d58be:	4628      	mov	r0, r5
   d58c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d58c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d58c4:	b510      	push	{r4, lr}
   d58c6:	4604      	mov	r4, r0
   d58c8:	4608      	mov	r0, r1
   d58ca:	4611      	mov	r1, r2
   d58cc:	2200      	movs	r2, #0
   d58ce:	6062      	str	r2, [r4, #4]
   d58d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d58d4:	60a2      	str	r2, [r4, #8]
   d58d6:	4a05      	ldr	r2, [pc, #20]	; (d58ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d58d8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d58da:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d58dc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d58de:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d58e0:	461a      	mov	r2, r3
   d58e2:	f7fe ff43 	bl	d476c <HAL_USART_Init>
}
   d58e6:	4620      	mov	r0, r4
   d58e8:	bd10      	pop	{r4, pc}
   d58ea:	bf00      	nop
   d58ec:	000d7124 	.word	0x000d7124

000d58f0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d58f0:	7c00      	ldrb	r0, [r0, #16]
   d58f2:	f7fe bf6b 	b.w	d47cc <HAL_USART_Is_Enabled>
	...

000d58f8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d58f8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d58fa:	4d0c      	ldr	r5, [pc, #48]	; (d592c <_Z22__fetch_global_Serial1v+0x34>)
   d58fc:	6829      	ldr	r1, [r5, #0]
   d58fe:	f011 0401 	ands.w	r4, r1, #1
   d5902:	d111      	bne.n	d5928 <_Z22__fetch_global_Serial1v+0x30>
   d5904:	4628      	mov	r0, r5
   d5906:	f7fe fbce 	bl	d40a6 <__cxa_guard_acquire>
   d590a:	b168      	cbz	r0, d5928 <_Z22__fetch_global_Serial1v+0x30>
   d590c:	4a08      	ldr	r2, [pc, #32]	; (d5930 <_Z22__fetch_global_Serial1v+0x38>)
   d590e:	4b09      	ldr	r3, [pc, #36]	; (d5934 <_Z22__fetch_global_Serial1v+0x3c>)
   d5910:	4809      	ldr	r0, [pc, #36]	; (d5938 <_Z22__fetch_global_Serial1v+0x40>)
   d5912:	4621      	mov	r1, r4
   d5914:	f7ff ffd6 	bl	d58c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5918:	4628      	mov	r0, r5
   d591a:	f7fe fbc9 	bl	d40b0 <__cxa_guard_release>
   d591e:	4a07      	ldr	r2, [pc, #28]	; (d593c <_Z22__fetch_global_Serial1v+0x44>)
   d5920:	4907      	ldr	r1, [pc, #28]	; (d5940 <_Z22__fetch_global_Serial1v+0x48>)
   d5922:	4805      	ldr	r0, [pc, #20]	; (d5938 <_Z22__fetch_global_Serial1v+0x40>)
   d5924:	f000 fabc 	bl	d5ea0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5928:	4803      	ldr	r0, [pc, #12]	; (d5938 <_Z22__fetch_global_Serial1v+0x40>)
   d592a:	bd38      	pop	{r3, r4, r5, pc}
   d592c:	2003e4c0 	.word	0x2003e4c0
   d5930:	2003e4c4 	.word	0x2003e4c4
   d5934:	2003e43c 	.word	0x2003e43c
   d5938:	2003e428 	.word	0x2003e428
   d593c:	2003e350 	.word	0x2003e350
   d5940:	000d5841 	.word	0x000d5841

000d5944 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5944:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5946:	6883      	ldr	r3, [r0, #8]
   d5948:	4604      	mov	r4, r0
   d594a:	b90b      	cbnz	r3, d5950 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d594c:	f000 fac9 	bl	d5ee2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5950:	68c3      	ldr	r3, [r0, #12]
   d5952:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5954:	68a3      	ldr	r3, [r4, #8]
   d5956:	b11b      	cbz	r3, d5960 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5958:	2203      	movs	r2, #3
   d595a:	4621      	mov	r1, r4
   d595c:	4620      	mov	r0, r4
   d595e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5960:	4620      	mov	r0, r4
   d5962:	2110      	movs	r1, #16
}
   d5964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5968:	f000 baa8 	b.w	d5ebc <_ZdlPvj>

000d596c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d596c:	4770      	bx	lr

000d596e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d596e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5970:	4606      	mov	r6, r0
   d5972:	4615      	mov	r5, r2
   d5974:	460c      	mov	r4, r1
   d5976:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5978:	42bc      	cmp	r4, r7
   d597a:	d006      	beq.n	d598a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d597c:	6833      	ldr	r3, [r6, #0]
   d597e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5982:	689b      	ldr	r3, [r3, #8]
   d5984:	4630      	mov	r0, r6
   d5986:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5988:	e7f6      	b.n	d5978 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d598a:	4628      	mov	r0, r5
   d598c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d598e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d598e:	2200      	movs	r2, #0
   d5990:	7c00      	ldrb	r0, [r0, #16]
   d5992:	f7fe bf43 	b.w	d481c <HAL_I2C_Write_Data>

000d5996 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5996:	2100      	movs	r1, #0
   d5998:	7c00      	ldrb	r0, [r0, #16]
   d599a:	f7fe bf47 	b.w	d482c <HAL_I2C_Available_Data>

000d599e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d599e:	2100      	movs	r1, #0
   d59a0:	7c00      	ldrb	r0, [r0, #16]
   d59a2:	f7fe bf4b 	b.w	d483c <HAL_I2C_Read_Data>

000d59a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d59a6:	2100      	movs	r1, #0
   d59a8:	7c00      	ldrb	r0, [r0, #16]
   d59aa:	f7fe bf4f 	b.w	d484c <HAL_I2C_Peek_Data>

000d59ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d59ae:	2100      	movs	r1, #0
   d59b0:	7c00      	ldrb	r0, [r0, #16]
   d59b2:	f7fe bf53 	b.w	d485c <HAL_I2C_Flush_Data>

000d59b6 <_ZN7TwoWireD0Ev>:
   d59b6:	b510      	push	{r4, lr}
   d59b8:	2114      	movs	r1, #20
   d59ba:	4604      	mov	r4, r0
   d59bc:	f000 fa7e 	bl	d5ebc <_ZdlPvj>
   d59c0:	4620      	mov	r0, r4
   d59c2:	bd10      	pop	{r4, pc}

000d59c4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d59c4:	b510      	push	{r4, lr}
   d59c6:	4604      	mov	r4, r0
   d59c8:	2300      	movs	r3, #0
   d59ca:	6063      	str	r3, [r4, #4]
   d59cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d59d0:	60a3      	str	r3, [r4, #8]
   d59d2:	4b04      	ldr	r3, [pc, #16]	; (d59e4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d59d4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d59d6:	4608      	mov	r0, r1
   d59d8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d59da:	4611      	mov	r1, r2
   d59dc:	f7fe ff4e 	bl	d487c <HAL_I2C_Init>
}
   d59e0:	4620      	mov	r0, r4
   d59e2:	bd10      	pop	{r4, pc}
   d59e4:	000d7154 	.word	0x000d7154

000d59e8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d59e8:	2300      	movs	r3, #0
   d59ea:	461a      	mov	r2, r3
   d59ec:	4619      	mov	r1, r3
   d59ee:	7c00      	ldrb	r0, [r0, #16]
   d59f0:	f7fe befc 	b.w	d47ec <HAL_I2C_Begin>

000d59f4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d59f4:	b570      	push	{r4, r5, r6, lr}
   d59f6:	460c      	mov	r4, r1
   d59f8:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d59fa:	2514      	movs	r5, #20
   d59fc:	4606      	mov	r6, r0
   d59fe:	462a      	mov	r2, r5
   d5a00:	2100      	movs	r1, #0
   d5a02:	a801      	add	r0, sp, #4
   d5a04:	f001 f9bb 	bl	d6d7e <memset>
   d5a08:	7823      	ldrb	r3, [r4, #0]
   d5a0a:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a0e:	6863      	ldr	r3, [r4, #4]
   d5a10:	9303      	str	r3, [sp, #12]
   d5a12:	68e3      	ldr	r3, [r4, #12]
   d5a14:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5a16:	2200      	movs	r2, #0
   d5a18:	7a23      	ldrb	r3, [r4, #8]
   d5a1a:	7c30      	ldrb	r0, [r6, #16]
   d5a1c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5a20:	a901      	add	r1, sp, #4
   d5a22:	9305      	str	r3, [sp, #20]
   d5a24:	f7fe ff32 	bl	d488c <HAL_I2C_Request_Data_Ex>
}
   d5a28:	b006      	add	sp, #24
   d5a2a:	bd70      	pop	{r4, r5, r6, pc}

000d5a2c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5a2e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5a30:	f88d 1000 	strb.w	r1, [sp]
   d5a34:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5a38:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5a3a:	bf18      	it	ne
   d5a3c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5a3e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5a40:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5a42:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a46:	f7ff ffd5 	bl	d59f4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5a4a:	b005      	add	sp, #20
   d5a4c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a50 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5a50:	2200      	movs	r2, #0
   d5a52:	7c00      	ldrb	r0, [r0, #16]
   d5a54:	f7fe bed2 	b.w	d47fc <HAL_I2C_Begin_Transmission>

000d5a58 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5a58:	b2c9      	uxtb	r1, r1
   d5a5a:	f7ff bff9 	b.w	d5a50 <_ZN7TwoWire17beginTransmissionEh>

000d5a5e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5a5e:	2200      	movs	r2, #0
   d5a60:	7c00      	ldrb	r0, [r0, #16]
   d5a62:	f7fe bed3 	b.w	d480c <HAL_I2C_End_Transmission>

000d5a66 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5a66:	2100      	movs	r1, #0
   d5a68:	7c00      	ldrb	r0, [r0, #16]
   d5a6a:	f7fe beff 	b.w	d486c <HAL_I2C_Is_Enabled>

000d5a6e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a6e:	2200      	movs	r2, #0
   d5a70:	4611      	mov	r1, r2
   d5a72:	6840      	ldr	r0, [r0, #4]
   d5a74:	f7fe bfb6 	b.w	d49e4 <network_listening>

000d5a78 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a78:	2200      	movs	r2, #0
   d5a7a:	4611      	mov	r1, r2
   d5a7c:	6840      	ldr	r0, [r0, #4]
   d5a7e:	f7fe bfc1 	b.w	d4a04 <network_get_listen_timeout>

000d5a82 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a82:	2200      	movs	r2, #0
   d5a84:	6840      	ldr	r0, [r0, #4]
   d5a86:	f7fe bfb5 	b.w	d49f4 <network_set_listen_timeout>

000d5a8a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a8a:	2200      	movs	r2, #0
   d5a8c:	f081 0101 	eor.w	r1, r1, #1
   d5a90:	6840      	ldr	r0, [r0, #4]
   d5a92:	f7fe bf9f 	b.w	d49d4 <network_listen>

000d5a96 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5a96:	2300      	movs	r3, #0
   d5a98:	461a      	mov	r2, r3
   d5a9a:	2101      	movs	r1, #1
   d5a9c:	6840      	ldr	r0, [r0, #4]
   d5a9e:	f7fe bf91 	b.w	d49c4 <network_off>

000d5aa2 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5aa2:	2300      	movs	r3, #0
   d5aa4:	461a      	mov	r2, r3
   d5aa6:	4619      	mov	r1, r3
   d5aa8:	6840      	ldr	r0, [r0, #4]
   d5aaa:	f7fe bf83 	b.w	d49b4 <network_on>

000d5aae <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5aae:	2200      	movs	r2, #0
   d5ab0:	4611      	mov	r1, r2
   d5ab2:	6840      	ldr	r0, [r0, #4]
   d5ab4:	f7fe bf76 	b.w	d49a4 <network_ready>

000d5ab8 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ab8:	2200      	movs	r2, #0
   d5aba:	4611      	mov	r1, r2
   d5abc:	6840      	ldr	r0, [r0, #4]
   d5abe:	f7fe bf61 	b.w	d4984 <network_connecting>

000d5ac2 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ac2:	2200      	movs	r2, #0
   d5ac4:	2102      	movs	r1, #2
   d5ac6:	6840      	ldr	r0, [r0, #4]
   d5ac8:	f7fe bf64 	b.w	d4994 <network_disconnect>

000d5acc <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5acc:	2300      	movs	r3, #0
   d5ace:	461a      	mov	r2, r3
   d5ad0:	6840      	ldr	r0, [r0, #4]
   d5ad2:	f7fe bf4f 	b.w	d4974 <network_connect>

000d5ad6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5ad6:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5ad8:	4605      	mov	r5, r0
   d5ada:	b188      	cbz	r0, d5b00 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5adc:	6804      	ldr	r4, [r0, #0]
   d5ade:	b14c      	cbz	r4, d5af4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5ae0:	68a3      	ldr	r3, [r4, #8]
   d5ae2:	b11b      	cbz	r3, d5aec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5ae4:	2203      	movs	r2, #3
   d5ae6:	4621      	mov	r1, r4
   d5ae8:	4620      	mov	r0, r4
   d5aea:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5aec:	2110      	movs	r1, #16
   d5aee:	4620      	mov	r0, r4
   d5af0:	f000 f9e4 	bl	d5ebc <_ZdlPvj>
   d5af4:	4628      	mov	r0, r5
   d5af6:	2114      	movs	r1, #20
      }
   d5af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5afc:	f000 b9de 	b.w	d5ebc <_ZdlPvj>
   d5b00:	bd38      	pop	{r3, r4, r5, pc}

000d5b02 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5b02:	b110      	cbz	r0, d5b0a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5b04:	6803      	ldr	r3, [r0, #0]
   d5b06:	685b      	ldr	r3, [r3, #4]
   d5b08:	4718      	bx	r3
   d5b0a:	4770      	bx	lr

000d5b0c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5b0c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5b0e:	6803      	ldr	r3, [r0, #0]
   d5b10:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5b12:	b1bb      	cbz	r3, d5b44 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5b14:	6858      	ldr	r0, [r3, #4]
   d5b16:	f7fe fdf9 	bl	d470c <os_thread_is_current>
   d5b1a:	b978      	cbnz	r0, d5b3c <_ZN6ThreadD1Ev+0x30>
   d5b1c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5b1e:	7c5a      	ldrb	r2, [r3, #17]
   d5b20:	b912      	cbnz	r2, d5b28 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5b22:	6858      	ldr	r0, [r3, #4]
   d5b24:	f7fe fdfa 	bl	d471c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5b28:	6823      	ldr	r3, [r4, #0]
   d5b2a:	6858      	ldr	r0, [r3, #4]
   d5b2c:	f7fe fdfe 	bl	d472c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b30:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5b32:	2300      	movs	r3, #0
   d5b34:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5b36:	b128      	cbz	r0, d5b44 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5b38:	f7ff ffcd 	bl	d5ad6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b3c:	6820      	ldr	r0, [r4, #0]
   d5b3e:	b108      	cbz	r0, d5b44 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5b40:	f7ff ffc9 	bl	d5ad6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5b44:	4620      	mov	r0, r4
   d5b46:	bd10      	pop	{r4, pc}

000d5b48 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5b48:	b538      	push	{r3, r4, r5, lr}
   d5b4a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b4c:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5b50:	b108      	cbz	r0, d5b56 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5b52:	f7fe faa6 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5b56:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5b5a:	b108      	cbz	r0, d5b60 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5b5c:	f7fe fdf6 	bl	d474c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b60:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5b64:	b135      	cbz	r5, d5b74 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b66:	4628      	mov	r0, r5
   d5b68:	f7ff ffd0 	bl	d5b0c <_ZN6ThreadD1Ev>
   d5b6c:	2104      	movs	r1, #4
   d5b6e:	4628      	mov	r0, r5
   d5b70:	f000 f9a4 	bl	d5ebc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b74:	6820      	ldr	r0, [r4, #0]
   d5b76:	b108      	cbz	r0, d5b7c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5b78:	f7ff ffc3 	bl	d5b02 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5b7c:	4620      	mov	r0, r4
   d5b7e:	bd38      	pop	{r3, r4, r5, pc}

000d5b80 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5b80:	b510      	push	{r4, lr}
   d5b82:	4b04      	ldr	r3, [pc, #16]	; (d5b94 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5b84:	4604      	mov	r4, r0
   d5b86:	f840 3b08 	str.w	r3, [r0], #8
   d5b8a:	f7ff ffdd 	bl	d5b48 <_ZN5spark11MeshPublishD1Ev>
   d5b8e:	4620      	mov	r0, r4
   d5b90:	bd10      	pop	{r4, pc}
   d5b92:	bf00      	nop
   d5b94:	000d717c 	.word	0x000d717c

000d5b98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5b98:	b538      	push	{r3, r4, r5, lr}
   d5b9a:	4c0e      	ldr	r4, [pc, #56]	; (d5bd4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5b9c:	4b0e      	ldr	r3, [pc, #56]	; (d5bd8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5b9e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5ba0:	2500      	movs	r5, #0
   d5ba2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5ba4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5ba8:	6063      	str	r3, [r4, #4]
   d5baa:	60a5      	str	r5, [r4, #8]
   d5bac:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5bb0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5bb4:	f7fe fdc2 	bl	d473c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5bb8:	4b08      	ldr	r3, [pc, #32]	; (d5bdc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5bba:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5bbe:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5bc2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5bc4:	4620      	mov	r0, r4
   d5bc6:	4a06      	ldr	r2, [pc, #24]	; (d5be0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5bc8:	4906      	ldr	r1, [pc, #24]	; (d5be4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5bce:	f000 b967 	b.w	d5ea0 <__aeabi_atexit>
   d5bd2:	bf00      	nop
   d5bd4:	2003e548 	.word	0x2003e548
   d5bd8:	000d71b0 	.word	0x000d71b0
   d5bdc:	000d717c 	.word	0x000d717c
   d5be0:	2003e350 	.word	0x2003e350
   d5be4:	000d5b81 	.word	0x000d5b81

000d5be8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5be8:	2300      	movs	r3, #0
   d5bea:	461a      	mov	r2, r3
   d5bec:	6840      	ldr	r0, [r0, #4]
   d5bee:	f7fe bec1 	b.w	d4974 <network_connect>

000d5bf2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5bf2:	2200      	movs	r2, #0
   d5bf4:	2102      	movs	r1, #2
   d5bf6:	6840      	ldr	r0, [r0, #4]
   d5bf8:	f7fe becc 	b.w	d4994 <network_disconnect>

000d5bfc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5bfc:	2200      	movs	r2, #0
   d5bfe:	4611      	mov	r1, r2
   d5c00:	6840      	ldr	r0, [r0, #4]
   d5c02:	f7fe bebf 	b.w	d4984 <network_connecting>

000d5c06 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5c06:	2200      	movs	r2, #0
   d5c08:	4611      	mov	r1, r2
   d5c0a:	6840      	ldr	r0, [r0, #4]
   d5c0c:	f7fe beca 	b.w	d49a4 <network_ready>

000d5c10 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5c10:	2300      	movs	r3, #0
   d5c12:	461a      	mov	r2, r3
   d5c14:	4619      	mov	r1, r3
   d5c16:	6840      	ldr	r0, [r0, #4]
   d5c18:	f7fe becc 	b.w	d49b4 <network_on>

000d5c1c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5c1c:	2300      	movs	r3, #0
   d5c1e:	461a      	mov	r2, r3
   d5c20:	4619      	mov	r1, r3
   d5c22:	6840      	ldr	r0, [r0, #4]
   d5c24:	f7fe bece 	b.w	d49c4 <network_off>

000d5c28 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5c28:	2200      	movs	r2, #0
   d5c2a:	f081 0101 	eor.w	r1, r1, #1
   d5c2e:	6840      	ldr	r0, [r0, #4]
   d5c30:	f7fe bed0 	b.w	d49d4 <network_listen>

000d5c34 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5c34:	2200      	movs	r2, #0
   d5c36:	6840      	ldr	r0, [r0, #4]
   d5c38:	f7fe bedc 	b.w	d49f4 <network_set_listen_timeout>

000d5c3c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5c3c:	2200      	movs	r2, #0
   d5c3e:	4611      	mov	r1, r2
   d5c40:	6840      	ldr	r0, [r0, #4]
   d5c42:	f7fe bedf 	b.w	d4a04 <network_get_listen_timeout>

000d5c46 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5c46:	2200      	movs	r2, #0
   d5c48:	4611      	mov	r1, r2
   d5c4a:	6840      	ldr	r0, [r0, #4]
   d5c4c:	f7fe beca 	b.w	d49e4 <network_listening>

000d5c50 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5c54:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5c56:	b095      	sub	sp, #84	; 0x54
   d5c58:	4616      	mov	r6, r2
   d5c5a:	460d      	mov	r5, r1
   d5c5c:	4607      	mov	r7, r0
    IPAddress addr;
   d5c5e:	f7ff fce3 	bl	d5628 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5c62:	4621      	mov	r1, r4
   d5c64:	2220      	movs	r2, #32
   d5c66:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5c68:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5c6a:	f001 f888 	bl	d6d7e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5c6e:	2340      	movs	r3, #64	; 0x40
   d5c70:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5c72:	4621      	mov	r1, r4
   d5c74:	466b      	mov	r3, sp
   d5c76:	aa0c      	add	r2, sp, #48	; 0x30
   d5c78:	4630      	mov	r0, r6
   d5c7a:	f7fe fcef 	bl	d465c <netdb_getaddrinfo>
    if (!r) {
   d5c7e:	4604      	mov	r4, r0
   d5c80:	2800      	cmp	r0, #0
   d5c82:	d144      	bne.n	d5d0e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c84:	4602      	mov	r2, r0
   d5c86:	2101      	movs	r1, #1
   d5c88:	6868      	ldr	r0, [r5, #4]
   d5c8a:	f7fe fe8b 	bl	d49a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c8e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c90:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c92:	4622      	mov	r2, r4
   d5c94:	6868      	ldr	r0, [r5, #4]
   d5c96:	f7fe fe85 	bl	d49a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c9a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c9c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5c9e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ca0:	2e00      	cmp	r6, #0
   d5ca2:	d034      	beq.n	d5d0e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5ca4:	2900      	cmp	r1, #0
   d5ca6:	d132      	bne.n	d5d0e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5ca8:	6873      	ldr	r3, [r6, #4]
   d5caa:	2b02      	cmp	r3, #2
   d5cac:	d002      	beq.n	d5cb4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5cae:	2b0a      	cmp	r3, #10
   d5cb0:	d009      	beq.n	d5cc6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5cb2:	e02a      	b.n	d5d0a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5cb4:	f1b8 0f00 	cmp.w	r8, #0
   d5cb8:	d027      	beq.n	d5d0a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5cba:	6971      	ldr	r1, [r6, #20]
   d5cbc:	4638      	mov	r0, r7
   d5cbe:	3104      	adds	r1, #4
   d5cc0:	f7ff fcdf 	bl	d5682 <_ZN9IPAddressaSEPKh>
   d5cc4:	e020      	b.n	d5d08 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5cc6:	f1b9 0f00 	cmp.w	r9, #0
   d5cca:	d01e      	beq.n	d5d0a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5ccc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5cce:	2211      	movs	r2, #17
   d5cd0:	a801      	add	r0, sp, #4
   d5cd2:	f001 f854 	bl	d6d7e <memset>
                    a.v = 6;
   d5cd6:	2306      	movs	r3, #6
   d5cd8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5cdc:	ad01      	add	r5, sp, #4
   d5cde:	f104 0308 	add.w	r3, r4, #8
   d5ce2:	3418      	adds	r4, #24
   d5ce4:	6818      	ldr	r0, [r3, #0]
   d5ce6:	6859      	ldr	r1, [r3, #4]
   d5ce8:	462a      	mov	r2, r5
   d5cea:	c203      	stmia	r2!, {r0, r1}
   d5cec:	3308      	adds	r3, #8
   d5cee:	42a3      	cmp	r3, r4
   d5cf0:	4615      	mov	r5, r2
   d5cf2:	d1f7      	bne.n	d5ce4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5cf4:	a901      	add	r1, sp, #4
   d5cf6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5cf8:	ad07      	add	r5, sp, #28
   d5cfa:	f7ff fca3 	bl	d5644 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d00:	1d3c      	adds	r4, r7, #4
   d5d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d04:	682b      	ldr	r3, [r5, #0]
   d5d06:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5d08:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d0a:	69f6      	ldr	r6, [r6, #28]
   d5d0c:	e7c8      	b.n	d5ca0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5d0e:	9800      	ldr	r0, [sp, #0]
   d5d10:	f7fe fc9c 	bl	d464c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5d14:	4638      	mov	r0, r7
   d5d16:	b015      	add	sp, #84	; 0x54
   d5d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5d1c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5d1c:	4b02      	ldr	r3, [pc, #8]	; (d5d28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5d1e:	4a03      	ldr	r2, [pc, #12]	; (d5d2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5d20:	601a      	str	r2, [r3, #0]
   d5d22:	2200      	movs	r2, #0
   d5d24:	605a      	str	r2, [r3, #4]
   d5d26:	4770      	bx	lr
   d5d28:	2003e71c 	.word	0x2003e71c
   d5d2c:	000d71b0 	.word	0x000d71b0

000d5d30 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5d30:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5d32:	4e18      	ldr	r6, [pc, #96]	; (d5d94 <pinAvailable+0x64>)
   d5d34:	6831      	ldr	r1, [r6, #0]
   d5d36:	f011 0501 	ands.w	r5, r1, #1
   d5d3a:	4604      	mov	r4, r0
   d5d3c:	d10a      	bne.n	d5d54 <pinAvailable+0x24>
   d5d3e:	4630      	mov	r0, r6
   d5d40:	f7fe f9b1 	bl	d40a6 <__cxa_guard_acquire>
   d5d44:	b130      	cbz	r0, d5d54 <pinAvailable+0x24>
   d5d46:	4629      	mov	r1, r5
   d5d48:	4813      	ldr	r0, [pc, #76]	; (d5d98 <pinAvailable+0x68>)
   d5d4a:	f7fe ff09 	bl	d4b60 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5d4e:	4630      	mov	r0, r6
   d5d50:	f7fe f9ae 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5d54:	4810      	ldr	r0, [pc, #64]	; (d5d98 <pinAvailable+0x68>)
   d5d56:	f7fe ff0d 	bl	d4b74 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5d5a:	b128      	cbz	r0, d5d68 <pinAvailable+0x38>
   d5d5c:	f1a4 030b 	sub.w	r3, r4, #11
   d5d60:	2b02      	cmp	r3, #2
   d5d62:	d801      	bhi.n	d5d68 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5d64:	2000      	movs	r0, #0
   d5d66:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5d68:	f000 f874 	bl	d5e54 <_Z19__fetch_global_Wirev>
   d5d6c:	f7ff fe7b 	bl	d5a66 <_ZN7TwoWire9isEnabledEv>
   d5d70:	b108      	cbz	r0, d5d76 <pinAvailable+0x46>
   d5d72:	2c01      	cmp	r4, #1
   d5d74:	d9f6      	bls.n	d5d64 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5d76:	f7ff fdbf 	bl	d58f8 <_Z22__fetch_global_Serial1v>
   d5d7a:	f7ff fdb9 	bl	d58f0 <_ZN11USARTSerial9isEnabledEv>
   d5d7e:	b118      	cbz	r0, d5d88 <pinAvailable+0x58>
   d5d80:	f1a4 0309 	sub.w	r3, r4, #9
   d5d84:	2b01      	cmp	r3, #1
   d5d86:	d9ed      	bls.n	d5d64 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5d88:	2c23      	cmp	r4, #35	; 0x23
   d5d8a:	bf8c      	ite	hi
   d5d8c:	2000      	movhi	r0, #0
   d5d8e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5d90:	bd70      	pop	{r4, r5, r6, pc}
   d5d92:	bf00      	nop
   d5d94:	2003e724 	.word	0x2003e724
   d5d98:	2003e728 	.word	0x2003e728

000d5d9c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5d9c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5d9e:	b538      	push	{r3, r4, r5, lr}
   d5da0:	4604      	mov	r4, r0
   d5da2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5da4:	d80a      	bhi.n	d5dbc <pinMode+0x20>
   d5da6:	29ff      	cmp	r1, #255	; 0xff
   d5da8:	d008      	beq.n	d5dbc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5daa:	f7ff ffc1 	bl	d5d30 <pinAvailable>
   d5dae:	b128      	cbz	r0, d5dbc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5db0:	4629      	mov	r1, r5
   d5db2:	4620      	mov	r0, r4
}
   d5db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5db8:	f7fe bc68 	b.w	d468c <HAL_Pin_Mode>
   d5dbc:	bd38      	pop	{r3, r4, r5, pc}

000d5dbe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5dbe:	b538      	push	{r3, r4, r5, lr}
   d5dc0:	4604      	mov	r4, r0
   d5dc2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5dc4:	f7fe fc6a 	bl	d469c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5dc8:	28ff      	cmp	r0, #255	; 0xff
   d5dca:	d010      	beq.n	d5dee <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5dcc:	2806      	cmp	r0, #6
   d5dce:	d804      	bhi.n	d5dda <digitalWrite+0x1c>
   d5dd0:	234d      	movs	r3, #77	; 0x4d
   d5dd2:	fa23 f000 	lsr.w	r0, r3, r0
   d5dd6:	07c3      	lsls	r3, r0, #31
   d5dd8:	d409      	bmi.n	d5dee <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5dda:	4620      	mov	r0, r4
   d5ddc:	f7ff ffa8 	bl	d5d30 <pinAvailable>
   d5de0:	b128      	cbz	r0, d5dee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5de2:	4629      	mov	r1, r5
   d5de4:	4620      	mov	r0, r4
}
   d5de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5dea:	f7fe bc5f 	b.w	d46ac <HAL_GPIO_Write>
   d5dee:	bd38      	pop	{r3, r4, r5, pc}

000d5df0 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5df0:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5df2:	b510      	push	{r4, lr}
   d5df4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5df6:	bf9c      	itt	ls
   d5df8:	340e      	addls	r4, #14
   d5dfa:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5dfc:	4620      	mov	r0, r4
   d5dfe:	f7ff ff97 	bl	d5d30 <pinAvailable>
   d5e02:	b150      	cbz	r0, d5e1a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5e04:	2103      	movs	r1, #3
   d5e06:	4620      	mov	r0, r4
   d5e08:	f7fe fc38 	bl	d467c <HAL_Validate_Pin_Function>
   d5e0c:	2803      	cmp	r0, #3
   d5e0e:	d104      	bne.n	d5e1a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5e10:	4620      	mov	r0, r4
}
   d5e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5e16:	f7fe bc51 	b.w	d46bc <HAL_ADC_Read>
}
   d5e1a:	2000      	movs	r0, #0
   d5e1c:	bd10      	pop	{r4, pc}
	...

000d5e20 <_Z17acquireWireBufferv>:
   d5e20:	b570      	push	{r4, r5, r6, lr}
   d5e22:	4604      	mov	r4, r0
   d5e24:	2514      	movs	r5, #20
   d5e26:	462a      	mov	r2, r5
   d5e28:	4e09      	ldr	r6, [pc, #36]	; (d5e50 <_Z17acquireWireBufferv+0x30>)
   d5e2a:	2100      	movs	r1, #0
   d5e2c:	f000 ffa7 	bl	d6d7e <memset>
   d5e30:	8025      	strh	r5, [r4, #0]
   d5e32:	2520      	movs	r5, #32
   d5e34:	4631      	mov	r1, r6
   d5e36:	60a5      	str	r5, [r4, #8]
   d5e38:	6125      	str	r5, [r4, #16]
   d5e3a:	4628      	mov	r0, r5
   d5e3c:	f000 f840 	bl	d5ec0 <_ZnajRKSt9nothrow_t>
   d5e40:	4631      	mov	r1, r6
   d5e42:	6060      	str	r0, [r4, #4]
   d5e44:	4628      	mov	r0, r5
   d5e46:	f000 f83b 	bl	d5ec0 <_ZnajRKSt9nothrow_t>
   d5e4a:	60e0      	str	r0, [r4, #12]
   d5e4c:	4620      	mov	r0, r4
   d5e4e:	bd70      	pop	{r4, r5, r6, pc}
   d5e50:	000d71dc 	.word	0x000d71dc

000d5e54 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5e54:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5e56:	4d0e      	ldr	r5, [pc, #56]	; (d5e90 <_Z19__fetch_global_Wirev+0x3c>)
   d5e58:	6829      	ldr	r1, [r5, #0]
   d5e5a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5e5e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5e60:	d113      	bne.n	d5e8a <_Z19__fetch_global_Wirev+0x36>
   d5e62:	4628      	mov	r0, r5
   d5e64:	f7fe f91f 	bl	d40a6 <__cxa_guard_acquire>
   d5e68:	b178      	cbz	r0, d5e8a <_Z19__fetch_global_Wirev+0x36>
   d5e6a:	a801      	add	r0, sp, #4
   d5e6c:	f7ff ffd8 	bl	d5e20 <_Z17acquireWireBufferv>
   d5e70:	aa01      	add	r2, sp, #4
   d5e72:	4621      	mov	r1, r4
   d5e74:	4807      	ldr	r0, [pc, #28]	; (d5e94 <_Z19__fetch_global_Wirev+0x40>)
   d5e76:	f7ff fda5 	bl	d59c4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5e7a:	4628      	mov	r0, r5
   d5e7c:	f7fe f918 	bl	d40b0 <__cxa_guard_release>
   d5e80:	4a05      	ldr	r2, [pc, #20]	; (d5e98 <_Z19__fetch_global_Wirev+0x44>)
   d5e82:	4906      	ldr	r1, [pc, #24]	; (d5e9c <_Z19__fetch_global_Wirev+0x48>)
   d5e84:	4803      	ldr	r0, [pc, #12]	; (d5e94 <_Z19__fetch_global_Wirev+0x40>)
   d5e86:	f000 f80b 	bl	d5ea0 <__aeabi_atexit>
	return wire;
}
   d5e8a:	4802      	ldr	r0, [pc, #8]	; (d5e94 <_Z19__fetch_global_Wirev+0x40>)
   d5e8c:	b007      	add	sp, #28
   d5e8e:	bd30      	pop	{r4, r5, pc}
   d5e90:	2003e734 	.word	0x2003e734
   d5e94:	2003e738 	.word	0x2003e738
   d5e98:	2003e350 	.word	0x2003e350
   d5e9c:	000d596d 	.word	0x000d596d

000d5ea0 <__aeabi_atexit>:
   d5ea0:	460b      	mov	r3, r1
   d5ea2:	4601      	mov	r1, r0
   d5ea4:	4618      	mov	r0, r3
   d5ea6:	f000 bf51 	b.w	d6d4c <__cxa_atexit>
	...

000d5eac <_ZSt15get_new_handlerv>:
   d5eac:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <_ZSt15get_new_handlerv+0xc>)
   d5eae:	6818      	ldr	r0, [r3, #0]
   d5eb0:	f3bf 8f5f 	dmb	sy
   d5eb4:	4770      	bx	lr
   d5eb6:	bf00      	nop
   d5eb8:	2003e74c 	.word	0x2003e74c

000d5ebc <_ZdlPvj>:
   d5ebc:	f7fe b8ef 	b.w	d409e <_ZdlPv>

000d5ec0 <_ZnajRKSt9nothrow_t>:
   d5ec0:	f000 b800 	b.w	d5ec4 <_ZnwjRKSt9nothrow_t>

000d5ec4 <_ZnwjRKSt9nothrow_t>:
   d5ec4:	b510      	push	{r4, lr}
   d5ec6:	2800      	cmp	r0, #0
   d5ec8:	bf14      	ite	ne
   d5eca:	4604      	movne	r4, r0
   d5ecc:	2401      	moveq	r4, #1
   d5ece:	4620      	mov	r0, r4
   d5ed0:	f7fe fdc8 	bl	d4a64 <malloc>
   d5ed4:	b920      	cbnz	r0, d5ee0 <_ZnwjRKSt9nothrow_t+0x1c>
   d5ed6:	f7ff ffe9 	bl	d5eac <_ZSt15get_new_handlerv>
   d5eda:	b108      	cbz	r0, d5ee0 <_ZnwjRKSt9nothrow_t+0x1c>
   d5edc:	4780      	blx	r0
   d5ede:	e7f6      	b.n	d5ece <_ZnwjRKSt9nothrow_t+0xa>
   d5ee0:	bd10      	pop	{r4, pc}

000d5ee2 <_ZSt25__throw_bad_function_callv>:
   d5ee2:	b508      	push	{r3, lr}
   d5ee4:	f7fe fde6 	bl	d4ab4 <abort>

000d5ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5ee8:	4b18      	ldr	r3, [pc, #96]	; (d5f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5eea:	681a      	ldr	r2, [r3, #0]
   d5eec:	07d1      	lsls	r1, r2, #31
   d5eee:	bf5c      	itt	pl
   d5ef0:	2201      	movpl	r2, #1
   d5ef2:	601a      	strpl	r2, [r3, #0]
   d5ef4:	4b16      	ldr	r3, [pc, #88]	; (d5f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5ef6:	681a      	ldr	r2, [r3, #0]
   d5ef8:	07d2      	lsls	r2, r2, #31
   d5efa:	bf5c      	itt	pl
   d5efc:	2201      	movpl	r2, #1
   d5efe:	601a      	strpl	r2, [r3, #0]
   d5f00:	4b14      	ldr	r3, [pc, #80]	; (d5f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f02:	681a      	ldr	r2, [r3, #0]
   d5f04:	07d0      	lsls	r0, r2, #31
   d5f06:	bf5c      	itt	pl
   d5f08:	2201      	movpl	r2, #1
   d5f0a:	601a      	strpl	r2, [r3, #0]
   d5f0c:	4b12      	ldr	r3, [pc, #72]	; (d5f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5f0e:	681a      	ldr	r2, [r3, #0]
   d5f10:	07d1      	lsls	r1, r2, #31
   d5f12:	bf5c      	itt	pl
   d5f14:	2201      	movpl	r2, #1
   d5f16:	601a      	strpl	r2, [r3, #0]
   d5f18:	4b10      	ldr	r3, [pc, #64]	; (d5f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5f1a:	681a      	ldr	r2, [r3, #0]
   d5f1c:	07d2      	lsls	r2, r2, #31
   d5f1e:	bf5c      	itt	pl
   d5f20:	2201      	movpl	r2, #1
   d5f22:	601a      	strpl	r2, [r3, #0]
   d5f24:	4b0e      	ldr	r3, [pc, #56]	; (d5f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5f26:	681a      	ldr	r2, [r3, #0]
   d5f28:	07d0      	lsls	r0, r2, #31
   d5f2a:	bf5c      	itt	pl
   d5f2c:	2201      	movpl	r2, #1
   d5f2e:	601a      	strpl	r2, [r3, #0]
   d5f30:	4b0c      	ldr	r3, [pc, #48]	; (d5f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5f32:	681a      	ldr	r2, [r3, #0]
   d5f34:	07d1      	lsls	r1, r2, #31
   d5f36:	bf5c      	itt	pl
   d5f38:	2201      	movpl	r2, #1
   d5f3a:	601a      	strpl	r2, [r3, #0]
   d5f3c:	4b0a      	ldr	r3, [pc, #40]	; (d5f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5f3e:	681a      	ldr	r2, [r3, #0]
   d5f40:	07d2      	lsls	r2, r2, #31
   d5f42:	bf5c      	itt	pl
   d5f44:	2201      	movpl	r2, #1
   d5f46:	601a      	strpl	r2, [r3, #0]
   d5f48:	4770      	bx	lr
   d5f4a:	bf00      	nop
   d5f4c:	2003e76c 	.word	0x2003e76c
   d5f50:	2003e768 	.word	0x2003e768
   d5f54:	2003e764 	.word	0x2003e764
   d5f58:	2003e760 	.word	0x2003e760
   d5f5c:	2003e75c 	.word	0x2003e75c
   d5f60:	2003e758 	.word	0x2003e758
   d5f64:	2003e754 	.word	0x2003e754
   d5f68:	2003e750 	.word	0x2003e750

000d5f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5f6c:	4b24      	ldr	r3, [pc, #144]	; (d6000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5f6e:	681a      	ldr	r2, [r3, #0]
   d5f70:	07d0      	lsls	r0, r2, #31
   d5f72:	bf5c      	itt	pl
   d5f74:	2201      	movpl	r2, #1
   d5f76:	601a      	strpl	r2, [r3, #0]
   d5f78:	4b22      	ldr	r3, [pc, #136]	; (d6004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5f7a:	681a      	ldr	r2, [r3, #0]
   d5f7c:	07d1      	lsls	r1, r2, #31
   d5f7e:	bf5c      	itt	pl
   d5f80:	2201      	movpl	r2, #1
   d5f82:	601a      	strpl	r2, [r3, #0]
   d5f84:	4b20      	ldr	r3, [pc, #128]	; (d6008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5f86:	681a      	ldr	r2, [r3, #0]
   d5f88:	07d2      	lsls	r2, r2, #31
   d5f8a:	bf5c      	itt	pl
   d5f8c:	2201      	movpl	r2, #1
   d5f8e:	601a      	strpl	r2, [r3, #0]
   d5f90:	4b1e      	ldr	r3, [pc, #120]	; (d600c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5f92:	681a      	ldr	r2, [r3, #0]
   d5f94:	07d0      	lsls	r0, r2, #31
   d5f96:	bf5c      	itt	pl
   d5f98:	2201      	movpl	r2, #1
   d5f9a:	601a      	strpl	r2, [r3, #0]
   d5f9c:	4b1c      	ldr	r3, [pc, #112]	; (d6010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5f9e:	681a      	ldr	r2, [r3, #0]
   d5fa0:	07d1      	lsls	r1, r2, #31
   d5fa2:	bf5c      	itt	pl
   d5fa4:	2201      	movpl	r2, #1
   d5fa6:	601a      	strpl	r2, [r3, #0]
   d5fa8:	4b1a      	ldr	r3, [pc, #104]	; (d6014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5faa:	681a      	ldr	r2, [r3, #0]
   d5fac:	07d2      	lsls	r2, r2, #31
   d5fae:	bf5c      	itt	pl
   d5fb0:	2201      	movpl	r2, #1
   d5fb2:	601a      	strpl	r2, [r3, #0]
   d5fb4:	4b18      	ldr	r3, [pc, #96]	; (d6018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5fb6:	681a      	ldr	r2, [r3, #0]
   d5fb8:	07d0      	lsls	r0, r2, #31
   d5fba:	bf5c      	itt	pl
   d5fbc:	2201      	movpl	r2, #1
   d5fbe:	601a      	strpl	r2, [r3, #0]
   d5fc0:	4b16      	ldr	r3, [pc, #88]	; (d601c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5fc2:	681a      	ldr	r2, [r3, #0]
   d5fc4:	07d1      	lsls	r1, r2, #31
   d5fc6:	bf5c      	itt	pl
   d5fc8:	2201      	movpl	r2, #1
   d5fca:	601a      	strpl	r2, [r3, #0]
   d5fcc:	4b14      	ldr	r3, [pc, #80]	; (d6020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5fce:	681a      	ldr	r2, [r3, #0]
   d5fd0:	07d2      	lsls	r2, r2, #31
   d5fd2:	bf5c      	itt	pl
   d5fd4:	2201      	movpl	r2, #1
   d5fd6:	601a      	strpl	r2, [r3, #0]
   d5fd8:	4b12      	ldr	r3, [pc, #72]	; (d6024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5fda:	681a      	ldr	r2, [r3, #0]
   d5fdc:	07d0      	lsls	r0, r2, #31
   d5fde:	bf5c      	itt	pl
   d5fe0:	2201      	movpl	r2, #1
   d5fe2:	601a      	strpl	r2, [r3, #0]
   d5fe4:	4b10      	ldr	r3, [pc, #64]	; (d6028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5fe6:	681a      	ldr	r2, [r3, #0]
   d5fe8:	07d1      	lsls	r1, r2, #31
   d5fea:	bf5c      	itt	pl
   d5fec:	2201      	movpl	r2, #1
   d5fee:	601a      	strpl	r2, [r3, #0]
   d5ff0:	4b0e      	ldr	r3, [pc, #56]	; (d602c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5ff2:	681a      	ldr	r2, [r3, #0]
   d5ff4:	07d2      	lsls	r2, r2, #31
   d5ff6:	bf5c      	itt	pl
   d5ff8:	2201      	movpl	r2, #1
   d5ffa:	601a      	strpl	r2, [r3, #0]
   d5ffc:	4770      	bx	lr
   d5ffe:	bf00      	nop
   d6000:	2003e79c 	.word	0x2003e79c
   d6004:	2003e798 	.word	0x2003e798
   d6008:	2003e794 	.word	0x2003e794
   d600c:	2003e790 	.word	0x2003e790
   d6010:	2003e78c 	.word	0x2003e78c
   d6014:	2003e788 	.word	0x2003e788
   d6018:	2003e784 	.word	0x2003e784
   d601c:	2003e780 	.word	0x2003e780
   d6020:	2003e77c 	.word	0x2003e77c
   d6024:	2003e778 	.word	0x2003e778
   d6028:	2003e774 	.word	0x2003e774
   d602c:	2003e770 	.word	0x2003e770

000d6030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6030:	4b24      	ldr	r3, [pc, #144]	; (d60c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6032:	681a      	ldr	r2, [r3, #0]
   d6034:	07d0      	lsls	r0, r2, #31
   d6036:	bf5c      	itt	pl
   d6038:	2201      	movpl	r2, #1
   d603a:	601a      	strpl	r2, [r3, #0]
   d603c:	4b22      	ldr	r3, [pc, #136]	; (d60c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d603e:	681a      	ldr	r2, [r3, #0]
   d6040:	07d1      	lsls	r1, r2, #31
   d6042:	bf5c      	itt	pl
   d6044:	2201      	movpl	r2, #1
   d6046:	601a      	strpl	r2, [r3, #0]
   d6048:	4b20      	ldr	r3, [pc, #128]	; (d60cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d604a:	681a      	ldr	r2, [r3, #0]
   d604c:	07d2      	lsls	r2, r2, #31
   d604e:	bf5c      	itt	pl
   d6050:	2201      	movpl	r2, #1
   d6052:	601a      	strpl	r2, [r3, #0]
   d6054:	4b1e      	ldr	r3, [pc, #120]	; (d60d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6056:	681a      	ldr	r2, [r3, #0]
   d6058:	07d0      	lsls	r0, r2, #31
   d605a:	bf5c      	itt	pl
   d605c:	2201      	movpl	r2, #1
   d605e:	601a      	strpl	r2, [r3, #0]
   d6060:	4b1c      	ldr	r3, [pc, #112]	; (d60d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6062:	681a      	ldr	r2, [r3, #0]
   d6064:	07d1      	lsls	r1, r2, #31
   d6066:	bf5c      	itt	pl
   d6068:	2201      	movpl	r2, #1
   d606a:	601a      	strpl	r2, [r3, #0]
   d606c:	4b1a      	ldr	r3, [pc, #104]	; (d60d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d606e:	681a      	ldr	r2, [r3, #0]
   d6070:	07d2      	lsls	r2, r2, #31
   d6072:	bf5c      	itt	pl
   d6074:	2201      	movpl	r2, #1
   d6076:	601a      	strpl	r2, [r3, #0]
   d6078:	4b18      	ldr	r3, [pc, #96]	; (d60dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d607a:	681a      	ldr	r2, [r3, #0]
   d607c:	07d0      	lsls	r0, r2, #31
   d607e:	bf5c      	itt	pl
   d6080:	2201      	movpl	r2, #1
   d6082:	601a      	strpl	r2, [r3, #0]
   d6084:	4b16      	ldr	r3, [pc, #88]	; (d60e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6086:	681a      	ldr	r2, [r3, #0]
   d6088:	07d1      	lsls	r1, r2, #31
   d608a:	bf5c      	itt	pl
   d608c:	2201      	movpl	r2, #1
   d608e:	601a      	strpl	r2, [r3, #0]
   d6090:	4b14      	ldr	r3, [pc, #80]	; (d60e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6092:	681a      	ldr	r2, [r3, #0]
   d6094:	07d2      	lsls	r2, r2, #31
   d6096:	bf5c      	itt	pl
   d6098:	2201      	movpl	r2, #1
   d609a:	601a      	strpl	r2, [r3, #0]
   d609c:	4b12      	ldr	r3, [pc, #72]	; (d60e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d609e:	681a      	ldr	r2, [r3, #0]
   d60a0:	07d0      	lsls	r0, r2, #31
   d60a2:	bf5c      	itt	pl
   d60a4:	2201      	movpl	r2, #1
   d60a6:	601a      	strpl	r2, [r3, #0]
   d60a8:	4b10      	ldr	r3, [pc, #64]	; (d60ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d60aa:	681a      	ldr	r2, [r3, #0]
   d60ac:	07d1      	lsls	r1, r2, #31
   d60ae:	bf5c      	itt	pl
   d60b0:	2201      	movpl	r2, #1
   d60b2:	601a      	strpl	r2, [r3, #0]
   d60b4:	4b0e      	ldr	r3, [pc, #56]	; (d60f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d60b6:	681a      	ldr	r2, [r3, #0]
   d60b8:	07d2      	lsls	r2, r2, #31
   d60ba:	bf5c      	itt	pl
   d60bc:	2201      	movpl	r2, #1
   d60be:	601a      	strpl	r2, [r3, #0]
   d60c0:	4770      	bx	lr
   d60c2:	bf00      	nop
   d60c4:	2003e7cc 	.word	0x2003e7cc
   d60c8:	2003e7c8 	.word	0x2003e7c8
   d60cc:	2003e7c4 	.word	0x2003e7c4
   d60d0:	2003e7c0 	.word	0x2003e7c0
   d60d4:	2003e7bc 	.word	0x2003e7bc
   d60d8:	2003e7b8 	.word	0x2003e7b8
   d60dc:	2003e7b4 	.word	0x2003e7b4
   d60e0:	2003e7b0 	.word	0x2003e7b0
   d60e4:	2003e7ac 	.word	0x2003e7ac
   d60e8:	2003e7a8 	.word	0x2003e7a8
   d60ec:	2003e7a4 	.word	0x2003e7a4
   d60f0:	2003e7a0 	.word	0x2003e7a0

000d60f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d60f4:	4b18      	ldr	r3, [pc, #96]	; (d6158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d60f6:	681a      	ldr	r2, [r3, #0]
   d60f8:	07d1      	lsls	r1, r2, #31
   d60fa:	bf5c      	itt	pl
   d60fc:	2201      	movpl	r2, #1
   d60fe:	601a      	strpl	r2, [r3, #0]
   d6100:	4b16      	ldr	r3, [pc, #88]	; (d615c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6102:	681a      	ldr	r2, [r3, #0]
   d6104:	07d2      	lsls	r2, r2, #31
   d6106:	bf5c      	itt	pl
   d6108:	2201      	movpl	r2, #1
   d610a:	601a      	strpl	r2, [r3, #0]
   d610c:	4b14      	ldr	r3, [pc, #80]	; (d6160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d610e:	681a      	ldr	r2, [r3, #0]
   d6110:	07d0      	lsls	r0, r2, #31
   d6112:	bf5c      	itt	pl
   d6114:	2201      	movpl	r2, #1
   d6116:	601a      	strpl	r2, [r3, #0]
   d6118:	4b12      	ldr	r3, [pc, #72]	; (d6164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d611a:	681a      	ldr	r2, [r3, #0]
   d611c:	07d1      	lsls	r1, r2, #31
   d611e:	bf5c      	itt	pl
   d6120:	2201      	movpl	r2, #1
   d6122:	601a      	strpl	r2, [r3, #0]
   d6124:	4b10      	ldr	r3, [pc, #64]	; (d6168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6126:	681a      	ldr	r2, [r3, #0]
   d6128:	07d2      	lsls	r2, r2, #31
   d612a:	bf5c      	itt	pl
   d612c:	2201      	movpl	r2, #1
   d612e:	601a      	strpl	r2, [r3, #0]
   d6130:	4b0e      	ldr	r3, [pc, #56]	; (d616c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6132:	681a      	ldr	r2, [r3, #0]
   d6134:	07d0      	lsls	r0, r2, #31
   d6136:	bf5c      	itt	pl
   d6138:	2201      	movpl	r2, #1
   d613a:	601a      	strpl	r2, [r3, #0]
   d613c:	4b0c      	ldr	r3, [pc, #48]	; (d6170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d613e:	681a      	ldr	r2, [r3, #0]
   d6140:	07d1      	lsls	r1, r2, #31
   d6142:	bf5c      	itt	pl
   d6144:	2201      	movpl	r2, #1
   d6146:	601a      	strpl	r2, [r3, #0]
   d6148:	4b0a      	ldr	r3, [pc, #40]	; (d6174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d614a:	681a      	ldr	r2, [r3, #0]
   d614c:	07d2      	lsls	r2, r2, #31
   d614e:	bf5c      	itt	pl
   d6150:	2201      	movpl	r2, #1
   d6152:	601a      	strpl	r2, [r3, #0]
   d6154:	4770      	bx	lr
   d6156:	bf00      	nop
   d6158:	2003e7ec 	.word	0x2003e7ec
   d615c:	2003e7e8 	.word	0x2003e7e8
   d6160:	2003e7e4 	.word	0x2003e7e4
   d6164:	2003e7e0 	.word	0x2003e7e0
   d6168:	2003e7dc 	.word	0x2003e7dc
   d616c:	2003e7d8 	.word	0x2003e7d8
   d6170:	2003e7d4 	.word	0x2003e7d4
   d6174:	2003e7d0 	.word	0x2003e7d0

000d6178 <sqrt>:
   d6178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d617c:	ed2d 8b02 	vpush	{d8}
   d6180:	b08b      	sub	sp, #44	; 0x2c
   d6182:	ec55 4b10 	vmov	r4, r5, d0
   d6186:	f000 f857 	bl	d6238 <__ieee754_sqrt>
   d618a:	4b29      	ldr	r3, [pc, #164]	; (d6230 <sqrt+0xb8>)
   d618c:	eeb0 8a40 	vmov.f32	s16, s0
   d6190:	eef0 8a60 	vmov.f32	s17, s1
   d6194:	f993 6000 	ldrsb.w	r6, [r3]
   d6198:	1c73      	adds	r3, r6, #1
   d619a:	d012      	beq.n	d61c2 <sqrt+0x4a>
   d619c:	4622      	mov	r2, r4
   d619e:	462b      	mov	r3, r5
   d61a0:	4620      	mov	r0, r4
   d61a2:	4629      	mov	r1, r5
   d61a4:	f000 fd6c 	bl	d6c80 <__aeabi_dcmpun>
   d61a8:	4607      	mov	r7, r0
   d61aa:	b950      	cbnz	r0, d61c2 <sqrt+0x4a>
   d61ac:	f04f 0800 	mov.w	r8, #0
   d61b0:	f04f 0900 	mov.w	r9, #0
   d61b4:	4620      	mov	r0, r4
   d61b6:	4629      	mov	r1, r5
   d61b8:	4642      	mov	r2, r8
   d61ba:	464b      	mov	r3, r9
   d61bc:	f000 fd38 	bl	d6c30 <__aeabi_dcmplt>
   d61c0:	b940      	cbnz	r0, d61d4 <sqrt+0x5c>
   d61c2:	eeb0 0a48 	vmov.f32	s0, s16
   d61c6:	eef0 0a68 	vmov.f32	s1, s17
   d61ca:	b00b      	add	sp, #44	; 0x2c
   d61cc:	ecbd 8b02 	vpop	{d8}
   d61d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d61d4:	4b17      	ldr	r3, [pc, #92]	; (d6234 <sqrt+0xbc>)
   d61d6:	9708      	str	r7, [sp, #32]
   d61d8:	2201      	movs	r2, #1
   d61da:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d61de:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d61e2:	e88d 000c 	stmia.w	sp, {r2, r3}
   d61e6:	b1b6      	cbz	r6, d6216 <sqrt+0x9e>
   d61e8:	4642      	mov	r2, r8
   d61ea:	464b      	mov	r3, r9
   d61ec:	4640      	mov	r0, r8
   d61ee:	4649      	mov	r1, r9
   d61f0:	f000 fbd6 	bl	d69a0 <__aeabi_ddiv>
   d61f4:	2e02      	cmp	r6, #2
   d61f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d61fa:	d10e      	bne.n	d621a <sqrt+0xa2>
   d61fc:	f7fe fc6a 	bl	d4ad4 <__errno>
   d6200:	2321      	movs	r3, #33	; 0x21
   d6202:	6003      	str	r3, [r0, #0]
   d6204:	9b08      	ldr	r3, [sp, #32]
   d6206:	b973      	cbnz	r3, d6226 <sqrt+0xae>
   d6208:	ed9d 0b06 	vldr	d0, [sp, #24]
   d620c:	b00b      	add	sp, #44	; 0x2c
   d620e:	ecbd 8b02 	vpop	{d8}
   d6212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6216:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d621a:	4668      	mov	r0, sp
   d621c:	f000 f8dc 	bl	d63d8 <matherr>
   d6220:	2800      	cmp	r0, #0
   d6222:	d1ef      	bne.n	d6204 <sqrt+0x8c>
   d6224:	e7ea      	b.n	d61fc <sqrt+0x84>
   d6226:	f7fe fc55 	bl	d4ad4 <__errno>
   d622a:	9b08      	ldr	r3, [sp, #32]
   d622c:	6003      	str	r3, [r0, #0]
   d622e:	e7eb      	b.n	d6208 <sqrt+0x90>
   d6230:	2003e2e8 	.word	0x2003e2e8
   d6234:	000d71e0 	.word	0x000d71e0

000d6238 <__ieee754_sqrt>:
   d6238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d623c:	4965      	ldr	r1, [pc, #404]	; (d63d4 <__ieee754_sqrt+0x19c>)
   d623e:	ec55 4b10 	vmov	r4, r5, d0
   d6242:	460e      	mov	r6, r1
   d6244:	4029      	ands	r1, r5
   d6246:	42b1      	cmp	r1, r6
   d6248:	f000 8097 	beq.w	d637a <__ieee754_sqrt+0x142>
   d624c:	2d00      	cmp	r5, #0
   d624e:	462b      	mov	r3, r5
   d6250:	ee10 2a10 	vmov	r2, s0
   d6254:	dd74      	ble.n	d6340 <__ieee754_sqrt+0x108>
   d6256:	152f      	asrs	r7, r5, #20
   d6258:	d07f      	beq.n	d635a <__ieee754_sqrt+0x122>
   d625a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d625e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d6262:	07f9      	lsls	r1, r7, #31
   d6264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6268:	d465      	bmi.n	d6336 <__ieee754_sqrt+0xfe>
   d626a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d626e:	2600      	movs	r6, #0
   d6270:	440b      	add	r3, r1
   d6272:	107f      	asrs	r7, r7, #1
   d6274:	0052      	lsls	r2, r2, #1
   d6276:	46b6      	mov	lr, r6
   d6278:	2016      	movs	r0, #22
   d627a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d627e:	eb0e 0401 	add.w	r4, lr, r1
   d6282:	429c      	cmp	r4, r3
   d6284:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d6288:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d628c:	dc03      	bgt.n	d6296 <__ieee754_sqrt+0x5e>
   d628e:	1b1b      	subs	r3, r3, r4
   d6290:	eb04 0e01 	add.w	lr, r4, r1
   d6294:	440e      	add	r6, r1
   d6296:	3801      	subs	r0, #1
   d6298:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d629c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d62a0:	d1ed      	bne.n	d627e <__ieee754_sqrt+0x46>
   d62a2:	4684      	mov	ip, r0
   d62a4:	2420      	movs	r4, #32
   d62a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d62aa:	e009      	b.n	d62c0 <__ieee754_sqrt+0x88>
   d62ac:	d020      	beq.n	d62f0 <__ieee754_sqrt+0xb8>
   d62ae:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d62b2:	3c01      	subs	r4, #1
   d62b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d62b8:	442b      	add	r3, r5
   d62ba:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d62be:	d020      	beq.n	d6302 <__ieee754_sqrt+0xca>
   d62c0:	459e      	cmp	lr, r3
   d62c2:	eb01 050c 	add.w	r5, r1, ip
   d62c6:	daf1      	bge.n	d62ac <__ieee754_sqrt+0x74>
   d62c8:	2d00      	cmp	r5, #0
   d62ca:	eb05 0c01 	add.w	ip, r5, r1
   d62ce:	db09      	blt.n	d62e4 <__ieee754_sqrt+0xac>
   d62d0:	46f0      	mov	r8, lr
   d62d2:	4295      	cmp	r5, r2
   d62d4:	ebce 0303 	rsb	r3, lr, r3
   d62d8:	d900      	bls.n	d62dc <__ieee754_sqrt+0xa4>
   d62da:	3b01      	subs	r3, #1
   d62dc:	1b52      	subs	r2, r2, r5
   d62de:	4408      	add	r0, r1
   d62e0:	46c6      	mov	lr, r8
   d62e2:	e7e4      	b.n	d62ae <__ieee754_sqrt+0x76>
   d62e4:	f1bc 0f00 	cmp.w	ip, #0
   d62e8:	dbf2      	blt.n	d62d0 <__ieee754_sqrt+0x98>
   d62ea:	f10e 0801 	add.w	r8, lr, #1
   d62ee:	e7f0      	b.n	d62d2 <__ieee754_sqrt+0x9a>
   d62f0:	4295      	cmp	r5, r2
   d62f2:	d81e      	bhi.n	d6332 <__ieee754_sqrt+0xfa>
   d62f4:	2d00      	cmp	r5, #0
   d62f6:	eb05 0c01 	add.w	ip, r5, r1
   d62fa:	db50      	blt.n	d639e <__ieee754_sqrt+0x166>
   d62fc:	4698      	mov	r8, r3
   d62fe:	2300      	movs	r3, #0
   d6300:	e7ec      	b.n	d62dc <__ieee754_sqrt+0xa4>
   d6302:	4313      	orrs	r3, r2
   d6304:	d004      	beq.n	d6310 <__ieee754_sqrt+0xd8>
   d6306:	1c42      	adds	r2, r0, #1
   d6308:	d04d      	beq.n	d63a6 <__ieee754_sqrt+0x16e>
   d630a:	f000 0301 	and.w	r3, r0, #1
   d630e:	4418      	add	r0, r3
   d6310:	0840      	lsrs	r0, r0, #1
   d6312:	1071      	asrs	r1, r6, #1
   d6314:	07f3      	lsls	r3, r6, #31
   d6316:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d631a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d631e:	bf48      	it	mi
   d6320:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d6324:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d6328:	4602      	mov	r2, r0
   d632a:	ec43 2b10 	vmov	d0, r2, r3
   d632e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6332:	4673      	mov	r3, lr
   d6334:	e7bb      	b.n	d62ae <__ieee754_sqrt+0x76>
   d6336:	005b      	lsls	r3, r3, #1
   d6338:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d633c:	0052      	lsls	r2, r2, #1
   d633e:	e794      	b.n	d626a <__ieee754_sqrt+0x32>
   d6340:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d6344:	4321      	orrs	r1, r4
   d6346:	d028      	beq.n	d639a <__ieee754_sqrt+0x162>
   d6348:	bbad      	cbnz	r5, d63b6 <__ieee754_sqrt+0x17e>
   d634a:	462f      	mov	r7, r5
   d634c:	0ad3      	lsrs	r3, r2, #11
   d634e:	3f15      	subs	r7, #21
   d6350:	0552      	lsls	r2, r2, #21
   d6352:	2b00      	cmp	r3, #0
   d6354:	d0fa      	beq.n	d634c <__ieee754_sqrt+0x114>
   d6356:	02dd      	lsls	r5, r3, #11
   d6358:	d428      	bmi.n	d63ac <__ieee754_sqrt+0x174>
   d635a:	2100      	movs	r1, #0
   d635c:	e000      	b.n	d6360 <__ieee754_sqrt+0x128>
   d635e:	4601      	mov	r1, r0
   d6360:	005b      	lsls	r3, r3, #1
   d6362:	02dc      	lsls	r4, r3, #11
   d6364:	f101 0001 	add.w	r0, r1, #1
   d6368:	d5f9      	bpl.n	d635e <__ieee754_sqrt+0x126>
   d636a:	f1c0 0420 	rsb	r4, r0, #32
   d636e:	fa22 f404 	lsr.w	r4, r2, r4
   d6372:	4323      	orrs	r3, r4
   d6374:	1a7f      	subs	r7, r7, r1
   d6376:	4082      	lsls	r2, r0
   d6378:	e76f      	b.n	d625a <__ieee754_sqrt+0x22>
   d637a:	ee10 2a10 	vmov	r2, s0
   d637e:	462b      	mov	r3, r5
   d6380:	ee10 0a10 	vmov	r0, s0
   d6384:	4629      	mov	r1, r5
   d6386:	f000 f9e1 	bl	d674c <__aeabi_dmul>
   d638a:	4622      	mov	r2, r4
   d638c:	462b      	mov	r3, r5
   d638e:	f000 f82b 	bl	d63e8 <__adddf3>
   d6392:	ec41 0b10 	vmov	d0, r0, r1
   d6396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d639a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d639e:	f1bc 0f00 	cmp.w	ip, #0
   d63a2:	daa2      	bge.n	d62ea <__ieee754_sqrt+0xb2>
   d63a4:	e7aa      	b.n	d62fc <__ieee754_sqrt+0xc4>
   d63a6:	3601      	adds	r6, #1
   d63a8:	4620      	mov	r0, r4
   d63aa:	e7b2      	b.n	d6312 <__ieee754_sqrt+0xda>
   d63ac:	2420      	movs	r4, #32
   d63ae:	f04f 31ff 	mov.w	r1, #4294967295
   d63b2:	2000      	movs	r0, #0
   d63b4:	e7db      	b.n	d636e <__ieee754_sqrt+0x136>
   d63b6:	ee10 2a10 	vmov	r2, s0
   d63ba:	462b      	mov	r3, r5
   d63bc:	4620      	mov	r0, r4
   d63be:	4629      	mov	r1, r5
   d63c0:	f000 f810 	bl	d63e4 <__aeabi_dsub>
   d63c4:	4602      	mov	r2, r0
   d63c6:	460b      	mov	r3, r1
   d63c8:	f000 faea 	bl	d69a0 <__aeabi_ddiv>
   d63cc:	ec41 0b10 	vmov	d0, r0, r1
   d63d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d63d4:	7ff00000 	.word	0x7ff00000

000d63d8 <matherr>:
   d63d8:	2000      	movs	r0, #0
   d63da:	4770      	bx	lr

000d63dc <__aeabi_drsub>:
   d63dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d63e0:	e002      	b.n	d63e8 <__adddf3>
   d63e2:	bf00      	nop

000d63e4 <__aeabi_dsub>:
   d63e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d63e8 <__adddf3>:
   d63e8:	b530      	push	{r4, r5, lr}
   d63ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d63ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d63f2:	ea94 0f05 	teq	r4, r5
   d63f6:	bf08      	it	eq
   d63f8:	ea90 0f02 	teqeq	r0, r2
   d63fc:	bf1f      	itttt	ne
   d63fe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6402:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6406:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d640a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d640e:	f000 80e2 	beq.w	d65d6 <__adddf3+0x1ee>
   d6412:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6416:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d641a:	bfb8      	it	lt
   d641c:	426d      	neglt	r5, r5
   d641e:	dd0c      	ble.n	d643a <__adddf3+0x52>
   d6420:	442c      	add	r4, r5
   d6422:	ea80 0202 	eor.w	r2, r0, r2
   d6426:	ea81 0303 	eor.w	r3, r1, r3
   d642a:	ea82 0000 	eor.w	r0, r2, r0
   d642e:	ea83 0101 	eor.w	r1, r3, r1
   d6432:	ea80 0202 	eor.w	r2, r0, r2
   d6436:	ea81 0303 	eor.w	r3, r1, r3
   d643a:	2d36      	cmp	r5, #54	; 0x36
   d643c:	bf88      	it	hi
   d643e:	bd30      	pophi	{r4, r5, pc}
   d6440:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6444:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6448:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d644c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6450:	d002      	beq.n	d6458 <__adddf3+0x70>
   d6452:	4240      	negs	r0, r0
   d6454:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6458:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d645c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6460:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6464:	d002      	beq.n	d646c <__adddf3+0x84>
   d6466:	4252      	negs	r2, r2
   d6468:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d646c:	ea94 0f05 	teq	r4, r5
   d6470:	f000 80a7 	beq.w	d65c2 <__adddf3+0x1da>
   d6474:	f1a4 0401 	sub.w	r4, r4, #1
   d6478:	f1d5 0e20 	rsbs	lr, r5, #32
   d647c:	db0d      	blt.n	d649a <__adddf3+0xb2>
   d647e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6482:	fa22 f205 	lsr.w	r2, r2, r5
   d6486:	1880      	adds	r0, r0, r2
   d6488:	f141 0100 	adc.w	r1, r1, #0
   d648c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6490:	1880      	adds	r0, r0, r2
   d6492:	fa43 f305 	asr.w	r3, r3, r5
   d6496:	4159      	adcs	r1, r3
   d6498:	e00e      	b.n	d64b8 <__adddf3+0xd0>
   d649a:	f1a5 0520 	sub.w	r5, r5, #32
   d649e:	f10e 0e20 	add.w	lr, lr, #32
   d64a2:	2a01      	cmp	r2, #1
   d64a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d64a8:	bf28      	it	cs
   d64aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d64ae:	fa43 f305 	asr.w	r3, r3, r5
   d64b2:	18c0      	adds	r0, r0, r3
   d64b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d64b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d64bc:	d507      	bpl.n	d64ce <__adddf3+0xe6>
   d64be:	f04f 0e00 	mov.w	lr, #0
   d64c2:	f1dc 0c00 	rsbs	ip, ip, #0
   d64c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d64ca:	eb6e 0101 	sbc.w	r1, lr, r1
   d64ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d64d2:	d31b      	bcc.n	d650c <__adddf3+0x124>
   d64d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d64d8:	d30c      	bcc.n	d64f4 <__adddf3+0x10c>
   d64da:	0849      	lsrs	r1, r1, #1
   d64dc:	ea5f 0030 	movs.w	r0, r0, rrx
   d64e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d64e4:	f104 0401 	add.w	r4, r4, #1
   d64e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d64ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d64f0:	f080 809a 	bcs.w	d6628 <__adddf3+0x240>
   d64f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d64f8:	bf08      	it	eq
   d64fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d64fe:	f150 0000 	adcs.w	r0, r0, #0
   d6502:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6506:	ea41 0105 	orr.w	r1, r1, r5
   d650a:	bd30      	pop	{r4, r5, pc}
   d650c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6510:	4140      	adcs	r0, r0
   d6512:	eb41 0101 	adc.w	r1, r1, r1
   d6516:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d651a:	f1a4 0401 	sub.w	r4, r4, #1
   d651e:	d1e9      	bne.n	d64f4 <__adddf3+0x10c>
   d6520:	f091 0f00 	teq	r1, #0
   d6524:	bf04      	itt	eq
   d6526:	4601      	moveq	r1, r0
   d6528:	2000      	moveq	r0, #0
   d652a:	fab1 f381 	clz	r3, r1
   d652e:	bf08      	it	eq
   d6530:	3320      	addeq	r3, #32
   d6532:	f1a3 030b 	sub.w	r3, r3, #11
   d6536:	f1b3 0220 	subs.w	r2, r3, #32
   d653a:	da0c      	bge.n	d6556 <__adddf3+0x16e>
   d653c:	320c      	adds	r2, #12
   d653e:	dd08      	ble.n	d6552 <__adddf3+0x16a>
   d6540:	f102 0c14 	add.w	ip, r2, #20
   d6544:	f1c2 020c 	rsb	r2, r2, #12
   d6548:	fa01 f00c 	lsl.w	r0, r1, ip
   d654c:	fa21 f102 	lsr.w	r1, r1, r2
   d6550:	e00c      	b.n	d656c <__adddf3+0x184>
   d6552:	f102 0214 	add.w	r2, r2, #20
   d6556:	bfd8      	it	le
   d6558:	f1c2 0c20 	rsble	ip, r2, #32
   d655c:	fa01 f102 	lsl.w	r1, r1, r2
   d6560:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6564:	bfdc      	itt	le
   d6566:	ea41 010c 	orrle.w	r1, r1, ip
   d656a:	4090      	lslle	r0, r2
   d656c:	1ae4      	subs	r4, r4, r3
   d656e:	bfa2      	ittt	ge
   d6570:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6574:	4329      	orrge	r1, r5
   d6576:	bd30      	popge	{r4, r5, pc}
   d6578:	ea6f 0404 	mvn.w	r4, r4
   d657c:	3c1f      	subs	r4, #31
   d657e:	da1c      	bge.n	d65ba <__adddf3+0x1d2>
   d6580:	340c      	adds	r4, #12
   d6582:	dc0e      	bgt.n	d65a2 <__adddf3+0x1ba>
   d6584:	f104 0414 	add.w	r4, r4, #20
   d6588:	f1c4 0220 	rsb	r2, r4, #32
   d658c:	fa20 f004 	lsr.w	r0, r0, r4
   d6590:	fa01 f302 	lsl.w	r3, r1, r2
   d6594:	ea40 0003 	orr.w	r0, r0, r3
   d6598:	fa21 f304 	lsr.w	r3, r1, r4
   d659c:	ea45 0103 	orr.w	r1, r5, r3
   d65a0:	bd30      	pop	{r4, r5, pc}
   d65a2:	f1c4 040c 	rsb	r4, r4, #12
   d65a6:	f1c4 0220 	rsb	r2, r4, #32
   d65aa:	fa20 f002 	lsr.w	r0, r0, r2
   d65ae:	fa01 f304 	lsl.w	r3, r1, r4
   d65b2:	ea40 0003 	orr.w	r0, r0, r3
   d65b6:	4629      	mov	r1, r5
   d65b8:	bd30      	pop	{r4, r5, pc}
   d65ba:	fa21 f004 	lsr.w	r0, r1, r4
   d65be:	4629      	mov	r1, r5
   d65c0:	bd30      	pop	{r4, r5, pc}
   d65c2:	f094 0f00 	teq	r4, #0
   d65c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d65ca:	bf06      	itte	eq
   d65cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d65d0:	3401      	addeq	r4, #1
   d65d2:	3d01      	subne	r5, #1
   d65d4:	e74e      	b.n	d6474 <__adddf3+0x8c>
   d65d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d65da:	bf18      	it	ne
   d65dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d65e0:	d029      	beq.n	d6636 <__adddf3+0x24e>
   d65e2:	ea94 0f05 	teq	r4, r5
   d65e6:	bf08      	it	eq
   d65e8:	ea90 0f02 	teqeq	r0, r2
   d65ec:	d005      	beq.n	d65fa <__adddf3+0x212>
   d65ee:	ea54 0c00 	orrs.w	ip, r4, r0
   d65f2:	bf04      	itt	eq
   d65f4:	4619      	moveq	r1, r3
   d65f6:	4610      	moveq	r0, r2
   d65f8:	bd30      	pop	{r4, r5, pc}
   d65fa:	ea91 0f03 	teq	r1, r3
   d65fe:	bf1e      	ittt	ne
   d6600:	2100      	movne	r1, #0
   d6602:	2000      	movne	r0, #0
   d6604:	bd30      	popne	{r4, r5, pc}
   d6606:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d660a:	d105      	bne.n	d6618 <__adddf3+0x230>
   d660c:	0040      	lsls	r0, r0, #1
   d660e:	4149      	adcs	r1, r1
   d6610:	bf28      	it	cs
   d6612:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6616:	bd30      	pop	{r4, r5, pc}
   d6618:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d661c:	bf3c      	itt	cc
   d661e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6622:	bd30      	popcc	{r4, r5, pc}
   d6624:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6628:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d662c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6630:	f04f 0000 	mov.w	r0, #0
   d6634:	bd30      	pop	{r4, r5, pc}
   d6636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d663a:	bf1a      	itte	ne
   d663c:	4619      	movne	r1, r3
   d663e:	4610      	movne	r0, r2
   d6640:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6644:	bf1c      	itt	ne
   d6646:	460b      	movne	r3, r1
   d6648:	4602      	movne	r2, r0
   d664a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d664e:	bf06      	itte	eq
   d6650:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6654:	ea91 0f03 	teqeq	r1, r3
   d6658:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d665c:	bd30      	pop	{r4, r5, pc}
   d665e:	bf00      	nop

000d6660 <__aeabi_ui2d>:
   d6660:	f090 0f00 	teq	r0, #0
   d6664:	bf04      	itt	eq
   d6666:	2100      	moveq	r1, #0
   d6668:	4770      	bxeq	lr
   d666a:	b530      	push	{r4, r5, lr}
   d666c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6670:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6674:	f04f 0500 	mov.w	r5, #0
   d6678:	f04f 0100 	mov.w	r1, #0
   d667c:	e750      	b.n	d6520 <__adddf3+0x138>
   d667e:	bf00      	nop

000d6680 <__aeabi_i2d>:
   d6680:	f090 0f00 	teq	r0, #0
   d6684:	bf04      	itt	eq
   d6686:	2100      	moveq	r1, #0
   d6688:	4770      	bxeq	lr
   d668a:	b530      	push	{r4, r5, lr}
   d668c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6690:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6694:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6698:	bf48      	it	mi
   d669a:	4240      	negmi	r0, r0
   d669c:	f04f 0100 	mov.w	r1, #0
   d66a0:	e73e      	b.n	d6520 <__adddf3+0x138>
   d66a2:	bf00      	nop

000d66a4 <__aeabi_f2d>:
   d66a4:	0042      	lsls	r2, r0, #1
   d66a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d66aa:	ea4f 0131 	mov.w	r1, r1, rrx
   d66ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d66b2:	bf1f      	itttt	ne
   d66b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d66b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d66bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d66c0:	4770      	bxne	lr
   d66c2:	f092 0f00 	teq	r2, #0
   d66c6:	bf14      	ite	ne
   d66c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d66cc:	4770      	bxeq	lr
   d66ce:	b530      	push	{r4, r5, lr}
   d66d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d66d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d66d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d66dc:	e720      	b.n	d6520 <__adddf3+0x138>
   d66de:	bf00      	nop

000d66e0 <__aeabi_ul2d>:
   d66e0:	ea50 0201 	orrs.w	r2, r0, r1
   d66e4:	bf08      	it	eq
   d66e6:	4770      	bxeq	lr
   d66e8:	b530      	push	{r4, r5, lr}
   d66ea:	f04f 0500 	mov.w	r5, #0
   d66ee:	e00a      	b.n	d6706 <__aeabi_l2d+0x16>

000d66f0 <__aeabi_l2d>:
   d66f0:	ea50 0201 	orrs.w	r2, r0, r1
   d66f4:	bf08      	it	eq
   d66f6:	4770      	bxeq	lr
   d66f8:	b530      	push	{r4, r5, lr}
   d66fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d66fe:	d502      	bpl.n	d6706 <__aeabi_l2d+0x16>
   d6700:	4240      	negs	r0, r0
   d6702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6706:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d670a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d670e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6712:	f43f aedc 	beq.w	d64ce <__adddf3+0xe6>
   d6716:	f04f 0203 	mov.w	r2, #3
   d671a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d671e:	bf18      	it	ne
   d6720:	3203      	addne	r2, #3
   d6722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6726:	bf18      	it	ne
   d6728:	3203      	addne	r2, #3
   d672a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d672e:	f1c2 0320 	rsb	r3, r2, #32
   d6732:	fa00 fc03 	lsl.w	ip, r0, r3
   d6736:	fa20 f002 	lsr.w	r0, r0, r2
   d673a:	fa01 fe03 	lsl.w	lr, r1, r3
   d673e:	ea40 000e 	orr.w	r0, r0, lr
   d6742:	fa21 f102 	lsr.w	r1, r1, r2
   d6746:	4414      	add	r4, r2
   d6748:	e6c1      	b.n	d64ce <__adddf3+0xe6>
   d674a:	bf00      	nop

000d674c <__aeabi_dmul>:
   d674c:	b570      	push	{r4, r5, r6, lr}
   d674e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d675a:	bf1d      	ittte	ne
   d675c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6760:	ea94 0f0c 	teqne	r4, ip
   d6764:	ea95 0f0c 	teqne	r5, ip
   d6768:	f000 f8de 	bleq	d6928 <__aeabi_dmul+0x1dc>
   d676c:	442c      	add	r4, r5
   d676e:	ea81 0603 	eor.w	r6, r1, r3
   d6772:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6776:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d677a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d677e:	bf18      	it	ne
   d6780:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d678c:	d038      	beq.n	d6800 <__aeabi_dmul+0xb4>
   d678e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6792:	f04f 0500 	mov.w	r5, #0
   d6796:	fbe1 e502 	umlal	lr, r5, r1, r2
   d679a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d679e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d67a2:	f04f 0600 	mov.w	r6, #0
   d67a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d67aa:	f09c 0f00 	teq	ip, #0
   d67ae:	bf18      	it	ne
   d67b0:	f04e 0e01 	orrne.w	lr, lr, #1
   d67b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d67b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d67bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d67c0:	d204      	bcs.n	d67cc <__aeabi_dmul+0x80>
   d67c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d67c6:	416d      	adcs	r5, r5
   d67c8:	eb46 0606 	adc.w	r6, r6, r6
   d67cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d67d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d67d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d67d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d67dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d67e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d67e4:	bf88      	it	hi
   d67e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d67ea:	d81e      	bhi.n	d682a <__aeabi_dmul+0xde>
   d67ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d67f0:	bf08      	it	eq
   d67f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d67f6:	f150 0000 	adcs.w	r0, r0, #0
   d67fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d67fe:	bd70      	pop	{r4, r5, r6, pc}
   d6800:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6804:	ea46 0101 	orr.w	r1, r6, r1
   d6808:	ea40 0002 	orr.w	r0, r0, r2
   d680c:	ea81 0103 	eor.w	r1, r1, r3
   d6810:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6814:	bfc2      	ittt	gt
   d6816:	ebd4 050c 	rsbsgt	r5, r4, ip
   d681a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d681e:	bd70      	popgt	{r4, r5, r6, pc}
   d6820:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6824:	f04f 0e00 	mov.w	lr, #0
   d6828:	3c01      	subs	r4, #1
   d682a:	f300 80ab 	bgt.w	d6984 <__aeabi_dmul+0x238>
   d682e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6832:	bfde      	ittt	le
   d6834:	2000      	movle	r0, #0
   d6836:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d683a:	bd70      	pople	{r4, r5, r6, pc}
   d683c:	f1c4 0400 	rsb	r4, r4, #0
   d6840:	3c20      	subs	r4, #32
   d6842:	da35      	bge.n	d68b0 <__aeabi_dmul+0x164>
   d6844:	340c      	adds	r4, #12
   d6846:	dc1b      	bgt.n	d6880 <__aeabi_dmul+0x134>
   d6848:	f104 0414 	add.w	r4, r4, #20
   d684c:	f1c4 0520 	rsb	r5, r4, #32
   d6850:	fa00 f305 	lsl.w	r3, r0, r5
   d6854:	fa20 f004 	lsr.w	r0, r0, r4
   d6858:	fa01 f205 	lsl.w	r2, r1, r5
   d685c:	ea40 0002 	orr.w	r0, r0, r2
   d6860:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6864:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d686c:	fa21 f604 	lsr.w	r6, r1, r4
   d6870:	eb42 0106 	adc.w	r1, r2, r6
   d6874:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6878:	bf08      	it	eq
   d687a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d687e:	bd70      	pop	{r4, r5, r6, pc}
   d6880:	f1c4 040c 	rsb	r4, r4, #12
   d6884:	f1c4 0520 	rsb	r5, r4, #32
   d6888:	fa00 f304 	lsl.w	r3, r0, r4
   d688c:	fa20 f005 	lsr.w	r0, r0, r5
   d6890:	fa01 f204 	lsl.w	r2, r1, r4
   d6894:	ea40 0002 	orr.w	r0, r0, r2
   d6898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d689c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d68a0:	f141 0100 	adc.w	r1, r1, #0
   d68a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d68a8:	bf08      	it	eq
   d68aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d68ae:	bd70      	pop	{r4, r5, r6, pc}
   d68b0:	f1c4 0520 	rsb	r5, r4, #32
   d68b4:	fa00 f205 	lsl.w	r2, r0, r5
   d68b8:	ea4e 0e02 	orr.w	lr, lr, r2
   d68bc:	fa20 f304 	lsr.w	r3, r0, r4
   d68c0:	fa01 f205 	lsl.w	r2, r1, r5
   d68c4:	ea43 0302 	orr.w	r3, r3, r2
   d68c8:	fa21 f004 	lsr.w	r0, r1, r4
   d68cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d68d0:	fa21 f204 	lsr.w	r2, r1, r4
   d68d4:	ea20 0002 	bic.w	r0, r0, r2
   d68d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d68dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d68e0:	bf08      	it	eq
   d68e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d68e6:	bd70      	pop	{r4, r5, r6, pc}
   d68e8:	f094 0f00 	teq	r4, #0
   d68ec:	d10f      	bne.n	d690e <__aeabi_dmul+0x1c2>
   d68ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d68f2:	0040      	lsls	r0, r0, #1
   d68f4:	eb41 0101 	adc.w	r1, r1, r1
   d68f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d68fc:	bf08      	it	eq
   d68fe:	3c01      	subeq	r4, #1
   d6900:	d0f7      	beq.n	d68f2 <__aeabi_dmul+0x1a6>
   d6902:	ea41 0106 	orr.w	r1, r1, r6
   d6906:	f095 0f00 	teq	r5, #0
   d690a:	bf18      	it	ne
   d690c:	4770      	bxne	lr
   d690e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6912:	0052      	lsls	r2, r2, #1
   d6914:	eb43 0303 	adc.w	r3, r3, r3
   d6918:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d691c:	bf08      	it	eq
   d691e:	3d01      	subeq	r5, #1
   d6920:	d0f7      	beq.n	d6912 <__aeabi_dmul+0x1c6>
   d6922:	ea43 0306 	orr.w	r3, r3, r6
   d6926:	4770      	bx	lr
   d6928:	ea94 0f0c 	teq	r4, ip
   d692c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6930:	bf18      	it	ne
   d6932:	ea95 0f0c 	teqne	r5, ip
   d6936:	d00c      	beq.n	d6952 <__aeabi_dmul+0x206>
   d6938:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d693c:	bf18      	it	ne
   d693e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6942:	d1d1      	bne.n	d68e8 <__aeabi_dmul+0x19c>
   d6944:	ea81 0103 	eor.w	r1, r1, r3
   d6948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d694c:	f04f 0000 	mov.w	r0, #0
   d6950:	bd70      	pop	{r4, r5, r6, pc}
   d6952:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6956:	bf06      	itte	eq
   d6958:	4610      	moveq	r0, r2
   d695a:	4619      	moveq	r1, r3
   d695c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6960:	d019      	beq.n	d6996 <__aeabi_dmul+0x24a>
   d6962:	ea94 0f0c 	teq	r4, ip
   d6966:	d102      	bne.n	d696e <__aeabi_dmul+0x222>
   d6968:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d696c:	d113      	bne.n	d6996 <__aeabi_dmul+0x24a>
   d696e:	ea95 0f0c 	teq	r5, ip
   d6972:	d105      	bne.n	d6980 <__aeabi_dmul+0x234>
   d6974:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6978:	bf1c      	itt	ne
   d697a:	4610      	movne	r0, r2
   d697c:	4619      	movne	r1, r3
   d697e:	d10a      	bne.n	d6996 <__aeabi_dmul+0x24a>
   d6980:	ea81 0103 	eor.w	r1, r1, r3
   d6984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6988:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d698c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6990:	f04f 0000 	mov.w	r0, #0
   d6994:	bd70      	pop	{r4, r5, r6, pc}
   d6996:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d699a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d699e:	bd70      	pop	{r4, r5, r6, pc}

000d69a0 <__aeabi_ddiv>:
   d69a0:	b570      	push	{r4, r5, r6, lr}
   d69a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d69a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d69aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d69ae:	bf1d      	ittte	ne
   d69b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d69b4:	ea94 0f0c 	teqne	r4, ip
   d69b8:	ea95 0f0c 	teqne	r5, ip
   d69bc:	f000 f8a7 	bleq	d6b0e <__aeabi_ddiv+0x16e>
   d69c0:	eba4 0405 	sub.w	r4, r4, r5
   d69c4:	ea81 0e03 	eor.w	lr, r1, r3
   d69c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d69cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d69d0:	f000 8088 	beq.w	d6ae4 <__aeabi_ddiv+0x144>
   d69d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d69d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d69dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d69e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d69e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d69e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d69ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d69f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d69f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d69f8:	429d      	cmp	r5, r3
   d69fa:	bf08      	it	eq
   d69fc:	4296      	cmpeq	r6, r2
   d69fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6a02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6a06:	d202      	bcs.n	d6a0e <__aeabi_ddiv+0x6e>
   d6a08:	085b      	lsrs	r3, r3, #1
   d6a0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a0e:	1ab6      	subs	r6, r6, r2
   d6a10:	eb65 0503 	sbc.w	r5, r5, r3
   d6a14:	085b      	lsrs	r3, r3, #1
   d6a16:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6a1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6a22:	ebb6 0e02 	subs.w	lr, r6, r2
   d6a26:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6a2a:	bf22      	ittt	cs
   d6a2c:	1ab6      	subcs	r6, r6, r2
   d6a2e:	4675      	movcs	r5, lr
   d6a30:	ea40 000c 	orrcs.w	r0, r0, ip
   d6a34:	085b      	lsrs	r3, r3, #1
   d6a36:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a3a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6a3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6a42:	bf22      	ittt	cs
   d6a44:	1ab6      	subcs	r6, r6, r2
   d6a46:	4675      	movcs	r5, lr
   d6a48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6a4c:	085b      	lsrs	r3, r3, #1
   d6a4e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a52:	ebb6 0e02 	subs.w	lr, r6, r2
   d6a56:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6a5a:	bf22      	ittt	cs
   d6a5c:	1ab6      	subcs	r6, r6, r2
   d6a5e:	4675      	movcs	r5, lr
   d6a60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6a64:	085b      	lsrs	r3, r3, #1
   d6a66:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a6a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6a6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6a72:	bf22      	ittt	cs
   d6a74:	1ab6      	subcs	r6, r6, r2
   d6a76:	4675      	movcs	r5, lr
   d6a78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6a7c:	ea55 0e06 	orrs.w	lr, r5, r6
   d6a80:	d018      	beq.n	d6ab4 <__aeabi_ddiv+0x114>
   d6a82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6a86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6a8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6a8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6a92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6a96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6a9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6a9e:	d1c0      	bne.n	d6a22 <__aeabi_ddiv+0x82>
   d6aa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6aa4:	d10b      	bne.n	d6abe <__aeabi_ddiv+0x11e>
   d6aa6:	ea41 0100 	orr.w	r1, r1, r0
   d6aaa:	f04f 0000 	mov.w	r0, #0
   d6aae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6ab2:	e7b6      	b.n	d6a22 <__aeabi_ddiv+0x82>
   d6ab4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ab8:	bf04      	itt	eq
   d6aba:	4301      	orreq	r1, r0
   d6abc:	2000      	moveq	r0, #0
   d6abe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6ac2:	bf88      	it	hi
   d6ac4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6ac8:	f63f aeaf 	bhi.w	d682a <__aeabi_dmul+0xde>
   d6acc:	ebb5 0c03 	subs.w	ip, r5, r3
   d6ad0:	bf04      	itt	eq
   d6ad2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6ad6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6ada:	f150 0000 	adcs.w	r0, r0, #0
   d6ade:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6ae2:	bd70      	pop	{r4, r5, r6, pc}
   d6ae4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6ae8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6aec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6af0:	bfc2      	ittt	gt
   d6af2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6af6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6afa:	bd70      	popgt	{r4, r5, r6, pc}
   d6afc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b00:	f04f 0e00 	mov.w	lr, #0
   d6b04:	3c01      	subs	r4, #1
   d6b06:	e690      	b.n	d682a <__aeabi_dmul+0xde>
   d6b08:	ea45 0e06 	orr.w	lr, r5, r6
   d6b0c:	e68d      	b.n	d682a <__aeabi_dmul+0xde>
   d6b0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6b12:	ea94 0f0c 	teq	r4, ip
   d6b16:	bf08      	it	eq
   d6b18:	ea95 0f0c 	teqeq	r5, ip
   d6b1c:	f43f af3b 	beq.w	d6996 <__aeabi_dmul+0x24a>
   d6b20:	ea94 0f0c 	teq	r4, ip
   d6b24:	d10a      	bne.n	d6b3c <__aeabi_ddiv+0x19c>
   d6b26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6b2a:	f47f af34 	bne.w	d6996 <__aeabi_dmul+0x24a>
   d6b2e:	ea95 0f0c 	teq	r5, ip
   d6b32:	f47f af25 	bne.w	d6980 <__aeabi_dmul+0x234>
   d6b36:	4610      	mov	r0, r2
   d6b38:	4619      	mov	r1, r3
   d6b3a:	e72c      	b.n	d6996 <__aeabi_dmul+0x24a>
   d6b3c:	ea95 0f0c 	teq	r5, ip
   d6b40:	d106      	bne.n	d6b50 <__aeabi_ddiv+0x1b0>
   d6b42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6b46:	f43f aefd 	beq.w	d6944 <__aeabi_dmul+0x1f8>
   d6b4a:	4610      	mov	r0, r2
   d6b4c:	4619      	mov	r1, r3
   d6b4e:	e722      	b.n	d6996 <__aeabi_dmul+0x24a>
   d6b50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6b54:	bf18      	it	ne
   d6b56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6b5a:	f47f aec5 	bne.w	d68e8 <__aeabi_dmul+0x19c>
   d6b5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6b62:	f47f af0d 	bne.w	d6980 <__aeabi_dmul+0x234>
   d6b66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6b6a:	f47f aeeb 	bne.w	d6944 <__aeabi_dmul+0x1f8>
   d6b6e:	e712      	b.n	d6996 <__aeabi_dmul+0x24a>

000d6b70 <__gedf2>:
   d6b70:	f04f 3cff 	mov.w	ip, #4294967295
   d6b74:	e006      	b.n	d6b84 <__cmpdf2+0x4>
   d6b76:	bf00      	nop

000d6b78 <__ledf2>:
   d6b78:	f04f 0c01 	mov.w	ip, #1
   d6b7c:	e002      	b.n	d6b84 <__cmpdf2+0x4>
   d6b7e:	bf00      	nop

000d6b80 <__cmpdf2>:
   d6b80:	f04f 0c01 	mov.w	ip, #1
   d6b84:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6b94:	bf18      	it	ne
   d6b96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6b9a:	d01b      	beq.n	d6bd4 <__cmpdf2+0x54>
   d6b9c:	b001      	add	sp, #4
   d6b9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6ba2:	bf0c      	ite	eq
   d6ba4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6ba8:	ea91 0f03 	teqne	r1, r3
   d6bac:	bf02      	ittt	eq
   d6bae:	ea90 0f02 	teqeq	r0, r2
   d6bb2:	2000      	moveq	r0, #0
   d6bb4:	4770      	bxeq	lr
   d6bb6:	f110 0f00 	cmn.w	r0, #0
   d6bba:	ea91 0f03 	teq	r1, r3
   d6bbe:	bf58      	it	pl
   d6bc0:	4299      	cmppl	r1, r3
   d6bc2:	bf08      	it	eq
   d6bc4:	4290      	cmpeq	r0, r2
   d6bc6:	bf2c      	ite	cs
   d6bc8:	17d8      	asrcs	r0, r3, #31
   d6bca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6bce:	f040 0001 	orr.w	r0, r0, #1
   d6bd2:	4770      	bx	lr
   d6bd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6bd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6bdc:	d102      	bne.n	d6be4 <__cmpdf2+0x64>
   d6bde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6be2:	d107      	bne.n	d6bf4 <__cmpdf2+0x74>
   d6be4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6be8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6bec:	d1d6      	bne.n	d6b9c <__cmpdf2+0x1c>
   d6bee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6bf2:	d0d3      	beq.n	d6b9c <__cmpdf2+0x1c>
   d6bf4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6bf8:	4770      	bx	lr
   d6bfa:	bf00      	nop

000d6bfc <__aeabi_cdrcmple>:
   d6bfc:	4684      	mov	ip, r0
   d6bfe:	4610      	mov	r0, r2
   d6c00:	4662      	mov	r2, ip
   d6c02:	468c      	mov	ip, r1
   d6c04:	4619      	mov	r1, r3
   d6c06:	4663      	mov	r3, ip
   d6c08:	e000      	b.n	d6c0c <__aeabi_cdcmpeq>
   d6c0a:	bf00      	nop

000d6c0c <__aeabi_cdcmpeq>:
   d6c0c:	b501      	push	{r0, lr}
   d6c0e:	f7ff ffb7 	bl	d6b80 <__cmpdf2>
   d6c12:	2800      	cmp	r0, #0
   d6c14:	bf48      	it	mi
   d6c16:	f110 0f00 	cmnmi.w	r0, #0
   d6c1a:	bd01      	pop	{r0, pc}

000d6c1c <__aeabi_dcmpeq>:
   d6c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6c20:	f7ff fff4 	bl	d6c0c <__aeabi_cdcmpeq>
   d6c24:	bf0c      	ite	eq
   d6c26:	2001      	moveq	r0, #1
   d6c28:	2000      	movne	r0, #0
   d6c2a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6c2e:	bf00      	nop

000d6c30 <__aeabi_dcmplt>:
   d6c30:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6c34:	f7ff ffea 	bl	d6c0c <__aeabi_cdcmpeq>
   d6c38:	bf34      	ite	cc
   d6c3a:	2001      	movcc	r0, #1
   d6c3c:	2000      	movcs	r0, #0
   d6c3e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6c42:	bf00      	nop

000d6c44 <__aeabi_dcmple>:
   d6c44:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6c48:	f7ff ffe0 	bl	d6c0c <__aeabi_cdcmpeq>
   d6c4c:	bf94      	ite	ls
   d6c4e:	2001      	movls	r0, #1
   d6c50:	2000      	movhi	r0, #0
   d6c52:	f85d fb08 	ldr.w	pc, [sp], #8
   d6c56:	bf00      	nop

000d6c58 <__aeabi_dcmpge>:
   d6c58:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6c5c:	f7ff ffce 	bl	d6bfc <__aeabi_cdrcmple>
   d6c60:	bf94      	ite	ls
   d6c62:	2001      	movls	r0, #1
   d6c64:	2000      	movhi	r0, #0
   d6c66:	f85d fb08 	ldr.w	pc, [sp], #8
   d6c6a:	bf00      	nop

000d6c6c <__aeabi_dcmpgt>:
   d6c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6c70:	f7ff ffc4 	bl	d6bfc <__aeabi_cdrcmple>
   d6c74:	bf34      	ite	cc
   d6c76:	2001      	movcc	r0, #1
   d6c78:	2000      	movcs	r0, #0
   d6c7a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6c7e:	bf00      	nop

000d6c80 <__aeabi_dcmpun>:
   d6c80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6c84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6c88:	d102      	bne.n	d6c90 <__aeabi_dcmpun+0x10>
   d6c8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6c8e:	d10a      	bne.n	d6ca6 <__aeabi_dcmpun+0x26>
   d6c90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6c94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6c98:	d102      	bne.n	d6ca0 <__aeabi_dcmpun+0x20>
   d6c9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6c9e:	d102      	bne.n	d6ca6 <__aeabi_dcmpun+0x26>
   d6ca0:	f04f 0000 	mov.w	r0, #0
   d6ca4:	4770      	bx	lr
   d6ca6:	f04f 0001 	mov.w	r0, #1
   d6caa:	4770      	bx	lr

000d6cac <__aeabi_d2f>:
   d6cac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6cb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6cb4:	bf24      	itt	cs
   d6cb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6cba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6cbe:	d90d      	bls.n	d6cdc <__aeabi_d2f+0x30>
   d6cc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6cc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6cc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6ccc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6cd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6cd4:	bf08      	it	eq
   d6cd6:	f020 0001 	biceq.w	r0, r0, #1
   d6cda:	4770      	bx	lr
   d6cdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6ce0:	d121      	bne.n	d6d26 <__aeabi_d2f+0x7a>
   d6ce2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6ce6:	bfbc      	itt	lt
   d6ce8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6cec:	4770      	bxlt	lr
   d6cee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6cf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6cf6:	f1c2 0218 	rsb	r2, r2, #24
   d6cfa:	f1c2 0c20 	rsb	ip, r2, #32
   d6cfe:	fa10 f30c 	lsls.w	r3, r0, ip
   d6d02:	fa20 f002 	lsr.w	r0, r0, r2
   d6d06:	bf18      	it	ne
   d6d08:	f040 0001 	orrne.w	r0, r0, #1
   d6d0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6d10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6d14:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6d18:	ea40 000c 	orr.w	r0, r0, ip
   d6d1c:	fa23 f302 	lsr.w	r3, r3, r2
   d6d20:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6d24:	e7cc      	b.n	d6cc0 <__aeabi_d2f+0x14>
   d6d26:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6d2a:	d107      	bne.n	d6d3c <__aeabi_d2f+0x90>
   d6d2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6d30:	bf1e      	ittt	ne
   d6d32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6d36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6d3a:	4770      	bxne	lr
   d6d3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6d40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6d44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6d48:	4770      	bx	lr
   d6d4a:	bf00      	nop

000d6d4c <__cxa_atexit>:
   d6d4c:	b510      	push	{r4, lr}
   d6d4e:	4c05      	ldr	r4, [pc, #20]	; (d6d64 <__cxa_atexit+0x18>)
   d6d50:	4613      	mov	r3, r2
   d6d52:	b12c      	cbz	r4, d6d60 <__cxa_atexit+0x14>
   d6d54:	460a      	mov	r2, r1
   d6d56:	4601      	mov	r1, r0
   d6d58:	2002      	movs	r0, #2
   d6d5a:	f3af 8000 	nop.w
   d6d5e:	bd10      	pop	{r4, pc}
   d6d60:	4620      	mov	r0, r4
   d6d62:	bd10      	pop	{r4, pc}
   d6d64:	00000000 	.word	0x00000000

000d6d68 <memcpy>:
   d6d68:	b510      	push	{r4, lr}
   d6d6a:	1e43      	subs	r3, r0, #1
   d6d6c:	440a      	add	r2, r1
   d6d6e:	4291      	cmp	r1, r2
   d6d70:	d004      	beq.n	d6d7c <memcpy+0x14>
   d6d72:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6d76:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6d7a:	e7f8      	b.n	d6d6e <memcpy+0x6>
   d6d7c:	bd10      	pop	{r4, pc}

000d6d7e <memset>:
   d6d7e:	4402      	add	r2, r0
   d6d80:	4603      	mov	r3, r0
   d6d82:	4293      	cmp	r3, r2
   d6d84:	d002      	beq.n	d6d8c <memset+0xe>
   d6d86:	f803 1b01 	strb.w	r1, [r3], #1
   d6d8a:	e7fa      	b.n	d6d82 <memset+0x4>
   d6d8c:	4770      	bx	lr
	...

000d6d90 <srand>:
   d6d90:	b538      	push	{r3, r4, r5, lr}
   d6d92:	4b12      	ldr	r3, [pc, #72]	; (d6ddc <srand+0x4c>)
   d6d94:	681c      	ldr	r4, [r3, #0]
   d6d96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6d98:	4605      	mov	r5, r0
   d6d9a:	b9d3      	cbnz	r3, d6dd2 <srand+0x42>
   d6d9c:	2018      	movs	r0, #24
   d6d9e:	f7fd fe61 	bl	d4a64 <malloc>
   d6da2:	f243 330e 	movw	r3, #13070	; 0x330e
   d6da6:	63a0      	str	r0, [r4, #56]	; 0x38
   d6da8:	8003      	strh	r3, [r0, #0]
   d6daa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6dae:	8043      	strh	r3, [r0, #2]
   d6db0:	f241 2334 	movw	r3, #4660	; 0x1234
   d6db4:	8083      	strh	r3, [r0, #4]
   d6db6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6dba:	80c3      	strh	r3, [r0, #6]
   d6dbc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6dc0:	8103      	strh	r3, [r0, #8]
   d6dc2:	2305      	movs	r3, #5
   d6dc4:	8143      	strh	r3, [r0, #10]
   d6dc6:	230b      	movs	r3, #11
   d6dc8:	8183      	strh	r3, [r0, #12]
   d6dca:	2201      	movs	r2, #1
   d6dcc:	2300      	movs	r3, #0
   d6dce:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6dd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6dd4:	2200      	movs	r2, #0
   d6dd6:	611d      	str	r5, [r3, #16]
   d6dd8:	615a      	str	r2, [r3, #20]
   d6dda:	bd38      	pop	{r3, r4, r5, pc}
   d6ddc:	2003e34c 	.word	0x2003e34c

000d6de0 <strcmp>:
   d6de0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6de4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6de8:	2a01      	cmp	r2, #1
   d6dea:	bf28      	it	cs
   d6dec:	429a      	cmpcs	r2, r3
   d6dee:	d0f7      	beq.n	d6de0 <strcmp>
   d6df0:	1ad0      	subs	r0, r2, r3
   d6df2:	4770      	bx	lr

000d6df4 <strdup>:
   d6df4:	4b02      	ldr	r3, [pc, #8]	; (d6e00 <strdup+0xc>)
   d6df6:	4601      	mov	r1, r0
   d6df8:	6818      	ldr	r0, [r3, #0]
   d6dfa:	f000 b803 	b.w	d6e04 <_strdup_r>
   d6dfe:	bf00      	nop
   d6e00:	2003e34c 	.word	0x2003e34c

000d6e04 <_strdup_r>:
   d6e04:	b570      	push	{r4, r5, r6, lr}
   d6e06:	4606      	mov	r6, r0
   d6e08:	4608      	mov	r0, r1
   d6e0a:	460c      	mov	r4, r1
   d6e0c:	f000 f80d 	bl	d6e2a <strlen>
   d6e10:	1c45      	adds	r5, r0, #1
   d6e12:	4629      	mov	r1, r5
   d6e14:	4630      	mov	r0, r6
   d6e16:	f7fd fe55 	bl	d4ac4 <_malloc_r>
   d6e1a:	4606      	mov	r6, r0
   d6e1c:	b118      	cbz	r0, d6e26 <_strdup_r+0x22>
   d6e1e:	462a      	mov	r2, r5
   d6e20:	4621      	mov	r1, r4
   d6e22:	f7ff ffa1 	bl	d6d68 <memcpy>
   d6e26:	4630      	mov	r0, r6
   d6e28:	bd70      	pop	{r4, r5, r6, pc}

000d6e2a <strlen>:
   d6e2a:	4603      	mov	r3, r0
   d6e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6e30:	2a00      	cmp	r2, #0
   d6e32:	d1fb      	bne.n	d6e2c <strlen+0x2>
   d6e34:	1a18      	subs	r0, r3, r0
   d6e36:	3801      	subs	r0, #1
   d6e38:	4770      	bx	lr

000d6e3a <link_code_end>:
	...

000d6e3c <dynalib_user>:
   d6e3c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d6e4c:	0000 0000                                   ....

000d6e50 <_ZL18accelCalibration_1>:
   d6e50:	b8ea bc29 9817 3e65 be54 bccf 6e6f 6f00     ..)...e>T...on.o
   d6e60:	6666 5400 6172 736e 696d 7373 6f69 206e     ff.Transmission 
   d6e70:	6562 6967 2e6e 2e2e 7700 6972 6974 676e     begin....writing
   d6e80:	2d20 2520 2064 7573 4162 6464 6572 7373      - %d subAddress
   d6e90:	7700 6972 6974 676e 2d20 2520 2064 6164     .writing - %d da
   d6ea0:	6174 5400 6172 736e 696d 7373 6f69 206e     ta.Transmission 
   d6eb0:	7573 6363 7365 6673 6c75 0021 7254 6e61     successful!.Tran
   d6ec0:	6d73 7369 6973 6e6f 6620 6961 656c 2e64     smission failed.
   d6ed0:	4100 2073 6957 6572 652e 646e 7254 6e61     .As Wire.endTran
   d6ee0:	6d73 7369 6973 6e6f 7220 7465 7275 736e     smission returns
   d6ef0:	6120 6e20 6e6f 7a2d 7265 206f 6176 756c      a non-zero valu
   d6f00:	2065 2e69 2e65 202c 6425 6300 6e6f 6174     e i.e., %d.conta
   d6f10:	6e69 7265 6557 6769 7468 5300 7274 6e69     inerWeight.Strin
   d6f20:	5767 6965 6867 0074 7564 706d 7473 7265     gWeight.dumpster
   d6f30:	6c2d 616f 6964 676e 6c00 6465 2500 0066     -loading.led.%f.

000d6f40 <_ZL17gyroCalibration_1>:
   d6f40:	5fea 4059 cab9 3e5f c748 bf91               ._Y@.._>H...

000d6f4c <_ZTVN5spark13EthernetClassE>:
	...
   d6f54:	4b43 000d 4b39 000d 4b2f 000d 4b25 000d     CK..9K../K..%K..
   d6f64:	4b19 000d 4b0d 000d 4b01 000d 4af9 000d     .K...K...K...J..
   d6f74:	4aef 000d 4ae5 000d 5c51 000d 6162 6475     .J...J..Q\..baud
   d6f84:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6f94:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6fa4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6fb4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6fc4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6fd4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6fe4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6ff4:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d7004:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d7014:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d7024:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d7034:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d7044:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d7054:	696e 0063 6c61 006c 005a 2b25 3330 3a64     nic.all.Z.%+03d:
   d7064:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d7074:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d7084:	0000 0000                                   ....

000d7088 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7090:	4fd5 000d 4fdb 000d 501f 000d 4fe9 000d     .O...O...P...O..
   d70a0:	4fd7 000d                                   .O..

000d70a4 <_ZTV9IPAddress>:
	...
   d70ac:	55c5 000d 55b5 000d 55b7 000d               .U...U...U..

000d70b8 <_ZTV9USBSerial>:
	...
   d70c0:	569d 000d 56ed 000d 56fb 000d 4d05 000d     .V...V...V...M..
   d70d0:	56d9 000d 569f 000d 56b5 000d 56e7 000d     .V...V...V...V..
   d70e0:	56cb 000d 5699 000d                         .V...V..

000d70e8 <_ZTVN5spark13CellularClassE>:
	...
   d70f0:	5807 000d 57fd 000d 57f3 000d 57a9 000d     .X...W...W...W..
   d7100:	57e7 000d 57db 000d 57cf 000d 57c7 000d     .W...W...W...W..
   d7110:	57bd 000d 57b3 000d 5c51 000d               .W...W..Q\..

000d711c <_ZTV11USARTSerial>:
	...
   d7124:	5841 000d 5891 000d 589f 000d 4d05 000d     AX...X...X...M..
   d7134:	5855 000d 5877 000d 5863 000d 588b 000d     UX..wX..cX...X..
   d7144:	5843 000d 5847 000d                         CX..GX..

000d714c <_ZTV7TwoWire>:
	...
   d7154:	596d 000d 59b7 000d 598f 000d 596f 000d     mY...Y...Y..oY..
   d7164:	5997 000d 599f 000d 59a7 000d 59af 000d     .Y...Y...Y...Y..

000d7174 <_ZTVN5spark9MeshClassE>:
	...
   d717c:	5acd 000d 5ac3 000d 5ab9 000d 5aaf 000d     .Z...Z...Z...Z..
   d718c:	5aa3 000d 5a97 000d 5a8b 000d 5a83 000d     .Z...Z...Z...Z..
   d719c:	5a79 000d 5a6f 000d 5c51 000d               yZ..oZ..Q\..

000d71a8 <_ZTVN5spark12NetworkClassE>:
	...
   d71b0:	5be9 000d 5bf3 000d 5bfd 000d 5c07 000d     .[...[...[...\..
   d71c0:	5c11 000d 5c1d 000d 5c29 000d 5c35 000d     .\...\..)\..5\..
   d71d0:	5c3d 000d 5c47 000d 5c51 000d               =\..G\..Q\..

000d71dc <_ZSt7nothrow>:
   d71dc:	0000 0000 7173 7472 0000 0000               ....sqrt....

000d71e8 <__sf_fake_stdin>:
	...

000d7208 <__sf_fake_stdout>:
	...

000d7228 <__sf_fake_stderr>:
	...
   d7248:	0043                                        C.

000d724a <link_const_variable_data_end>:
	...

000d724c <link_constructors_location>:
   d724c:	000d4609 	.word	0x000d4609
   d7250:	000d4b4d 	.word	0x000d4b4d
   d7254:	000d4b7d 	.word	0x000d4b7d
   d7258:	000d4cdd 	.word	0x000d4cdd
   d725c:	000d4e41 	.word	0x000d4e41
   d7260:	000d4e51 	.word	0x000d4e51
   d7264:	000d4ea9 	.word	0x000d4ea9
   d7268:	000d5811 	.word	0x000d5811
   d726c:	000d5b99 	.word	0x000d5b99
   d7270:	000d5d1d 	.word	0x000d5d1d
   d7274:	000d5ee9 	.word	0x000d5ee9
   d7278:	000d5f6d 	.word	0x000d5f6d
   d727c:	000d6031 	.word	0x000d6031
   d7280:	000d60f5 	.word	0x000d60f5

000d7284 <link_constructors_end>:
	...
