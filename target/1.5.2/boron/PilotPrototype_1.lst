
c:/Users/adams/OneDrive/Documents/GitHub/ParticleWorkbench/PilotPrototype_1/target/1.5.2/boron/PilotPrototype_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003bf0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7c10  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e158  000d7c14  0001e158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000628  2003e1c8  2003e1c8  0002e1c8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7c84  000d7c84  00027c84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7cac  000d7cac  00027cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000de309  00000000  00000000  00027cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001121e  00000000  00000000  00105fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f36f  00000000  00000000  001171d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002560  00000000  00000000  00136546  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004920  00000000  00000000  00138aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000357bf  00000000  00000000  0013d3c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028257  00000000  00000000  00172b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108e4c  00000000  00000000  0019addc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d2d8  00000000  00000000  002a3c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fb2d 	bl	d7690 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fb32 	bl	d76a6 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e158 	.word	0x2003e158
   d404c:	000d7c14 	.word	0x000d7c14
   d4050:	2003e1c8 	.word	0x2003e1c8
   d4054:	2003e1c8 	.word	0x2003e1c8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 f939 	bl	d52d4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7c04 	.word	0x000d7c04
   d4084:	000d7bcc 	.word	0x000d7bcc

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bad0 	b.w	d462c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fb6f 	bl	d4770 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 b8df 	b.w	d5258 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 be8f 	b.w	d4dbc <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 be95 	b.w	d4dcc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 be93 	b.w	d4dcc <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z9ledToggle6String>:
        }
    }
}

/*========== Toggle the LED on or off depending on the given command ==========*/
int ledToggle(String command) {
   d40b8:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ba:	490d      	ldr	r1, [pc, #52]	; (d40f0 <_Z9ledToggle6String+0x38>)
   d40bc:	4605      	mov	r5, r0
   d40be:	f000 ff97 	bl	d4ff0 <_ZNK6String6equalsEPKc>
    if (command == "on") {
   d40c2:	4604      	mov	r4, r0
   d40c4:	b128      	cbz	r0, d40d2 <_Z9ledToggle6String+0x1a>
        digitalWrite(led, HIGH);
   d40c6:	2101      	movs	r1, #1
   d40c8:	2007      	movs	r0, #7
   d40ca:	f002 f824 	bl	d6116 <digitalWrite>
   d40ce:	2001      	movs	r0, #1
   d40d0:	bd38      	pop	{r3, r4, r5, pc}
   d40d2:	4908      	ldr	r1, [pc, #32]	; (d40f4 <_Z9ledToggle6String+0x3c>)
   d40d4:	4628      	mov	r0, r5
   d40d6:	f000 ff8b 	bl	d4ff0 <_ZNK6String6equalsEPKc>
        return 1;
    }
    else if (command == "off") {
   d40da:	b128      	cbz	r0, d40e8 <_Z9ledToggle6String+0x30>
        digitalWrite(led, LOW);
   d40dc:	4621      	mov	r1, r4
   d40de:	2007      	movs	r0, #7
   d40e0:	f002 f819 	bl	d6116 <digitalWrite>
        return 0;
   d40e4:	4620      	mov	r0, r4
   d40e6:	bd38      	pop	{r3, r4, r5, pc}
    }
    else {
        return -1;
   d40e8:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
   d40ec:	bd38      	pop	{r3, r4, r5, pc}
   d40ee:	bf00      	nop
   d40f0:	000d7790 	.word	0x000d7790
   d40f4:	000d7793 	.word	0x000d7793

000d40f8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40f8:	b510      	push	{r4, lr}
   d40fa:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40fc:	6800      	ldr	r0, [r0, #0]
   d40fe:	b108      	cbz	r0, d4104 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4100:	f000 fe64 	bl	d4dcc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4104:	4620      	mov	r0, r4
   d4106:	bd10      	pop	{r4, pc}

000d4108 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4108:	6803      	ldr	r3, [r0, #0]
   d410a:	b2c9      	uxtb	r1, r1
   d410c:	689b      	ldr	r3, [r3, #8]
   d410e:	4718      	bx	r3

000d4110 <_Z12configSensoriii>:
float avgAccel[3];          // Average of all values in accelBuffer
float avgGyro[3];           // Average of all values in gyroBuffer
float angles[3];            // Angles about each axis determined from accelerometer

/*========== Configure MPU-6050 ==========*/
void configSensor(int slaveAddress, int subAddress, int data){
   d4110:	b570      	push	{r4, r5, r6, lr}
   d4112:	4606      	mov	r6, r0
   d4114:	4614      	mov	r4, r2
   d4116:	460d      	mov	r5, r1
    Wire.beginTransmission(slaveAddress);
   d4118:	f002 f848 	bl	d61ac <_Z19__fetch_global_Wirev>
   d411c:	4631      	mov	r1, r6
   d411e:	f001 fe47 	bl	d5db0 <_ZN7TwoWire17beginTransmissionEi>
    Serial.print("Transmission begin...");
   d4122:	f001 fcc7 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d4126:	4929      	ldr	r1, [pc, #164]	; (d41cc <_Z12configSensoriii+0xbc>)
   d4128:	f000 ffbe 	bl	d50a8 <_ZN5Print5printEPKc>
    Serial.println("");
   d412c:	f001 fcc2 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d4130:	4927      	ldr	r1, [pc, #156]	; (d41d0 <_Z12configSensoriii+0xc0>)
   d4132:	f000 ffcc 	bl	d50ce <_ZN5Print7printlnEPKc>
    Wire.write(subAddress);
   d4136:	f002 f839 	bl	d61ac <_Z19__fetch_global_Wirev>
   d413a:	4629      	mov	r1, r5
   d413c:	f7ff ffe4 	bl	d4108 <_ZN7TwoWire5writeEi>
    Serial.printf("writing - %d subAddress", subAddress);
   d4140:	f001 fcb8 	bl	d5ab4 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4144:	462b      	mov	r3, r5
   d4146:	4a23      	ldr	r2, [pc, #140]	; (d41d4 <_Z12configSensoriii+0xc4>)
   d4148:	2100      	movs	r1, #0
   d414a:	f000 ffea 	bl	d5122 <_ZN5Print11printf_implEbPKcz>
    Serial.println("");
   d414e:	f001 fcb1 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d4152:	491f      	ldr	r1, [pc, #124]	; (d41d0 <_Z12configSensoriii+0xc0>)
   d4154:	f000 ffbb 	bl	d50ce <_ZN5Print7printlnEPKc>
    Wire.write(data);
   d4158:	f002 f828 	bl	d61ac <_Z19__fetch_global_Wirev>
   d415c:	4621      	mov	r1, r4
   d415e:	f7ff ffd3 	bl	d4108 <_ZN7TwoWire5writeEi>
    Serial.printf("writing - %d data", data);
   d4162:	f001 fca7 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d4166:	4623      	mov	r3, r4
   d4168:	4a1b      	ldr	r2, [pc, #108]	; (d41d8 <_Z12configSensoriii+0xc8>)
    Serial.println("");
    result = Wire.endTransmission(true);
   d416a:	4c1c      	ldr	r4, [pc, #112]	; (d41dc <_Z12configSensoriii+0xcc>)
   d416c:	2100      	movs	r1, #0
   d416e:	f000 ffd8 	bl	d5122 <_ZN5Print11printf_implEbPKcz>
    Wire.write(subAddress);
    Serial.printf("writing - %d subAddress", subAddress);
    Serial.println("");
    Wire.write(data);
    Serial.printf("writing - %d data", data);
    Serial.println("");
   d4172:	f001 fc9f 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d4176:	4916      	ldr	r1, [pc, #88]	; (d41d0 <_Z12configSensoriii+0xc0>)
   d4178:	f000 ffa9 	bl	d50ce <_ZN5Print7printlnEPKc>
    result = Wire.endTransmission(true);
   d417c:	f002 f816 	bl	d61ac <_Z19__fetch_global_Wirev>
   d4180:	2101      	movs	r1, #1
   d4182:	f001 fe18 	bl	d5db6 <_ZN7TwoWire15endTransmissionEh>
   d4186:	6020      	str	r0, [r4, #0]
    if(!result){
   d4188:	b928      	cbnz	r0, d4196 <_Z12configSensoriii+0x86>
        Serial.print("Transmission successful!");
   d418a:	f001 fc93 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d418e:	4914      	ldr	r1, [pc, #80]	; (d41e0 <_Z12configSensoriii+0xd0>)
   d4190:	f000 ff8a 	bl	d50a8 <_ZN5Print5printEPKc>
   d4194:	e010      	b.n	d41b8 <_Z12configSensoriii+0xa8>
        Serial.println("");
    }
    else{
        Serial.print("Transmission failed.");
   d4196:	f001 fc8d 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d419a:	4912      	ldr	r1, [pc, #72]	; (d41e4 <_Z12configSensoriii+0xd4>)
   d419c:	f000 ff84 	bl	d50a8 <_ZN5Print5printEPKc>
        Serial.println("");
   d41a0:	f001 fc88 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d41a4:	490a      	ldr	r1, [pc, #40]	; (d41d0 <_Z12configSensoriii+0xc0>)
   d41a6:	f000 ff92 	bl	d50ce <_ZN5Print7printlnEPKc>
        Serial.printf("As Wire.endTransmission returns a non-zero value i.e., %d", result);
   d41aa:	f001 fc83 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d41ae:	6823      	ldr	r3, [r4, #0]
   d41b0:	4a0d      	ldr	r2, [pc, #52]	; (d41e8 <_Z12configSensoriii+0xd8>)
   d41b2:	2100      	movs	r1, #0
   d41b4:	f000 ffb5 	bl	d5122 <_ZN5Print11printf_implEbPKcz>
        Serial.println("");
   d41b8:	f001 fc7c 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d41bc:	4904      	ldr	r1, [pc, #16]	; (d41d0 <_Z12configSensoriii+0xc0>)
   d41be:	f000 ff86 	bl	d50ce <_ZN5Print7printlnEPKc>
    }
    delay(200);
   d41c2:	20c8      	movs	r0, #200	; 0xc8
}
   d41c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Serial.print("Transmission failed.");
        Serial.println("");
        Serial.printf("As Wire.endTransmission returns a non-zero value i.e., %d", result);
        Serial.println("");
    }
    delay(200);
   d41c8:	f000 bff8 	b.w	d51bc <delay>
   d41cc:	000d7797 	.word	0x000d7797
   d41d0:	000d7964 	.word	0x000d7964
   d41d4:	000d77ad 	.word	0x000d77ad
   d41d8:	000d77c5 	.word	0x000d77c5
   d41dc:	2003e324 	.word	0x2003e324
   d41e0:	000d77d7 	.word	0x000d77d7
   d41e4:	000d77f0 	.word	0x000d77f0
   d41e8:	000d7805 	.word	0x000d7805

000d41ec <_Z10sensorReadiPfRfS_>:
}

/*========== Perform Accelerometer, Temperature, and Gyroscope data read from MPU-6050 ==========*/
int sensorRead(int slaveAddress, float *accelData, float &temp, float *gyroData){
   d41ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d41f0:	ed2d 8b02 	vpush	{d8}
   d41f4:	4605      	mov	r5, r0
   d41f6:	b083      	sub	sp, #12
   d41f8:	469a      	mov	sl, r3
   d41fa:	460c      	mov	r4, r1
   d41fc:	4693      	mov	fp, r2
    Wire.beginTransmission(slaveAddress);           // Address desired slave device to read from                
   d41fe:	f001 ffd5 	bl	d61ac <_Z19__fetch_global_Wirev>
   d4202:	4629      	mov	r1, r5
   d4204:	f001 fdd4 	bl	d5db0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(ACCEL_REG_ADDR);                     // Indicate target address for reading in data
   d4208:	f001 ffd0 	bl	d61ac <_Z19__fetch_global_Wirev>
   d420c:	213b      	movs	r1, #59	; 0x3b
   d420e:	f7ff ff7b 	bl	d4108 <_ZN7TwoWire5writeEi>
    Wire.endTransmission(false);                    // Indicate we will send a restart signal (next line) to read in data
   d4212:	f001 ffcb 	bl	d61ac <_Z19__fetch_global_Wirev>
   d4216:	2100      	movs	r1, #0
   d4218:	f001 fdcd 	bl	d5db6 <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(slaveAddress, 14, true);       // request 14 bytes of data
   d421c:	f001 ffc6 	bl	d61ac <_Z19__fetch_global_Wirev>
   d4220:	b2e9      	uxtb	r1, r5
   d4222:	220e      	movs	r2, #14
   d4224:	2301      	movs	r3, #1
   d4226:	f001 fdad 	bl	d5d84 <_ZN7TwoWire11requestFromEhjh>

    // Read in MSB, bitshift by eight, switch positions with LSB, and store in temporary variable
    int xAccRaw = (int) Wire.read()<<8 | Wire.read();  
   d422a:	f001 ffbf 	bl	d61ac <_Z19__fetch_global_Wirev>
   d422e:	6803      	ldr	r3, [r0, #0]
   d4230:	695b      	ldr	r3, [r3, #20]
   d4232:	4798      	blx	r3
   d4234:	4680      	mov	r8, r0
   d4236:	f001 ffb9 	bl	d61ac <_Z19__fetch_global_Wirev>
   d423a:	6803      	ldr	r3, [r0, #0]
   d423c:	695b      	ldr	r3, [r3, #20]
   d423e:	4798      	blx	r3
   d4240:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
    int yAccRaw = (int) Wire.read()<<8 | Wire.read();
   d4244:	f001 ffb2 	bl	d61ac <_Z19__fetch_global_Wirev>
   d4248:	6803      	ldr	r3, [r0, #0]
   d424a:	695b      	ldr	r3, [r3, #20]
   d424c:	4798      	blx	r3
   d424e:	4607      	mov	r7, r0
   d4250:	f001 ffac 	bl	d61ac <_Z19__fetch_global_Wirev>
   d4254:	6803      	ldr	r3, [r0, #0]
   d4256:	695b      	ldr	r3, [r3, #20]
   d4258:	4798      	blx	r3
   d425a:	ea40 2707 	orr.w	r7, r0, r7, lsl #8
    int zAccRaw = (int) Wire.read()<<8 | Wire.read();
   d425e:	f001 ffa5 	bl	d61ac <_Z19__fetch_global_Wirev>
   d4262:	6803      	ldr	r3, [r0, #0]
   d4264:	695b      	ldr	r3, [r3, #20]
   d4266:	4798      	blx	r3
   d4268:	4606      	mov	r6, r0
   d426a:	f001 ff9f 	bl	d61ac <_Z19__fetch_global_Wirev>
   d426e:	6803      	ldr	r3, [r0, #0]
   d4270:	695b      	ldr	r3, [r3, #20]
   d4272:	4798      	blx	r3
   d4274:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
   d4278:	f001 ff98 	bl	d61ac <_Z19__fetch_global_Wirev>
   d427c:	6803      	ldr	r3, [r0, #0]
   d427e:	695b      	ldr	r3, [r3, #20]
   d4280:	4798      	blx	r3
   d4282:	4605      	mov	r5, r0
   d4284:	f001 ff92 	bl	d61ac <_Z19__fetch_global_Wirev>
   d4288:	6803      	ldr	r3, [r0, #0]
   d428a:	695b      	ldr	r3, [r3, #20]
   d428c:	4798      	blx	r3
   d428e:	ea40 2305 	orr.w	r3, r0, r5, lsl #8
   d4292:	ee08 3a10 	vmov	s16, r3
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d4296:	f001 ff89 	bl	d61ac <_Z19__fetch_global_Wirev>
   d429a:	6803      	ldr	r3, [r0, #0]
   d429c:	695b      	ldr	r3, [r3, #20]
   d429e:	4798      	blx	r3
   d42a0:	4605      	mov	r5, r0
   d42a2:	f001 ff83 	bl	d61ac <_Z19__fetch_global_Wirev>
   d42a6:	6803      	ldr	r3, [r0, #0]
   d42a8:	695b      	ldr	r3, [r3, #20]
   d42aa:	4798      	blx	r3
   d42ac:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d42b0:	f001 ff7c 	bl	d61ac <_Z19__fetch_global_Wirev>
   d42b4:	6803      	ldr	r3, [r0, #0]
   d42b6:	695b      	ldr	r3, [r3, #20]
   d42b8:	4798      	blx	r3
   d42ba:	4681      	mov	r9, r0
   d42bc:	f001 ff76 	bl	d61ac <_Z19__fetch_global_Wirev>
   d42c0:	6803      	ldr	r3, [r0, #0]
   d42c2:	695b      	ldr	r3, [r3, #20]
   d42c4:	4798      	blx	r3
   d42c6:	ea40 2209 	orr.w	r2, r0, r9, lsl #8
   d42ca:	9201      	str	r2, [sp, #4]
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d42cc:	f001 ff6e 	bl	d61ac <_Z19__fetch_global_Wirev>
   d42d0:	6803      	ldr	r3, [r0, #0]
   d42d2:	695b      	ldr	r3, [r3, #20]
   d42d4:	4798      	blx	r3
   d42d6:	4681      	mov	r9, r0
   d42d8:	f001 ff68 	bl	d61ac <_Z19__fetch_global_Wirev>
   d42dc:	6803      	ldr	r3, [r0, #0]
   d42de:	695b      	ldr	r3, [r3, #20]
   d42e0:	4798      	blx	r3
   d42e2:	ea40 2909 	orr.w	r9, r0, r9, lsl #8

    result = Wire.endTransmission(true);
   d42e6:	f001 ff61 	bl	d61ac <_Z19__fetch_global_Wirev>
   d42ea:	2101      	movs	r1, #1
   d42ec:	f001 fd63 	bl	d5db6 <_ZN7TwoWire15endTransmissionEh>

    // Determine if raw value is intended to be read as positive or negative
    // Accelerometer
    if(xAccRaw < 32768){
   d42f0:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
        xAccRaw = -xAccRaw;
   d42f4:	bfb4      	ite	lt
   d42f6:	f1c8 0800 	rsblt	r8, r8, #0
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
   d42fa:	f5c8 3880 	rsbge	r8, r8, #65536	; 0x10000
    }
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d42fe:	ee07 8a90 	vmov	s15, r8
   d4302:	eddf 6a4c 	vldr	s13, [pc, #304]	; d4434 <_Z10sensorReadiPfRfS_+0x248>
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();

    result = Wire.endTransmission(true);
   d4306:	4b4c      	ldr	r3, [pc, #304]	; (d4438 <_Z10sensorReadiPfRfS_+0x24c>)

    // Determine if raw value is intended to be read as positive or negative
    // Accelerometer
    if(xAccRaw < 32768){
   d4308:	9a01      	ldr	r2, [sp, #4]
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();

    result = Wire.endTransmission(true);
   d430a:	6018      	str	r0, [r3, #0]
        xAccRaw = -xAccRaw;
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
    }
    if(yAccRaw < 32768){
   d430c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    }
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d4310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
    }
    if(yAccRaw < 32768){
        yAccRaw = -yAccRaw;
   d4314:	bfb4      	ite	lt
   d4316:	427f      	neglt	r7, r7
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
   d4318:	f5c7 3780 	rsbge	r7, r7, #65536	; 0x10000
    }
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d431c:	ee27 7a26 	vmul.f32	s14, s14, s13
        yAccRaw = -yAccRaw;
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
    }
    if(zAccRaw < 32768){
   d4320:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4324:	ee07 7a90 	vmov	s15, r7
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
    }
    if(zAccRaw < 32768){
        zAccRaw = -zAccRaw;
   d4328:	bfb4      	ite	lt
   d432a:	4276      	neglt	r6, r6
    }
    else{
        zAccRaw = -(zAccRaw - 65536);
   d432c:	f5c6 3680 	rsbge	r6, r6, #65536	; 0x10000
    }
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d4330:	ed84 7a00 	vstr	s14, [r4]
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4338:	ee07 6a90 	vmov	s15, r6
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d433c:	ee27 7a26 	vmul.f32	s14, s14, s13
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4344:	ed84 7a01 	vstr	s14, [r4, #4]
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4348:	ee67 7aa6 	vmul.f32	s15, s15, s13
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d434c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; d443c <_Z10sensorReadiPfRfS_+0x250>
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4350:	edc4 7a02 	vstr	s15, [r4, #8]
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4354:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    else{
        zAccRaw = -(zAccRaw - 65536);
    }

    // Gyroscope
    if(xGyrRaw < 32768){
   d4358:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d435c:	eec8 7a07 	vdiv.f32	s15, s16, s14
        zAccRaw = -(zAccRaw - 65536);
    }

    // Gyroscope
    if(xGyrRaw < 32768){
        xGyrRaw = -xGyrRaw;
   d4360:	bfb4      	ite	lt
   d4362:	426d      	neglt	r5, r5
    }
    else{
        xGyrRaw = -(xGyrRaw - 65536);
   d4364:	f5c5 3580 	rsbge	r5, r5, #65536	; 0x10000
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d4368:	426d      	negs	r5, r5
        xGyrRaw = -xGyrRaw;
    }
    else{
        xGyrRaw = -(xGyrRaw - 65536);
    }
    if(yGyrRaw < 32768){
   d436a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        yGyrRaw = -yGyrRaw;
   d436e:	bfb4      	ite	lt
   d4370:	4252      	neglt	r2, r2
    }
    else{
        yGyrRaw = -(yGyrRaw - 65536);
   d4372:	f5c2 3280 	rsbge	r2, r2, #65536	; 0x10000
    }
    if(zGyrRaw < 32768){
   d4376:	f5b9 4f00 	cmp.w	r9, #32768	; 0x8000
        zGyrRaw = -zGyrRaw;
   d437a:	bfb4      	ite	lt
   d437c:	f1c9 0900 	rsblt	r9, r9, #0
    }
    else{
        zGyrRaw = -(zGyrRaw - 65536);
   d4380:	f5c9 3980 	rsbge	r9, r9, #65536	; 0x10000
   d4384:	9301      	str	r3, [sp, #4]
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4386:	ed9f 7a2e 	vldr	s14, [pc, #184]	; d4440 <_Z10sensorReadiPfRfS_+0x254>
   d438a:	ee77 7a87 	vadd.f32	s15, s15, s14
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d438e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; d4444 <_Z10sensorReadiPfRfS_+0x258>
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4392:	edcb 7a00 	vstr	s15, [fp]
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d4396:	ee07 5a90 	vmov	s15, r5
   d439a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d439e:	eec7 6a87 	vdiv.f32	s13, s15, s14
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d43a2:	ee07 2a90 	vmov	s15, r2
   d43a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d43aa:	edca 6a00 	vstr	s13, [sl]
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d43ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;
   d43b2:	ee07 9a90 	vmov	s15, r9
   d43b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d43ba:	edca 6a01 	vstr	s13, [sl, #4]
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;
   d43be:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d43c2:	edca 6a02 	vstr	s13, [sl, #8]

    // Calibrate Data
    accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
   d43c6:	edd4 7a01 	vldr	s15, [r4, #4]
   d43ca:	edd4 6a00 	vldr	s13, [r4]
   d43ce:	ed94 7a02 	vldr	s14, [r4, #8]
   d43d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
   d43d6:	eee6 7aa6 	vfma.f32	s15, s13, s13
   d43da:	eee7 7a07 	vfma.f32	s15, s14, s14
   d43de:	ee17 0a90 	vmov	r0, s15
   d43e2:	f002 fdcb 	bl	d6f7c <__aeabi_f2d>
   d43e6:	ec41 0b10 	vmov	d0, r0, r1
   d43ea:	f002 f873 	bl	d64d4 <sqrt>
   d43ee:	ec51 0b10 	vmov	r0, r1, d0
   d43f2:	f003 f8ef 	bl	d75d4 <__aeabi_d2f>
   d43f6:	4a14      	ldr	r2, [pc, #80]	; (d4448 <_Z10sensorReadiPfRfS_+0x25c>)
   d43f8:	4914      	ldr	r1, [pc, #80]	; (d444c <_Z10sensorReadiPfRfS_+0x260>)
   d43fa:	6010      	str	r0, [r2, #0]
   d43fc:	9b01      	ldr	r3, [sp, #4]
   d43fe:	4a14      	ldr	r2, [pc, #80]	; (d4450 <_Z10sensorReadiPfRfS_+0x264>)
   d4400:	f104 000c 	add.w	r0, r4, #12
    for( int i = 0; i < 3; i++){
        accelData[i] = accelData[i] + accelCalibration_1[i];    // Calibrate accelerometer data with offset
   d4404:	ecb1 7a01 	vldmia	r1!, {s14}
   d4408:	edd4 7a00 	vldr	s15, [r4]
   d440c:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4410:	ece4 7a01 	vstmia	r4!, {s15}
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
   d4414:	ecb2 7a01 	vldmia	r2!, {s14}
   d4418:	edda 7a00 	vldr	s15, [sl]
   d441c:	ee77 7a87 	vadd.f32	s15, s15, s14
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;

    // Calibrate Data
    accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
    for( int i = 0; i < 3; i++){
   d4420:	42a0      	cmp	r0, r4
        accelData[i] = accelData[i] + accelCalibration_1[i];    // Calibrate accelerometer data with offset
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
   d4422:	ecea 7a01 	vstmia	sl!, {s15}
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;

    // Calibrate Data
    accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
    for( int i = 0; i < 3; i++){
   d4426:	d1ed      	bne.n	d4404 <_Z10sensorReadiPfRfS_+0x218>
        accelData[i] = accelData[i] + accelCalibration_1[i];    // Calibrate accelerometer data with offset
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
    }
    return result;
}
   d4428:	6818      	ldr	r0, [r3, #0]
   d442a:	b003      	add	sp, #12
   d442c:	ecbd 8b02 	vpop	{d8}
   d4430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4434:	38800000 	.word	0x38800000
   d4438:	2003e324 	.word	0x2003e324
   d443c:	43aa0000 	.word	0x43aa0000
   d4440:	42121eb8 	.word	0x42121eb8
   d4444:	43030000 	.word	0x43030000
   d4448:	2003e38c 	.word	0x2003e38c
   d444c:	000d7778 	.word	0x000d7778
   d4450:	000d7784 	.word	0x000d7784
   d4454:	00000000 	.word	0x00000000

000d4458 <_Z10filterDataPfS_RiS_S_>:

/*========== Filter accelerometer data using gyroscope data ==========*/
void  filterData(float *accelData, float *gyroData, int &startup, float *estimates, float *angles){
   d4458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Store new sensor values in buffers
    for(int i = 0; i < 3; i++){
            accelBuffer[i][y] = accelData[i];   // Store newest accelData values in first line of buffer
   d445c:	4d5e      	ldr	r5, [pc, #376]	; (d45d8 <_Z10filterDataPfS_RiS_S_+0x180>)
    }
    return result;
}

/*========== Filter accelerometer data using gyroscope data ==========*/
void  filterData(float *accelData, float *gyroData, int &startup, float *estimates, float *angles){
   d445e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    // Store new sensor values in buffers
    for(int i = 0; i < 3; i++){
            accelBuffer[i][y] = accelData[i];   // Store newest accelData values in first line of buffer
   d4462:	682e      	ldr	r6, [r5, #0]
   d4464:	f8df a174 	ldr.w	sl, [pc, #372]	; d45dc <_Z10filterDataPfS_RiS_S_+0x184>
            gyroBuffer[i][y] = gyroData[i];     // Store newest gyroData values in first line of buffer
   d4468:	f8df 9184 	ldr.w	r9, [pc, #388]	; d45f0 <_Z10filterDataPfS_RiS_S_+0x198>
    }
    return result;
}

/*========== Filter accelerometer data using gyroscope data ==========*/
void  filterData(float *accelData, float *gyroData, int &startup, float *estimates, float *angles){
   d446c:	461c      	mov	r4, r3
   d446e:	00b6      	lsls	r6, r6, #2
    // Store new sensor values in buffers
    for(int i = 0; i < 3; i++){
            accelBuffer[i][y] = accelData[i];   // Store newest accelData values in first line of buffer
   d4470:	2700      	movs	r7, #0
   d4472:	eb06 0e07 	add.w	lr, r6, r7
   d4476:	eb0a 0c0e 	add.w	ip, sl, lr
   d447a:	f850 bb04 	ldr.w	fp, [r0], #4
   d447e:	4b57      	ldr	r3, [pc, #348]	; (d45dc <_Z10filterDataPfS_RiS_S_+0x184>)
   d4480:	f8cc b000 	str.w	fp, [ip]
            gyroBuffer[i][y] = gyroData[i];     // Store newest gyroData values in first line of buffer
   d4484:	44ce      	add	lr, r9
   d4486:	3714      	adds	r7, #20
   d4488:	f851 cb04 	ldr.w	ip, [r1], #4
   d448c:	f8ce c000 	str.w	ip, [lr]
}

/*========== Filter accelerometer data using gyroscope data ==========*/
void  filterData(float *accelData, float *gyroData, int &startup, float *estimates, float *angles){
    // Store new sensor values in buffers
    for(int i = 0; i < 3; i++){
   d4490:	2f3c      	cmp	r7, #60	; 0x3c
   d4492:	469e      	mov	lr, r3
   d4494:	f8df c158 	ldr.w	ip, [pc, #344]	; d45f0 <_Z10filterDataPfS_RiS_S_+0x198>
   d4498:	d1eb      	bne.n	d4472 <_Z10filterDataPfS_RiS_S_+0x1a>
            accelBuffer[i][y] = accelData[i];   // Store newest accelData values in first line of buffer
            gyroBuffer[i][y] = gyroData[i];     // Store newest gyroData values in first line of buffer
        }
   
    // If this is the first time running the filter, there is no old data, so our best estimate is based on our current data
    if(startup == 0){
   d449a:	6811      	ldr	r1, [r2, #0]
   d449c:	2900      	cmp	r1, #0
   d449e:	f000 8082 	beq.w	d45a6 <_Z10filterDataPfS_RiS_S_+0x14e>
   d44a2:	494f      	ldr	r1, [pc, #316]	; (d45e0 <_Z10filterDataPfS_RiS_S_+0x188>)
   d44a4:	4a4f      	ldr	r2, [pc, #316]	; (d45e4 <_Z10filterDataPfS_RiS_S_+0x18c>)
   d44a6:	f8df 914c 	ldr.w	r9, [pc, #332]	; d45f4 <_Z10filterDataPfS_RiS_S_+0x19c>
   d44aa:	4f4f      	ldr	r7, [pc, #316]	; (d45e8 <_Z10filterDataPfS_RiS_S_+0x190>)
            // Take a weighted average of accelerometer and gyroscope values to account for drift and random variances
            //estimates[i] = (avgAccel[i]*0.98) + (avgGyro[i]*(timestep/1000))*0.02; 
            estimates[i] = avgAccel[i];

            // Reset sumAccel and sumGyro for next iteration
            sumAccel[i] = 0;
   d44ac:	eddf 6a4f 	vldr	s13, [pc, #316]	; d45ec <_Z10filterDataPfS_RiS_S_+0x194>
   d44b0:	4626      	mov	r6, r4
            accelBuffer[i][y] = accelData[i];   // Store newest accelData values in first line of buffer
            gyroBuffer[i][y] = gyroData[i];     // Store newest gyroData values in first line of buffer
        }
   
    // If this is the first time running the filter, there is no old data, so our best estimate is based on our current data
    if(startup == 0){
   d44b2:	2300      	movs	r3, #0
            for(int x = 0; x < num; x++){
            sumAccel[i] += accelBuffer[i][x];
            sumGyro[i] += gyroBuffer[i][x];
            }
            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) num);
   d44b4:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
   d44b8:	eb0e 0003 	add.w	r0, lr, r3
   d44bc:	eb0c 0a03 	add.w	sl, ip, r3
   d44c0:	ed91 7a00 	vldr	s14, [r1]
   d44c4:	edd2 7a00 	vldr	s15, [r2]
   d44c8:	3314      	adds	r3, #20
   d44ca:	eb0e 0b03 	add.w	fp, lr, r3
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
            // Sum all values in each column
            for(int x = 0; x < num; x++){
            sumAccel[i] += accelBuffer[i][x];
   d44ce:	ecb0 6a01 	vldmia	r0!, {s12}
   d44d2:	ee37 7a06 	vadd.f32	s14, s14, s12
            sumGyro[i] += gyroBuffer[i][x];
   d44d6:	ecba 6a01 	vldmia	sl!, {s12}
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
            // Sum all values in each column
            for(int x = 0; x < num; x++){
   d44da:	4558      	cmp	r0, fp
            sumAccel[i] += accelBuffer[i][x];
            sumGyro[i] += gyroBuffer[i][x];
   d44dc:	ee77 7a86 	vadd.f32	s15, s15, s12
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
            // Sum all values in each column
            for(int x = 0; x < num; x++){
   d44e0:	d1f5      	bne.n	d44ce <_Z10filterDataPfS_RiS_S_+0x76>
            sumAccel[i] += accelBuffer[i][x];
            sumGyro[i] += gyroBuffer[i][x];
            }
            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) num);
   d44e2:	ee87 6a25 	vdiv.f32	s12, s14, s11
        startup = 1;    // Set to 1 so this section is not repeated
    }
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
   d44e6:	2b3c      	cmp	r3, #60	; 0x3c
            sumAccel[i] += accelBuffer[i][x];
            sumGyro[i] += gyroBuffer[i][x];
            }
            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) num);
            avgGyro[i] = sumGyro[i]/((float) num);
   d44e8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
            for(int x = 0; x < num; x++){
            sumAccel[i] += accelBuffer[i][x];
            sumGyro[i] += gyroBuffer[i][x];
            }
            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) num);
   d44ec:	eca9 6a01 	vstmia	r9!, {s12}
            avgGyro[i] = sumGyro[i]/((float) num);
   d44f0:	eca7 7a01 	vstmia	r7!, {s14}

            // Take a weighted average of accelerometer and gyroscope values to account for drift and random variances
            //estimates[i] = (avgAccel[i]*0.98) + (avgGyro[i]*(timestep/1000))*0.02; 
            estimates[i] = avgAccel[i];
   d44f4:	eca6 6a01 	vstmia	r6!, {s12}

            // Reset sumAccel and sumGyro for next iteration
            sumAccel[i] = 0;
   d44f8:	ece1 6a01 	vstmia	r1!, {s13}
            sumGyro[i] = 0;
   d44fc:	ece2 6a01 	vstmia	r2!, {s13}
        startup = 1;    // Set to 1 so this section is not repeated
    }
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
   d4500:	d1da      	bne.n	d44b8 <_Z10filterDataPfS_RiS_S_+0x60>
            sumAccel[i] = 0;
            sumGyro[i] = 0;
        }

        // Calculate angles based on estimate
        angles[0] = atan2(estimates[1], estimates[2]) * (180/3.14);     // Angle about x-axis
   d4502:	68a0      	ldr	r0, [r4, #8]
   d4504:	f002 fd3a 	bl	d6f7c <__aeabi_f2d>
   d4508:	e9cd 0100 	strd	r0, r1, [sp]
   d450c:	6860      	ldr	r0, [r4, #4]
   d450e:	f002 fd35 	bl	d6f7c <__aeabi_f2d>
   d4512:	ed9d 1b00 	vldr	d1, [sp]
   d4516:	ec41 0b10 	vmov	d0, r0, r1
   d451a:	f001 ffd9 	bl	d64d0 <atan2>
   d451e:	a32c      	add	r3, pc, #176	; (adr r3, d45d0 <_Z10filterDataPfS_RiS_S_+0x178>)
   d4520:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4524:	ec51 0b10 	vmov	r0, r1, d0
   d4528:	f002 fd7c 	bl	d7024 <__aeabi_dmul>
   d452c:	f003 f852 	bl	d75d4 <__aeabi_d2f>
   d4530:	f8c8 0000 	str.w	r0, [r8]
        angles[1] = atan2(estimates[0], estimates[2]) * (180/3.14);     // Angle about y-axis
   d4534:	68a0      	ldr	r0, [r4, #8]
   d4536:	f002 fd21 	bl	d6f7c <__aeabi_f2d>
   d453a:	e9cd 0100 	strd	r0, r1, [sp]
   d453e:	6820      	ldr	r0, [r4, #0]
   d4540:	f002 fd1c 	bl	d6f7c <__aeabi_f2d>
   d4544:	ed9d 1b00 	vldr	d1, [sp]
   d4548:	ec41 0b10 	vmov	d0, r0, r1
   d454c:	f001 ffc0 	bl	d64d0 <atan2>
   d4550:	a31f      	add	r3, pc, #124	; (adr r3, d45d0 <_Z10filterDataPfS_RiS_S_+0x178>)
   d4552:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4556:	ec51 0b10 	vmov	r0, r1, d0
   d455a:	f002 fd63 	bl	d7024 <__aeabi_dmul>
   d455e:	f003 f839 	bl	d75d4 <__aeabi_d2f>
   d4562:	f8c8 0004 	str.w	r0, [r8, #4]
        angles[2] = atan2(estimates[1], estimates[0]) * (180/3.14);     // Angle about z-axis
   d4566:	6820      	ldr	r0, [r4, #0]
   d4568:	f002 fd08 	bl	d6f7c <__aeabi_f2d>
   d456c:	e9cd 0100 	strd	r0, r1, [sp]
   d4570:	6860      	ldr	r0, [r4, #4]
   d4572:	f002 fd03 	bl	d6f7c <__aeabi_f2d>
   d4576:	ed9d 1b00 	vldr	d1, [sp]
   d457a:	ec41 0b10 	vmov	d0, r0, r1
   d457e:	f001 ffa7 	bl	d64d0 <atan2>
   d4582:	a313      	add	r3, pc, #76	; (adr r3, d45d0 <_Z10filterDataPfS_RiS_S_+0x178>)
   d4584:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4588:	ec51 0b10 	vmov	r0, r1, d0
   d458c:	f002 fd4a 	bl	d7024 <__aeabi_dmul>
   d4590:	f003 f820 	bl	d75d4 <__aeabi_d2f>

        y++;    // Increment row in accelBuffer and gyroBuffer to prepare for next iteration
   d4594:	682b      	ldr	r3, [r5, #0]
        }

        // Calculate angles based on estimate
        angles[0] = atan2(estimates[1], estimates[2]) * (180/3.14);     // Angle about x-axis
        angles[1] = atan2(estimates[0], estimates[2]) * (180/3.14);     // Angle about y-axis
        angles[2] = atan2(estimates[1], estimates[0]) * (180/3.14);     // Angle about z-axis
   d4596:	f8c8 0008 	str.w	r0, [r8, #8]

        y++;    // Increment row in accelBuffer and gyroBuffer to prepare for next iteration
   d459a:	3301      	adds	r3, #1
        
        // If we reach the end of the buffers, reset to 0
        if(y >= num){
   d459c:	2b04      	cmp	r3, #4
        // Calculate angles based on estimate
        angles[0] = atan2(estimates[1], estimates[2]) * (180/3.14);     // Angle about x-axis
        angles[1] = atan2(estimates[0], estimates[2]) * (180/3.14);     // Angle about y-axis
        angles[2] = atan2(estimates[1], estimates[0]) * (180/3.14);     // Angle about z-axis

        y++;    // Increment row in accelBuffer and gyroBuffer to prepare for next iteration
   d459e:	4a0e      	ldr	r2, [pc, #56]	; (d45d8 <_Z10filterDataPfS_RiS_S_+0x180>)
        
        // If we reach the end of the buffers, reset to 0
        if(y >= num){
            y = 0;
   d45a0:	bfc8      	it	gt
   d45a2:	2300      	movgt	r3, #0
   d45a4:	e00e      	b.n	d45c4 <_Z10filterDataPfS_RiS_S_+0x16c>
   
    // If this is the first time running the filter, there is no old data, so our best estimate is based on our current data
    if(startup == 0){
        // Store new accelBuffer values in estimate
        for(int i = 0; i < 3; i++){
            estimates[i] = accelBuffer[i][y];  // Use current accelerometer data to get current estimate
   d45a6:	441e      	add	r6, r3
   d45a8:	6831      	ldr	r1, [r6, #0]
   d45aa:	6021      	str	r1, [r4, #0]
   d45ac:	6829      	ldr	r1, [r5, #0]
   d45ae:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   d45b2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   d45b6:	6940      	ldr	r0, [r0, #20]
   d45b8:	6060      	str	r0, [r4, #4]
   d45ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45bc:	60a3      	str	r3, [r4, #8]
        }
        y++;            // Increment row in buffers
   d45be:	3101      	adds	r1, #1
   d45c0:	6029      	str	r1, [r5, #0]
        startup = 1;    // Set to 1 so this section is not repeated
   d45c2:	2301      	movs	r3, #1
   d45c4:	6013      	str	r3, [r2, #0]
        // If we reach the end of the buffers, reset to 0
        if(y >= num){
            y = 0;
        }
    }
}
   d45c6:	b003      	add	sp, #12
   d45c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d45cc:	f3af 8000 	nop.w
   d45d0:	61d59ae7 	.word	0x61d59ae7
   d45d4:	404ca994 	.word	0x404ca994
   d45d8:	2003e384 	.word	0x2003e384
   d45dc:	2003e2e4 	.word	0x2003e2e4
   d45e0:	2003e39c 	.word	0x2003e39c
   d45e4:	2003e298 	.word	0x2003e298
   d45e8:	2003e200 	.word	0x2003e200
   d45ec:	00000000 	.word	0x00000000
   d45f0:	2003e340 	.word	0x2003e340
   d45f4:	2003e328 	.word	0x2003e328

000d45f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d45f8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d45fa:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d45fc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d45fe:	b17c      	cbz	r4, d4620 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4600:	6863      	ldr	r3, [r4, #4]
   d4602:	3b01      	subs	r3, #1
   d4604:	6063      	str	r3, [r4, #4]
   d4606:	b95b      	cbnz	r3, d4620 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4608:	6823      	ldr	r3, [r4, #0]
   d460a:	4620      	mov	r0, r4
   d460c:	689b      	ldr	r3, [r3, #8]
   d460e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4610:	68a3      	ldr	r3, [r4, #8]
   d4612:	3b01      	subs	r3, #1
   d4614:	60a3      	str	r3, [r4, #8]
   d4616:	b91b      	cbnz	r3, d4620 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4618:	6823      	ldr	r3, [r4, #0]
   d461a:	4620      	mov	r0, r4
   d461c:	68db      	ldr	r3, [r3, #12]
   d461e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4620:	4628      	mov	r0, r5
   d4622:	bd38      	pop	{r3, r4, r5, pc}

000d4624 <_ZN10CloudClass8variableIA7_cIRA30_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4624:	2300      	movs	r3, #0
   d4626:	2204      	movs	r2, #4
   d4628:	f000 bba0 	b.w	d4d6c <spark_variable>

000d462c <setup>:
int sum = 0;
int x = 0;
int avgVal = 0;

/*========== Setup ==========*/
void setup() {
   d462c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d462e:	b085      	sub	sp, #20
  Serial.begin(9600); // Initiate serial communication at 9600 BAUD
   d4630:	f001 fa40 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d4634:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4638:	f001 fa30 	bl	d5a9c <_ZN9USBSerial5beginEl>
  Wire.begin();       // Initiate Wire library
   d463c:	f001 fdb6 	bl	d61ac <_Z19__fetch_global_Wirev>
   d4640:	f001 fb7e 	bl	d5d40 <_ZN7TwoWire5beginEv>
  delay(100);         // delay 100 milliseconds for startup
   d4644:	2064      	movs	r0, #100	; 0x64
   d4646:	f000 fdb9 	bl	d51bc <delay>
  
  // Configure sensor with default settings
  configSensor(MPU_SLAVE_ADDR_1, PWR_MGMT_1, NRML_PWR);
   d464a:	2200      	movs	r2, #0
   d464c:	216b      	movs	r1, #107	; 0x6b
   d464e:	2068      	movs	r0, #104	; 0x68
   d4650:	f7ff fd5e 	bl	d4110 <_Z12configSensoriii>
   d4654:	4d2c      	ldr	r5, [pc, #176]	; (d4708 <setup+0xdc>)
  // Note: reading from analog pins does not require pinMode()
  digitalWrite(led, HIGH);
  
  // Particle Cloud Variables, Functions, and Publishing
  Particle.variable("containerWeight", sgRawValue); // Declare Particle.variable to access value from the cloud
  sprintf(weightStr, "%d", sgRawValue);
   d4656:	4c2d      	ldr	r4, [pc, #180]	; (d470c <setup+0xe0>)
  Particle.variable("StringWeight", weightStr);
  Particle.publish("dumpster-loading", weightStr, PRIVATE);
  Particle.function("led", ledToggle);
  // Variables to hold current angle estimates
  sprintf(angleX, "%f", angles[0]);
   d4658:	4f2d      	ldr	r7, [pc, #180]	; (d4710 <setup+0xe4>)
  sprintf(angleY, "%f", angles[1]);
   d465a:	4e2e      	ldr	r6, [pc, #184]	; (d4714 <setup+0xe8>)
  
  // Configure sensor with default settings
  configSensor(MPU_SLAVE_ADDR_1, PWR_MGMT_1, NRML_PWR);

  // Set up GPIO
  pinMode(led, OUTPUT);   // LED pin as output
   d465c:	2101      	movs	r1, #1
   d465e:	2007      	movs	r0, #7
   d4660:	f001 fd48 	bl	d60f4 <pinMode>
  // Note: reading from analog pins does not require pinMode()
  digitalWrite(led, HIGH);
   d4664:	2101      	movs	r1, #1
   d4666:	2007      	movs	r0, #7
   d4668:	f001 fd55 	bl	d6116 <digitalWrite>
   d466c:	2300      	movs	r3, #0
   d466e:	4629      	mov	r1, r5
   d4670:	2202      	movs	r2, #2
   d4672:	4829      	ldr	r0, [pc, #164]	; (d4718 <setup+0xec>)
   d4674:	f000 fb7a 	bl	d4d6c <spark_variable>
  
  // Particle Cloud Variables, Functions, and Publishing
  Particle.variable("containerWeight", sgRawValue); // Declare Particle.variable to access value from the cloud
  sprintf(weightStr, "%d", sgRawValue);
   d4678:	682a      	ldr	r2, [r5, #0]
   d467a:	4928      	ldr	r1, [pc, #160]	; (d471c <setup+0xf0>)
  Particle.variable("StringWeight", weightStr);
  Particle.publish("dumpster-loading", weightStr, PRIVATE);
  Particle.function("led", ledToggle);
  // Variables to hold current angle estimates
  sprintf(angleX, "%f", angles[0]);
   d467c:	4d28      	ldr	r5, [pc, #160]	; (d4720 <setup+0xf4>)
  // Note: reading from analog pins does not require pinMode()
  digitalWrite(led, HIGH);
  
  // Particle Cloud Variables, Functions, and Publishing
  Particle.variable("containerWeight", sgRawValue); // Declare Particle.variable to access value from the cloud
  sprintf(weightStr, "%d", sgRawValue);
   d467e:	4620      	mov	r0, r4
   d4680:	f000 fbb4 	bl	d4dec <sprintf>
  Particle.variable("StringWeight", weightStr);
   d4684:	4621      	mov	r1, r4
   d4686:	4827      	ldr	r0, [pc, #156]	; (d4724 <setup+0xf8>)
   d4688:	f7ff ffcc 	bl	d4624 <_ZN10CloudClass8variableIA7_cIRA30_cEEEbRKT_DpOT0_>
   d468c:	4b26      	ldr	r3, [pc, #152]	; (d4728 <setup+0xfc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d468e:	4927      	ldr	r1, [pc, #156]	; (d472c <setup+0x100>)
   d4690:	781b      	ldrb	r3, [r3, #0]
   d4692:	f88d 3000 	strb.w	r3, [sp]
   d4696:	4622      	mov	r2, r4
   d4698:	233c      	movs	r3, #60	; 0x3c
   d469a:	a802      	add	r0, sp, #8
   d469c:	f000 ffb4 	bl	d5608 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d46a0:	a803      	add	r0, sp, #12
   d46a2:	f7ff ffa9 	bl	d45f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d46a6:	4a22      	ldr	r2, [pc, #136]	; (d4730 <setup+0x104>)
   d46a8:	4922      	ldr	r1, [pc, #136]	; (d4734 <setup+0x108>)
   d46aa:	4823      	ldr	r0, [pc, #140]	; (d4738 <setup+0x10c>)
  Particle.publish("dumpster-loading", weightStr, PRIVATE);
  Particle.function("led", ledToggle);
  // Variables to hold current angle estimates
  sprintf(angleX, "%f", angles[0]);
   d46ac:	4c23      	ldr	r4, [pc, #140]	; (d473c <setup+0x110>)
   d46ae:	f000 fe9b 	bl	d53e8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46b2:	6828      	ldr	r0, [r5, #0]
   d46b4:	f002 fc62 	bl	d6f7c <__aeabi_f2d>
   d46b8:	4602      	mov	r2, r0
   d46ba:	460b      	mov	r3, r1
   d46bc:	4638      	mov	r0, r7
   d46be:	4621      	mov	r1, r4
   d46c0:	f000 fb94 	bl	d4dec <sprintf>
  sprintf(angleY, "%f", angles[1]);
   d46c4:	6868      	ldr	r0, [r5, #4]
   d46c6:	f002 fc59 	bl	d6f7c <__aeabi_f2d>
   d46ca:	4602      	mov	r2, r0
   d46cc:	460b      	mov	r3, r1
   d46ce:	4630      	mov	r0, r6
   d46d0:	4621      	mov	r1, r4
   d46d2:	f000 fb8b 	bl	d4dec <sprintf>
  sprintf(angleZ, "%f", angles[2]);
   d46d6:	68a8      	ldr	r0, [r5, #8]
   d46d8:	4d19      	ldr	r5, [pc, #100]	; (d4740 <setup+0x114>)
   d46da:	f002 fc4f 	bl	d6f7c <__aeabi_f2d>
   d46de:	4602      	mov	r2, r0
   d46e0:	460b      	mov	r3, r1
   d46e2:	4628      	mov	r0, r5
   d46e4:	4621      	mov	r1, r4
   d46e6:	f000 fb81 	bl	d4dec <sprintf>
  Particle.variable("angleX", angleX);
   d46ea:	4639      	mov	r1, r7
   d46ec:	4815      	ldr	r0, [pc, #84]	; (d4744 <setup+0x118>)
   d46ee:	f7ff ff99 	bl	d4624 <_ZN10CloudClass8variableIA7_cIRA30_cEEEbRKT_DpOT0_>
  Particle.variable("angleY", angleY);
   d46f2:	4631      	mov	r1, r6
   d46f4:	4814      	ldr	r0, [pc, #80]	; (d4748 <setup+0x11c>)
   d46f6:	f7ff ff95 	bl	d4624 <_ZN10CloudClass8variableIA7_cIRA30_cEEEbRKT_DpOT0_>
  Particle.variable("angleZ", angleZ);
   d46fa:	4629      	mov	r1, r5
   d46fc:	4813      	ldr	r0, [pc, #76]	; (d474c <setup+0x120>)
   d46fe:	f7ff ff91 	bl	d4624 <_ZN10CloudClass8variableIA7_cIRA30_cEEEbRKT_DpOT0_>
  // Functions to use when wanting fresh data
  //Particle.function("sensorRead", sensorRead);

}
   d4702:	b005      	add	sp, #20
   d4704:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4706:	bf00      	nop
   d4708:	2003e1cc 	.word	0x2003e1cc
   d470c:	2003e1e0 	.word	0x2003e1e0
   d4710:	2003e26c 	.word	0x2003e26c
   d4714:	2003e2a4 	.word	0x2003e2a4
   d4718:	000d783f 	.word	0x000d783f
   d471c:	000d783c 	.word	0x000d783c
   d4720:	2003e390 	.word	0x2003e390
   d4724:	000d784f 	.word	0x000d784f
   d4728:	2003e2e0 	.word	0x2003e2e0
   d472c:	000d785c 	.word	0x000d785c
   d4730:	000d786d 	.word	0x000d786d
   d4734:	000d40b9 	.word	0x000d40b9
   d4738:	000d53bd 	.word	0x000d53bd
   d473c:	000d7871 	.word	0x000d7871
   d4740:	2003e2c2 	.word	0x2003e2c2
   d4744:	000d7874 	.word	0x000d7874
   d4748:	000d787b 	.word	0x000d787b
   d474c:	000d7882 	.word	0x000d7882

000d4750 <_ZN5Print8printlnfIIfEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
   d4750:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4752:	4604      	mov	r4, r0
    {
        return this->printf_impl(true, format, args...);
   d4754:	ee10 0a10 	vmov	r0, s0
    {
        return this->printf_impl(false, format, args...);
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
   d4758:	460d      	mov	r5, r1
    {
        return this->printf_impl(true, format, args...);
   d475a:	f002 fc0f 	bl	d6f7c <__aeabi_f2d>
   d475e:	462a      	mov	r2, r5
   d4760:	e9cd 0100 	strd	r0, r1, [sp]
   d4764:	2101      	movs	r1, #1
   d4766:	4620      	mov	r0, r4
   d4768:	f000 fcdb 	bl	d5122 <_ZN5Print11printf_implEbPKcz>
    }
   d476c:	b003      	add	sp, #12
   d476e:	bd30      	pop	{r4, r5, pc}

000d4770 <loop>:

/*========== Main Loop ===========*/
void loop() {
   d4770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
   d4774:	2013      	movs	r0, #19
   d4776:	f001 fce7 	bl	d6148 <analogRead>
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
   d477a:	ee07 0a90 	vmov	s15, r0
   d477e:	ed9f 7a60 	vldr	s14, [pc, #384]	; d4900 <loop+0x190>
}

/*========== Main Loop ===========*/
void loop() {
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
   d4782:	4d60      	ldr	r5, [pc, #384]	; (d4904 <loop+0x194>)
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
  
  // Averaging for strain gauge values
  // Subtract last value from current sum
  sum = sum - sgBuff[x];
   d4784:	4e60      	ldr	r6, [pc, #384]	; (d4908 <loop+0x198>)
}

/*========== Main Loop ===========*/
void loop() {
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
   d4786:	6028      	str	r0, [r5, #0]
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
   d4788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  
  // Averaging for strain gauge values
  // Subtract last value from current sum
  sum = sum - sgBuff[x];
   d478c:	4f5f      	ldr	r7, [pc, #380]	; (d490c <loop+0x19c>)
   d478e:	f8df a1cc 	ldr.w	sl, [pc, #460]	; d495c <loop+0x1ec>

/*========== Main Loop ===========*/
void loop() {
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
   d4792:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d4796:	ee16 0a90 	vmov	r0, s13
   d479a:	f002 fbef 	bl	d6f7c <__aeabi_f2d>
   d479e:	a354      	add	r3, pc, #336	; (adr r3, d48f0 <loop+0x180>)
   d47a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47a4:	f002 fc3e 	bl	d7024 <__aeabi_dmul>
   d47a8:	a353      	add	r3, pc, #332	; (adr r3, d48f8 <loop+0x188>)
   d47aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47ae:	f002 fc39 	bl	d7024 <__aeabi_dmul>
   d47b2:	f002 ff0f 	bl	d75d4 <__aeabi_d2f>
  
  // Averaging for strain gauge values
  // Subtract last value from current sum
  sum = sum - sgBuff[x];
   d47b6:	6834      	ldr	r4, [r6, #0]

/*========== Main Loop ===========*/
void loop() {
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
   d47b8:	4b55      	ldr	r3, [pc, #340]	; (d4910 <loop+0x1a0>)
  
  // Averaging for strain gauge values
  // Subtract last value from current sum
  sum = sum - sgBuff[x];
   d47ba:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]

/*========== Main Loop ===========*/
void loop() {
  // Analog read and conversion
  sgRawValue = analogRead(sgPin);  // read the analogPin
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
   d47be:	6018      	str	r0, [r3, #0]
  
  // Averaging for strain gauge values
  // Subtract last value from current sum
  sum = sum - sgBuff[x];
   d47c0:	683b      	ldr	r3, [r7, #0]
  // Read the input pin
  sgBuff[x] = analogRead(sgPin);
   d47c2:	2013      	movs	r0, #19
  sgRawValue = analogRead(sgPin);  // read the analogPin
  sgWeight = 2.1*(((float) sgRawValue/4095)*3.3); // AnalogRead ranges from 0-4095, so we must convert to a voltage between 0-3.3 and multiply by sensitivity coefficient
  
  // Averaging for strain gauge values
  // Subtract last value from current sum
  sum = sum - sgBuff[x];
   d47c4:	1a9b      	subs	r3, r3, r2
   d47c6:	603b      	str	r3, [r7, #0]
  // Read the input pin
  sgBuff[x] = analogRead(sgPin);
   d47c8:	f001 fcbe 	bl	d6148 <analogRead>
   d47cc:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
  // Analog output voltage ranges from 0-3.5, but analogRead references against 5, so put in new reference, and multiply by sensing coefficient
  sgBuff[x] = sensCoeff*((sgBuff[x]/5)*3.5);
   d47d0:	6834      	ldr	r4, [r6, #0]
   d47d2:	2305      	movs	r3, #5
   d47d4:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   d47d8:	fb90 f0f3 	sdiv	r0, r0, r3
   d47dc:	f002 fbbc 	bl	d6f58 <__aeabi_i2d>
   d47e0:	2200      	movs	r2, #0
   d47e2:	4b4c      	ldr	r3, [pc, #304]	; (d4914 <loop+0x1a4>)
   d47e4:	f002 fc1e 	bl	d7024 <__aeabi_dmul>
   d47e8:	4b4b      	ldr	r3, [pc, #300]	; (d4918 <loop+0x1a8>)
   d47ea:	4680      	mov	r8, r0
   d47ec:	6818      	ldr	r0, [r3, #0]
   d47ee:	4689      	mov	r9, r1
   d47f0:	f002 fbc4 	bl	d6f7c <__aeabi_f2d>
   d47f4:	4602      	mov	r2, r0
   d47f6:	460b      	mov	r3, r1
   d47f8:	4640      	mov	r0, r8
   d47fa:	4649      	mov	r1, r9
   d47fc:	f002 fc12 	bl	d7024 <__aeabi_dmul>
   d4800:	f002 fec0 	bl	d7584 <__aeabi_d2iz>
  // Add new reading to running total
  sum = sum + sgBuff[x]; 
   d4804:	683b      	ldr	r3, [r7, #0]
  // Subtract last value from current sum
  sum = sum - sgBuff[x];
  // Read the input pin
  sgBuff[x] = analogRead(sgPin);
  // Analog output voltage ranges from 0-3.5, but analogRead references against 5, so put in new reference, and multiply by sensing coefficient
  sgBuff[x] = sensCoeff*((sgBuff[x]/5)*3.5);
   d4806:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
  // Add new reading to running total
  sum = sum + sgBuff[x]; 
  // Increment place in buffer
  x = x + 1;
   d480a:	3401      	adds	r4, #1

  // If we reach the end of our buffer, reset it to 0
  if (x >= 20)
   d480c:	2c13      	cmp	r4, #19
  // Read the input pin
  sgBuff[x] = analogRead(sgPin);
  // Analog output voltage ranges from 0-3.5, but analogRead references against 5, so put in new reference, and multiply by sensing coefficient
  sgBuff[x] = sensCoeff*((sgBuff[x]/5)*3.5);
  // Add new reading to running total
  sum = sum + sgBuff[x]; 
   d480e:	4418      	add	r0, r3
  x = x + 1;

  // If we reach the end of our buffer, reset it to 0
  if (x >= 20)
  {
    x = 0;
   d4810:	bfca      	itet	gt
   d4812:	2300      	movgt	r3, #0
  // Analog output voltage ranges from 0-3.5, but analogRead references against 5, so put in new reference, and multiply by sensing coefficient
  sgBuff[x] = sensCoeff*((sgBuff[x]/5)*3.5);
  // Add new reading to running total
  sum = sum + sgBuff[x]; 
  // Increment place in buffer
  x = x + 1;
   d4814:	6034      	strle	r4, [r6, #0]

  // If we reach the end of our buffer, reset it to 0
  if (x >= 20)
  {
    x = 0;
   d4816:	6033      	strgt	r3, [r6, #0]
  }
  
  // Calculate value average
  avgVal = sum/20;
   d4818:	4e40      	ldr	r6, [pc, #256]	; (d491c <loop+0x1ac>)
  // Read the input pin
  sgBuff[x] = analogRead(sgPin);
  // Analog output voltage ranges from 0-3.5, but analogRead references against 5, so put in new reference, and multiply by sensing coefficient
  sgBuff[x] = sensCoeff*((sgBuff[x]/5)*3.5);
  // Add new reading to running total
  sum = sum + sgBuff[x]; 
   d481a:	6038      	str	r0, [r7, #0]
  {
    x = 0;
  }
  
  // Calculate value average
  avgVal = sum/20;
   d481c:	2314      	movs	r3, #20

  // Particle Event Publishing
  sprintf(weightStr, "%d", sgRawValue);  // Update string variables
   d481e:	682a      	ldr	r2, [r5, #0]
  {
    x = 0;
  }
  
  // Calculate value average
  avgVal = sum/20;
   d4820:	fb90 f0f3 	sdiv	r0, r0, r3

  // Particle Event Publishing
  sprintf(weightStr, "%d", sgRawValue);  // Update string variables
   d4824:	493e      	ldr	r1, [pc, #248]	; (d4920 <loop+0x1b0>)
  {
    x = 0;
  }
  
  // Calculate value average
  avgVal = sum/20;
   d4826:	6030      	str	r0, [r6, #0]

  // Particle Event Publishing
  sprintf(weightStr, "%d", sgRawValue);  // Update string variables
   d4828:	483e      	ldr	r0, [pc, #248]	; (d4924 <loop+0x1b4>)
  
  // Read in data from MPU-6050
  result = sensorRead(MPU_SLAVE_ADDR_1, accelData, temp_C, gyroData);

  // Filter data and determine global angular orientation
  filterData(accelData, gyroData, startup, estimates, angles);  
   d482a:	4c3f      	ldr	r4, [pc, #252]	; (d4928 <loop+0x1b8>)
  
  // Calculate value average
  avgVal = sum/20;

  // Particle Event Publishing
  sprintf(weightStr, "%d", sgRawValue);  // Update string variables
   d482c:	f000 fade 	bl	d4dec <sprintf>
   d4830:	4b3e      	ldr	r3, [pc, #248]	; (d492c <loop+0x1bc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4832:	4a3c      	ldr	r2, [pc, #240]	; (d4924 <loop+0x1b4>)
   d4834:	781b      	ldrb	r3, [r3, #0]
   d4836:	f88d 3000 	strb.w	r3, [sp]
   d483a:	493d      	ldr	r1, [pc, #244]	; (d4930 <loop+0x1c0>)
   d483c:	233c      	movs	r3, #60	; 0x3c
   d483e:	a802      	add	r0, sp, #8
   d4840:	f000 fee2 	bl	d5608 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4844:	a803      	add	r0, sp, #12
   d4846:	f7ff fed7 	bl	d45f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("dumpster-loading", weightStr, PRIVATE); // Publish data as event to Particle Cloud
  
  // Read in data from MPU-6050
  result = sensorRead(MPU_SLAVE_ADDR_1, accelData, temp_C, gyroData);
   d484a:	4b3a      	ldr	r3, [pc, #232]	; (d4934 <loop+0x1c4>)
   d484c:	4a3a      	ldr	r2, [pc, #232]	; (d4938 <loop+0x1c8>)
   d484e:	493b      	ldr	r1, [pc, #236]	; (d493c <loop+0x1cc>)
   d4850:	2068      	movs	r0, #104	; 0x68
   d4852:	f7ff fccb 	bl	d41ec <_Z10sensorReadiPfRfS_>
   d4856:	4b3a      	ldr	r3, [pc, #232]	; (d4940 <loop+0x1d0>)

  // Filter data and determine global angular orientation
  filterData(accelData, gyroData, startup, estimates, angles);  
   d4858:	4a3a      	ldr	r2, [pc, #232]	; (d4944 <loop+0x1d4>)
  // Particle Event Publishing
  sprintf(weightStr, "%d", sgRawValue);  // Update string variables
  Particle.publish("dumpster-loading", weightStr, PRIVATE); // Publish data as event to Particle Cloud
  
  // Read in data from MPU-6050
  result = sensorRead(MPU_SLAVE_ADDR_1, accelData, temp_C, gyroData);
   d485a:	6018      	str	r0, [r3, #0]

  // Filter data and determine global angular orientation
  filterData(accelData, gyroData, startup, estimates, angles);  
   d485c:	4935      	ldr	r1, [pc, #212]	; (d4934 <loop+0x1c4>)
   d485e:	4b3a      	ldr	r3, [pc, #232]	; (d4948 <loop+0x1d8>)
   d4860:	9400      	str	r4, [sp, #0]
   d4862:	4836      	ldr	r0, [pc, #216]	; (d493c <loop+0x1cc>)
   d4864:	f7ff fdf8 	bl	d4458 <_Z10filterDataPfS_RiS_S_>

  // Print data to the serial monitor
  // Strain gauge
  Serial.printlnf("%d", avgVal);
   d4868:	f001 f924 	bl	d5ab4 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d486c:	6833      	ldr	r3, [r6, #0]
   d486e:	4a2c      	ldr	r2, [pc, #176]	; (d4920 <loop+0x1b0>)
   d4870:	2101      	movs	r1, #1
   d4872:	f000 fc56 	bl	d5122 <_ZN5Print11printf_implEbPKcz>

  // Angles
  Serial.printlnf("%f", angles[0]);
   d4876:	f001 f91d 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d487a:	ed94 0a00 	vldr	s0, [r4]
   d487e:	4933      	ldr	r1, [pc, #204]	; (d494c <loop+0x1dc>)
   d4880:	f7ff ff66 	bl	d4750 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
  Serial.printlnf("%f", angles[1]);
   d4884:	f001 f916 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d4888:	ed94 0a01 	vldr	s0, [r4, #4]
   d488c:	492f      	ldr	r1, [pc, #188]	; (d494c <loop+0x1dc>)
   d488e:	f7ff ff5f 	bl	d4750 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
  Serial.printlnf("%f", angles[2]);
   d4892:	f001 f90f 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d4896:	ed94 0a02 	vldr	s0, [r4, #8]
   d489a:	492c      	ldr	r1, [pc, #176]	; (d494c <loop+0x1dc>)
   d489c:	f7ff ff58 	bl	d4750 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
  Serial.println();
   d48a0:	f001 f908 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d48a4:	f000 fc07 	bl	d50b6 <_ZN5Print7printlnEv>
  sprintf(angleX, "%f", angles[0]);
   d48a8:	6820      	ldr	r0, [r4, #0]
   d48aa:	f002 fb67 	bl	d6f7c <__aeabi_f2d>
   d48ae:	4602      	mov	r2, r0
   d48b0:	460b      	mov	r3, r1
   d48b2:	4827      	ldr	r0, [pc, #156]	; (d4950 <loop+0x1e0>)
   d48b4:	4925      	ldr	r1, [pc, #148]	; (d494c <loop+0x1dc>)
   d48b6:	f000 fa99 	bl	d4dec <sprintf>
  sprintf(angleY, "%f", angles[1]);
   d48ba:	6860      	ldr	r0, [r4, #4]
   d48bc:	f002 fb5e 	bl	d6f7c <__aeabi_f2d>
   d48c0:	4602      	mov	r2, r0
   d48c2:	460b      	mov	r3, r1
   d48c4:	4823      	ldr	r0, [pc, #140]	; (d4954 <loop+0x1e4>)
   d48c6:	4921      	ldr	r1, [pc, #132]	; (d494c <loop+0x1dc>)
   d48c8:	f000 fa90 	bl	d4dec <sprintf>
  sprintf(angleZ, "%f", angles[2]);
   d48cc:	68a0      	ldr	r0, [r4, #8]
   d48ce:	f002 fb55 	bl	d6f7c <__aeabi_f2d>
   d48d2:	4602      	mov	r2, r0
   d48d4:	460b      	mov	r3, r1
   d48d6:	4820      	ldr	r0, [pc, #128]	; (d4958 <loop+0x1e8>)
   d48d8:	491c      	ldr	r1, [pc, #112]	; (d494c <loop+0x1dc>)
   d48da:	f000 fa87 	bl	d4dec <sprintf>

  delay(timestep);  // Wait one millisecond
   d48de:	2064      	movs	r0, #100	; 0x64
   d48e0:	f000 fc6c 	bl	d51bc <delay>
   d48e4:	b004      	add	sp, #16
   d48e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d48ea:	bf00      	nop
   d48ec:	f3af 8000 	nop.w
   d48f0:	66666666 	.word	0x66666666
   d48f4:	400a6666 	.word	0x400a6666
   d48f8:	cccccccd 	.word	0xcccccccd
   d48fc:	4000cccc 	.word	0x4000cccc
   d4900:	457ff000 	.word	0x457ff000
   d4904:	2003e1cc 	.word	0x2003e1cc
   d4908:	2003e380 	.word	0x2003e380
   d490c:	2003e388 	.word	0x2003e388
   d4910:	2003e37c 	.word	0x2003e37c
   d4914:	400c0000 	.word	0x400c0000
   d4918:	2003e158 	.word	0x2003e158
   d491c:	2003e1d0 	.word	0x2003e1d0
   d4920:	000d783c 	.word	0x000d783c
   d4924:	2003e1e0 	.word	0x2003e1e0
   d4928:	2003e390 	.word	0x2003e390
   d492c:	2003e2e0 	.word	0x2003e2e0
   d4930:	000d785c 	.word	0x000d785c
   d4934:	2003e260 	.word	0x2003e260
   d4938:	2003e25c 	.word	0x2003e25c
   d493c:	2003e334 	.word	0x2003e334
   d4940:	2003e324 	.word	0x2003e324
   d4944:	2003e320 	.word	0x2003e320
   d4948:	2003e28c 	.word	0x2003e28c
   d494c:	000d7871 	.word	0x000d7871
   d4950:	2003e26c 	.word	0x2003e26c
   d4954:	2003e2a4 	.word	0x2003e2a4
   d4958:	2003e2c2 	.word	0x2003e2c2
   d495c:	2003e20c 	.word	0x2003e20c

000d4960 <_GLOBAL__sub_I_result>:
   d4960:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4962:	4b0c      	ldr	r3, [pc, #48]	; (d4994 <_GLOBAL__sub_I_result+0x34>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4964:	4c0c      	ldr	r4, [pc, #48]	; (d4998 <_GLOBAL__sub_I_result+0x38>)
   d4966:	2201      	movs	r2, #1
   d4968:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d496a:	f000 f82b 	bl	d49c4 <HAL_Pin_Map>
   d496e:	2300      	movs	r3, #0
   d4970:	6023      	str	r3, [r4, #0]
   d4972:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4974:	71a3      	strb	r3, [r4, #6]
   d4976:	8123      	strh	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4978:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d497a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d497e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4980:	f000 f970 	bl	d4c64 <set_system_mode>
#include "Wire.h"                 // This library allows I2C communication
#include "Math.h"                 // This library allows certain mathematical functions to be used (i.e., sqrt, sq, etc.)
#include "PeripheralFunctions.h"  // Holds all peripheral functions for reading in data from MPU-6050, etc.

/*========== Device System Settings ==========*/
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4984:	4620      	mov	r0, r4
   d4986:	4a05      	ldr	r2, [pc, #20]	; (d499c <_GLOBAL__sub_I_result+0x3c>)
   d4988:	4905      	ldr	r1, [pc, #20]	; (d49a0 <_GLOBAL__sub_I_result+0x40>)
  sprintf(angleX, "%f", angles[0]);
  sprintf(angleY, "%f", angles[1]);
  sprintf(angleZ, "%f", angles[2]);

  delay(timestep);  // Wait one millisecond
   d498a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "Wire.h"                 // This library allows I2C communication
#include "Math.h"                 // This library allows certain mathematical functions to be used (i.e., sqrt, sq, etc.)
#include "PeripheralFunctions.h"  // Holds all peripheral functions for reading in data from MPU-6050, etc.

/*========== Device System Settings ==========*/
SYSTEM_MODE(SEMI_AUTOMATIC);
   d498e:	f001 bc33 	b.w	d61f8 <__aeabi_atexit>
   d4992:	bf00      	nop
   d4994:	2003e2e0 	.word	0x2003e2e0
   d4998:	2003e1d4 	.word	0x2003e1d4
   d499c:	2003e1c8 	.word	0x2003e1c8
   d49a0:	000d40f9 	.word	0x000d40f9

000d49a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <netdb_freeaddrinfo+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	689b      	ldr	r3, [r3, #8]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030268 	.word	0x00030268

000d49b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <netdb_getaddrinfo+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	68db      	ldr	r3, [r3, #12]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030268 	.word	0x00030268

000d49c4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <HAL_Pin_Map+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	681b      	ldr	r3, [r3, #0]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	0003022c 	.word	0x0003022c

000d49d4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <HAL_Validate_Pin_Function+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	685b      	ldr	r3, [r3, #4]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	0003022c 	.word	0x0003022c

000d49e4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <HAL_Pin_Mode+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	689b      	ldr	r3, [r3, #8]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	0003022c 	.word	0x0003022c

000d49f4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <HAL_Get_Pin_Mode+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	68db      	ldr	r3, [r3, #12]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	0003022c 	.word	0x0003022c

000d4a04 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <HAL_GPIO_Write+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	691b      	ldr	r3, [r3, #16]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	0003022c 	.word	0x0003022c

000d4a14 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <HAL_ADC_Read+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	0003022c 	.word	0x0003022c

000d4a24 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <HAL_SPI_Init+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	69db      	ldr	r3, [r3, #28]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030230 	.word	0x00030230

000d4a34 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <HAL_SPI_Is_Enabled+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	6a1b      	ldr	r3, [r3, #32]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030230 	.word	0x00030230

000d4a44 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <HAL_RNG_GetRandomNumber+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	685b      	ldr	r3, [r3, #4]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030218 	.word	0x00030218

000d4a54 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	695b      	ldr	r3, [r3, #20]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030218 	.word	0x00030218

000d4a64 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <os_thread_is_current+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	689b      	ldr	r3, [r3, #8]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	00030248 	.word	0x00030248

000d4a74 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <os_thread_join+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	691b      	ldr	r3, [r3, #16]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	00030248 	.word	0x00030248

000d4a84 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <os_thread_cleanup+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	695b      	ldr	r3, [r3, #20]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	00030248 	.word	0x00030248

000d4a94 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <os_mutex_recursive_create+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	00030248 	.word	0x00030248

000d4aa4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <os_mutex_recursive_destroy+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030248 	.word	0x00030248

000d4ab4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <inet_inet_ntop+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	695b      	ldr	r3, [r3, #20]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030264 	.word	0x00030264

000d4ac4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <HAL_USART_Init+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	681b      	ldr	r3, [r3, #0]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003023c 	.word	0x0003023c

000d4ad4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_USART_Write_Data+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	68db      	ldr	r3, [r3, #12]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	0003023c 	.word	0x0003023c

000d4ae4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_USART_Available_Data+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	691b      	ldr	r3, [r3, #16]
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	0003023c 	.word	0x0003023c

000d4af4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <HAL_USART_Read_Data+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	695b      	ldr	r3, [r3, #20]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	0003023c 	.word	0x0003023c

000d4b04 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_USART_Peek_Data+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	699b      	ldr	r3, [r3, #24]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	0003023c 	.word	0x0003023c

000d4b14 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <HAL_USART_Flush_Data+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	69db      	ldr	r3, [r3, #28]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	0003023c 	.word	0x0003023c

000d4b24 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <HAL_USART_Is_Enabled+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	6a1b      	ldr	r3, [r3, #32]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	0003023c 	.word	0x0003023c

000d4b34 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <HAL_USART_Available_Data_For_Write+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	0003023c 	.word	0x0003023c

000d4b44 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <HAL_I2C_Begin+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	68db      	ldr	r3, [r3, #12]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030228 	.word	0x00030228

000d4b54 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <HAL_I2C_Begin_Transmission+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	699b      	ldr	r3, [r3, #24]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030228 	.word	0x00030228

000d4b64 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_I2C_End_Transmission+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	69db      	ldr	r3, [r3, #28]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030228 	.word	0x00030228

000d4b74 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_I2C_Write_Data+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	6a1b      	ldr	r3, [r3, #32]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	00030228 	.word	0x00030228

000d4b84 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_I2C_Available_Data+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030228 	.word	0x00030228

000d4b94 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <HAL_I2C_Read_Data+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030228 	.word	0x00030228

000d4ba4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <HAL_I2C_Peek_Data+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030228 	.word	0x00030228

000d4bb4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <HAL_I2C_Flush_Data+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030228 	.word	0x00030228

000d4bc4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <HAL_I2C_Is_Enabled+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030228 	.word	0x00030228

000d4bd4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <HAL_I2C_Init+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030228 	.word	0x00030228

000d4be4 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <HAL_I2C_Request_Data_Ex+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	00030228 	.word	0x00030228

000d4bf4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <HAL_USB_USART_Init+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	681b      	ldr	r3, [r3, #0]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	0003024c 	.word	0x0003024c

000d4c04 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <HAL_USB_USART_Begin+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	685b      	ldr	r3, [r3, #4]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	0003024c 	.word	0x0003024c

000d4c14 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <HAL_USB_USART_Available_Data+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	691b      	ldr	r3, [r3, #16]
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	0003024c 	.word	0x0003024c

000d4c24 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	695b      	ldr	r3, [r3, #20]
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	0003024c 	.word	0x0003024c

000d4c34 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <HAL_USB_USART_Receive_Data+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	699b      	ldr	r3, [r3, #24]
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	0003024c 	.word	0x0003024c

000d4c44 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <HAL_USB_USART_Send_Data+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	69db      	ldr	r3, [r3, #28]
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	0003024c 	.word	0x0003024c

000d4c54 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <HAL_USB_USART_Flush_Data+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	6a1b      	ldr	r3, [r3, #32]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	0003024c 	.word	0x0003024c

000d4c64 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <set_system_mode+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	685b      	ldr	r3, [r3, #4]
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	00030220 	.word	0x00030220

000d4c74 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <system_delay_ms+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	695b      	ldr	r3, [r3, #20]
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	00030220 	.word	0x00030220

000d4c84 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <application_thread_current+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	00030220 	.word	0x00030220

000d4c94 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <application_thread_invoke+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	00030220 	.word	0x00030220

000d4ca4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b03      	ldr	r3, [pc, #12]	; (d4cb4 <system_ctrl_set_app_request_handler+0x10>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4cae:	9301      	str	r3, [sp, #4]
   d4cb0:	bd08      	pop	{r3, pc}
   d4cb2:	0000      	.short	0x0000
   d4cb4:	00030220 	.word	0x00030220

000d4cb8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b03      	ldr	r3, [pc, #12]	; (d4cc8 <system_ctrl_set_result+0x10>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4cc2:	9301      	str	r3, [sp, #4]
   d4cc4:	bd08      	pop	{r3, pc}
   d4cc6:	0000      	.short	0x0000
   d4cc8:	00030220 	.word	0x00030220

000d4ccc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <network_connect+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	685b      	ldr	r3, [r3, #4]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030240 	.word	0x00030240

000d4cdc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <network_connecting+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	689b      	ldr	r3, [r3, #8]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030240 	.word	0x00030240

000d4cec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <network_disconnect+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	68db      	ldr	r3, [r3, #12]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030240 	.word	0x00030240

000d4cfc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <network_ready+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	691b      	ldr	r3, [r3, #16]
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030240 	.word	0x00030240

000d4d0c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <network_on+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	695b      	ldr	r3, [r3, #20]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030240 	.word	0x00030240

000d4d1c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <network_off+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	699b      	ldr	r3, [r3, #24]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030240 	.word	0x00030240

000d4d2c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <network_listen+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	69db      	ldr	r3, [r3, #28]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030240 	.word	0x00030240

000d4d3c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <network_listening+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6a1b      	ldr	r3, [r3, #32]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030240 	.word	0x00030240

000d4d4c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <network_set_listen_timeout+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	00030240 	.word	0x00030240

000d4d5c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <network_get_listen_timeout+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	00030240 	.word	0x00030240

000d4d6c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <spark_variable+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	681b      	ldr	r3, [r3, #0]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	00030244 	.word	0x00030244

000d4d7c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <spark_function+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	685b      	ldr	r3, [r3, #4]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030244 	.word	0x00030244

000d4d8c <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <spark_cloud_flag_connected+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	695b      	ldr	r3, [r3, #20]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	00030244 	.word	0x00030244

000d4d9c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <spark_send_event+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	6a1b      	ldr	r3, [r3, #32]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030244 	.word	0x00030244

000d4dac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030244 	.word	0x00030244

000d4dbc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <malloc+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	681b      	ldr	r3, [r3, #0]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	0003021c 	.word	0x0003021c

000d4dcc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <free+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	685b      	ldr	r3, [r3, #4]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	0003021c 	.word	0x0003021c

000d4ddc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <realloc+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	689b      	ldr	r3, [r3, #8]
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	0003021c 	.word	0x0003021c

000d4dec <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <sprintf+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	68db      	ldr	r3, [r3, #12]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	0003021c 	.word	0x0003021c

000d4dfc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <vsnprintf+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	0003021c 	.word	0x0003021c

000d4e0c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <abort+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	0003021c 	.word	0x0003021c

000d4e1c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <_malloc_r+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	0003021c 	.word	0x0003021c

000d4e2c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <__errno+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	0003021c 	.word	0x0003021c

000d4e3c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e3c:	2200      	movs	r2, #0
   d4e3e:	4611      	mov	r1, r2
   d4e40:	6840      	ldr	r0, [r0, #4]
   d4e42:	f7ff bf7b 	b.w	d4d3c <network_listening>

000d4e46 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e46:	2200      	movs	r2, #0
   d4e48:	4611      	mov	r1, r2
   d4e4a:	6840      	ldr	r0, [r0, #4]
   d4e4c:	f7ff bf86 	b.w	d4d5c <network_get_listen_timeout>

000d4e50 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e50:	2200      	movs	r2, #0
   d4e52:	6840      	ldr	r0, [r0, #4]
   d4e54:	f7ff bf7a 	b.w	d4d4c <network_set_listen_timeout>

000d4e58 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e58:	2200      	movs	r2, #0
   d4e5a:	f081 0101 	eor.w	r1, r1, #1
   d4e5e:	6840      	ldr	r0, [r0, #4]
   d4e60:	f7ff bf64 	b.w	d4d2c <network_listen>

000d4e64 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4e64:	2300      	movs	r3, #0
   d4e66:	461a      	mov	r2, r3
   d4e68:	4619      	mov	r1, r3
   d4e6a:	6840      	ldr	r0, [r0, #4]
   d4e6c:	f7ff bf56 	b.w	d4d1c <network_off>

000d4e70 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4e70:	2300      	movs	r3, #0
   d4e72:	461a      	mov	r2, r3
   d4e74:	4619      	mov	r1, r3
   d4e76:	6840      	ldr	r0, [r0, #4]
   d4e78:	f7ff bf48 	b.w	d4d0c <network_on>

000d4e7c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e7c:	2200      	movs	r2, #0
   d4e7e:	4611      	mov	r1, r2
   d4e80:	6840      	ldr	r0, [r0, #4]
   d4e82:	f7ff bf3b 	b.w	d4cfc <network_ready>

000d4e86 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e86:	2200      	movs	r2, #0
   d4e88:	4611      	mov	r1, r2
   d4e8a:	6840      	ldr	r0, [r0, #4]
   d4e8c:	f7ff bf26 	b.w	d4cdc <network_connecting>

000d4e90 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e90:	2200      	movs	r2, #0
   d4e92:	2102      	movs	r1, #2
   d4e94:	6840      	ldr	r0, [r0, #4]
   d4e96:	f7ff bf29 	b.w	d4cec <network_disconnect>

000d4e9a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e9a:	2300      	movs	r3, #0
   d4e9c:	461a      	mov	r2, r3
   d4e9e:	6840      	ldr	r0, [r0, #4]
   d4ea0:	f7ff bf14 	b.w	d4ccc <network_connect>

000d4ea4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4ea4:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4ea6:	2203      	movs	r2, #3
   d4ea8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4eaa:	4a02      	ldr	r2, [pc, #8]	; (d4eb4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4eac:	601a      	str	r2, [r3, #0]
   d4eae:	4770      	bx	lr
   d4eb0:	2003e3a8 	.word	0x2003e3a8
   d4eb4:	000d7894 	.word	0x000d7894

000d4eb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4eb8:	b510      	push	{r4, lr}
   d4eba:	4604      	mov	r4, r0
{
    _spi = spi;
   d4ebc:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4ebe:	4608      	mov	r0, r1
   d4ec0:	f7ff fdb0 	bl	d4a24 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4ec4:	2300      	movs	r3, #0
   d4ec6:	6063      	str	r3, [r4, #4]
}
   d4ec8:	4620      	mov	r0, r4
   d4eca:	bd10      	pop	{r4, pc}

000d4ecc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4ecc:	7800      	ldrb	r0, [r0, #0]
   d4ece:	f7ff bdb1 	b.w	d4a34 <HAL_SPI_Is_Enabled>
	...

000d4ed4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4ed4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ed6:	4c09      	ldr	r4, [pc, #36]	; (d4efc <_GLOBAL__sub_I_System+0x28>)
   d4ed8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4eda:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ede:	6020      	str	r0, [r4, #0]
   d4ee0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4ee2:	71a0      	strb	r0, [r4, #6]
   d4ee4:	8120      	strh	r0, [r4, #8]
   d4ee6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4ee8:	f7ff febc 	bl	d4c64 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4eec:	4620      	mov	r0, r4
   d4eee:	4a04      	ldr	r2, [pc, #16]	; (d4f00 <_GLOBAL__sub_I_System+0x2c>)
   d4ef0:	4904      	ldr	r1, [pc, #16]	; (d4f04 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4ef6:	f001 b97f 	b.w	d61f8 <__aeabi_atexit>
   d4efa:	bf00      	nop
   d4efc:	2003e3b0 	.word	0x2003e3b0
   d4f00:	2003e1c8 	.word	0x2003e1c8
   d4f04:	000d40f9 	.word	0x000d40f9

000d4f08 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4f08:	b510      	push	{r4, lr}
   d4f0a:	4604      	mov	r4, r0
{
	free(buffer);
   d4f0c:	6800      	ldr	r0, [r0, #0]
   d4f0e:	f7ff ff5d 	bl	d4dcc <free>
}
   d4f12:	4620      	mov	r0, r4
   d4f14:	bd10      	pop	{r4, pc}

000d4f16 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4f16:	b510      	push	{r4, lr}
   d4f18:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4f1a:	6800      	ldr	r0, [r0, #0]
   d4f1c:	b108      	cbz	r0, d4f22 <_ZN6String10invalidateEv+0xc>
   d4f1e:	f7ff ff55 	bl	d4dcc <free>
	buffer = NULL;
   d4f22:	2300      	movs	r3, #0
   d4f24:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4f26:	60a3      	str	r3, [r4, #8]
   d4f28:	6063      	str	r3, [r4, #4]
   d4f2a:	bd10      	pop	{r4, pc}

000d4f2c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4f2c:	b538      	push	{r3, r4, r5, lr}
   d4f2e:	4604      	mov	r4, r0
   d4f30:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4f32:	6800      	ldr	r0, [r0, #0]
   d4f34:	3101      	adds	r1, #1
   d4f36:	f7ff ff51 	bl	d4ddc <realloc>
	if (newbuffer) {
   d4f3a:	b110      	cbz	r0, d4f42 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4f3c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4f40:	2001      	movs	r0, #1
	}
	return 0;
}
   d4f42:	bd38      	pop	{r3, r4, r5, pc}

000d4f44 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f44:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4f46:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f48:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4f4a:	b113      	cbz	r3, d4f52 <_ZN6String7reserveEj+0xe>
   d4f4c:	6843      	ldr	r3, [r0, #4]
   d4f4e:	428b      	cmp	r3, r1
   d4f50:	d207      	bcs.n	d4f62 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4f52:	4620      	mov	r0, r4
   d4f54:	f7ff ffea 	bl	d4f2c <_ZN6String12changeBufferEj>
   d4f58:	b120      	cbz	r0, d4f64 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4f5a:	68a3      	ldr	r3, [r4, #8]
   d4f5c:	b90b      	cbnz	r3, d4f62 <_ZN6String7reserveEj+0x1e>
   d4f5e:	6822      	ldr	r2, [r4, #0]
   d4f60:	7013      	strb	r3, [r2, #0]
   d4f62:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4f64:	bd10      	pop	{r4, pc}

000d4f66 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4f66:	b570      	push	{r4, r5, r6, lr}
   d4f68:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4f6a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4f6c:	4604      	mov	r4, r0
   d4f6e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4f70:	f7ff ffe8 	bl	d4f44 <_ZN6String7reserveEj>
   d4f74:	b918      	cbnz	r0, d4f7e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4f76:	4620      	mov	r0, r4
   d4f78:	f7ff ffcd 	bl	d4f16 <_ZN6String10invalidateEv>
		return *this;
   d4f7c:	e009      	b.n	d4f92 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4f7e:	462a      	mov	r2, r5
   d4f80:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4f82:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4f84:	6820      	ldr	r0, [r4, #0]
   d4f86:	f002 fb83 	bl	d7690 <memcpy>
	buffer[len] = 0;
   d4f8a:	6822      	ldr	r2, [r4, #0]
   d4f8c:	68a3      	ldr	r3, [r4, #8]
   d4f8e:	2100      	movs	r1, #0
   d4f90:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4f92:	4620      	mov	r0, r4
   d4f94:	bd70      	pop	{r4, r5, r6, pc}

000d4f96 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4f96:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4f98:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4f9a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4f9c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4f9e:	6043      	str	r3, [r0, #4]
	len = 0;
   d4fa0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4fa2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4fa4:	460d      	mov	r5, r1
   d4fa6:	b139      	cbz	r1, d4fb8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4fa8:	4608      	mov	r0, r1
   d4faa:	f002 fbd2 	bl	d7752 <strlen>
   d4fae:	4629      	mov	r1, r5
   d4fb0:	4602      	mov	r2, r0
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	f7ff ffd7 	bl	d4f66 <_ZN6String4copyEPKcj>
}
   d4fb8:	4620      	mov	r0, r4
   d4fba:	bd38      	pop	{r3, r4, r5, pc}

000d4fbc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4fbc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4fbe:	b510      	push	{r4, lr}
   d4fc0:	460b      	mov	r3, r1
   d4fc2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4fc4:	d007      	beq.n	d4fd6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4fc6:	6809      	ldr	r1, [r1, #0]
   d4fc8:	b119      	cbz	r1, d4fd2 <_ZN6StringaSERKS_+0x16>
   d4fca:	689a      	ldr	r2, [r3, #8]
   d4fcc:	f7ff ffcb 	bl	d4f66 <_ZN6String4copyEPKcj>
   d4fd0:	e001      	b.n	d4fd6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4fd2:	f7ff ffa0 	bl	d4f16 <_ZN6String10invalidateEv>

	return *this;
}
   d4fd6:	4620      	mov	r0, r4
   d4fd8:	bd10      	pop	{r4, pc}

000d4fda <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4fda:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4fdc:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4fde:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4fe0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4fe2:	6043      	str	r3, [r0, #4]
	len = 0;
   d4fe4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4fe6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d4fe8:	f7ff ffe8 	bl	d4fbc <_ZN6StringaSERKS_>
}
   d4fec:	4620      	mov	r0, r4
   d4fee:	bd10      	pop	{r4, pc}

000d4ff0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4ff0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4ff2:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4ff4:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4ff6:	b912      	cbnz	r2, d4ffe <_ZNK6String6equalsEPKc+0xe>
   d4ff8:	b919      	cbnz	r1, d5002 <_ZNK6String6equalsEPKc+0x12>
   d4ffa:	2001      	movs	r0, #1
   d4ffc:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4ffe:	b911      	cbnz	r1, d5006 <_ZNK6String6equalsEPKc+0x16>
   d5000:	6803      	ldr	r3, [r0, #0]
   d5002:	7818      	ldrb	r0, [r3, #0]
   d5004:	e002      	b.n	d500c <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5006:	6800      	ldr	r0, [r0, #0]
   d5008:	f002 fb7e 	bl	d7708 <strcmp>
   d500c:	fab0 f080 	clz	r0, r0
   d5010:	0940      	lsrs	r0, r0, #5
}
   d5012:	bd08      	pop	{r3, pc}

000d5014 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5014:	b510      	push	{r4, lr}
   d5016:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5018:	6800      	ldr	r0, [r0, #0]
   d501a:	b108      	cbz	r0, d5020 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d501c:	f7ff fd42 	bl	d4aa4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5020:	4620      	mov	r0, r4
   d5022:	bd10      	pop	{r4, pc}

000d5024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5024:	680b      	ldr	r3, [r1, #0]
   d5026:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5028:	b113      	cbz	r3, d5030 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d502a:	685a      	ldr	r2, [r3, #4]
   d502c:	3201      	adds	r2, #1
   d502e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5030:	4770      	bx	lr
	...

000d5034 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5034:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5036:	4c06      	ldr	r4, [pc, #24]	; (d5050 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5038:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d503a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d503c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d503e:	f7ff fd29 	bl	d4a94 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5042:	4620      	mov	r0, r4
   d5044:	4a03      	ldr	r2, [pc, #12]	; (d5054 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5046:	4904      	ldr	r1, [pc, #16]	; (d5058 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d504c:	f001 b8d4 	b.w	d61f8 <__aeabi_atexit>
   d5050:	2003e3bc 	.word	0x2003e3bc
   d5054:	2003e1c8 	.word	0x2003e1c8
   d5058:	000d5015 	.word	0x000d5015

000d505c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d505e:	4606      	mov	r6, r0
   d5060:	460d      	mov	r5, r1
   d5062:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5064:	2400      	movs	r4, #0
  while (size--) {
   d5066:	42bd      	cmp	r5, r7
   d5068:	d00c      	beq.n	d5084 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d506a:	6833      	ldr	r3, [r6, #0]
   d506c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5070:	689b      	ldr	r3, [r3, #8]
   d5072:	4630      	mov	r0, r6
   d5074:	4798      	blx	r3
     if (chunk>=0)
   d5076:	2800      	cmp	r0, #0
   d5078:	db01      	blt.n	d507e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d507a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d507c:	e7f3      	b.n	d5066 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d507e:	2c00      	cmp	r4, #0
   d5080:	bf08      	it	eq
   d5082:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5084:	4620      	mov	r0, r4
   d5086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5088 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5088:	b570      	push	{r4, r5, r6, lr}
   d508a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d508c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d508e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5090:	b149      	cbz	r1, d50a6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5092:	f002 fb5e 	bl	d7752 <strlen>
   d5096:	682b      	ldr	r3, [r5, #0]
   d5098:	4602      	mov	r2, r0
   d509a:	4621      	mov	r1, r4
   d509c:	4628      	mov	r0, r5
   d509e:	68db      	ldr	r3, [r3, #12]
    }
   d50a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d50a4:	4718      	bx	r3
    }
   d50a6:	bd70      	pop	{r4, r5, r6, pc}

000d50a8 <_ZN5Print5printEPKc>:
   d50a8:	b508      	push	{r3, lr}
   d50aa:	f7ff ffed 	bl	d5088 <_ZN5Print5writeEPKc>
   d50ae:	bd08      	pop	{r3, pc}

000d50b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d50b0:	6803      	ldr	r3, [r0, #0]
   d50b2:	689b      	ldr	r3, [r3, #8]
   d50b4:	4718      	bx	r3

000d50b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d50b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d50b8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d50ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   d50bc:	f7ff fff8 	bl	d50b0 <_ZN5Print5printEc>
  n += print('\n');
   d50c0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d50c2:	4604      	mov	r4, r0
  n += print('\n');
   d50c4:	4628      	mov	r0, r5
   d50c6:	f7ff fff3 	bl	d50b0 <_ZN5Print5printEc>
  return n;
}
   d50ca:	4420      	add	r0, r4
   d50cc:	bd38      	pop	{r3, r4, r5, pc}

000d50ce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d50ce:	b538      	push	{r3, r4, r5, lr}
   d50d0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d50d2:	f7ff ffd9 	bl	d5088 <_ZN5Print5writeEPKc>
   d50d6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d50d8:	4628      	mov	r0, r5
   d50da:	f7ff ffec 	bl	d50b6 <_ZN5Print7printlnEv>
  return n;
}
   d50de:	4420      	add	r0, r4
   d50e0:	bd38      	pop	{r3, r4, r5, pc}

000d50e2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d50e2:	b530      	push	{r4, r5, lr}
   d50e4:	b08b      	sub	sp, #44	; 0x2c
   d50e6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d50e8:	2100      	movs	r1, #0
   d50ea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d50ee:	2a01      	cmp	r2, #1
   d50f0:	bf98      	it	ls
   d50f2:	220a      	movls	r2, #10
   d50f4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d50f8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d50fc:	fb05 3312 	mls	r3, r5, r2, r3
   d5100:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5104:	2b09      	cmp	r3, #9
   d5106:	bf94      	ite	ls
   d5108:	3330      	addls	r3, #48	; 0x30
   d510a:	3337      	addhi	r3, #55	; 0x37
   d510c:	b2db      	uxtb	r3, r3
   d510e:	4621      	mov	r1, r4
   d5110:	f804 3901 	strb.w	r3, [r4], #-1
   d5114:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5116:	2d00      	cmp	r5, #0
   d5118:	d1ee      	bne.n	d50f8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d511a:	f7ff ffb5 	bl	d5088 <_ZN5Print5writeEPKc>
}
   d511e:	b00b      	add	sp, #44	; 0x2c
   d5120:	bd30      	pop	{r4, r5, pc}

000d5122 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5122:	b40c      	push	{r2, r3}
   d5124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5128:	b087      	sub	sp, #28
   d512a:	af00      	add	r7, sp, #0
   d512c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5130:	4605      	mov	r5, r0
   d5132:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5136:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5138:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d513a:	4623      	mov	r3, r4
   d513c:	464a      	mov	r2, r9
   d513e:	2114      	movs	r1, #20
   d5140:	1d38      	adds	r0, r7, #4
   d5142:	f7ff fe5b 	bl	d4dfc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5146:	2813      	cmp	r0, #19
   d5148:	d805      	bhi.n	d5156 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d514a:	1d39      	adds	r1, r7, #4
   d514c:	4628      	mov	r0, r5
   d514e:	f7ff ff9b 	bl	d5088 <_ZN5Print5writeEPKc>
   d5152:	4604      	mov	r4, r0
   d5154:	e013      	b.n	d517e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5156:	f100 0308 	add.w	r3, r0, #8
   d515a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d515e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5160:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5164:	1c41      	adds	r1, r0, #1
   d5166:	4623      	mov	r3, r4
   d5168:	464a      	mov	r2, r9
   d516a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d516c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d516e:	f7ff fe45 	bl	d4dfc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5172:	4669      	mov	r1, sp
   d5174:	4628      	mov	r0, r5
   d5176:	f7ff ff87 	bl	d5088 <_ZN5Print5writeEPKc>
   d517a:	4604      	mov	r4, r0
   d517c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d517e:	b11e      	cbz	r6, d5188 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5180:	4628      	mov	r0, r5
   d5182:	f7ff ff98 	bl	d50b6 <_ZN5Print7printlnEv>
   d5186:	4404      	add	r4, r0
    return n;
}
   d5188:	4620      	mov	r0, r4
   d518a:	371c      	adds	r7, #28
   d518c:	46bd      	mov	sp, r7
   d518e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5192:	b002      	add	sp, #8
   d5194:	4770      	bx	lr
	...

000d5198 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5198:	4b01      	ldr	r3, [pc, #4]	; (d51a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d519a:	4a02      	ldr	r2, [pc, #8]	; (d51a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d519c:	601a      	str	r2, [r3, #0]
   d519e:	4770      	bx	lr
   d51a0:	2003e3c0 	.word	0x2003e3c0
   d51a4:	000d7933 	.word	0x000d7933

000d51a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d51a8:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d51aa:	681a      	ldr	r2, [r3, #0]
   d51ac:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d51ae:	601a      	str	r2, [r3, #0]
   d51b0:	4770      	bx	lr
   d51b2:	bf00      	nop
   d51b4:	2003e15c 	.word	0x2003e15c
   d51b8:	2003e3c4 	.word	0x2003e3c4

000d51bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d51bc:	2100      	movs	r1, #0
   d51be:	f7ff bd59 	b.w	d4c74 <system_delay_ms>

000d51c2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51c2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d51c4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51c6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d51c8:	b113      	cbz	r3, d51d0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d51ca:	2203      	movs	r2, #3
   d51cc:	4601      	mov	r1, r0
   d51ce:	4798      	blx	r3
    }
   d51d0:	4620      	mov	r0, r4
   d51d2:	bd10      	pop	{r4, pc}

000d51d4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d51d4:	b510      	push	{r4, lr}
   d51d6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51d8:	f7ff fff3 	bl	d51c2 <_ZNSt14_Function_baseD1Ev>
   d51dc:	4620      	mov	r0, r4
   d51de:	bd10      	pop	{r4, pc}

000d51e0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d51e0:	b513      	push	{r0, r1, r4, lr}
   d51e2:	460b      	mov	r3, r1
   d51e4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51e6:	c803      	ldmia	r0, {r0, r1}
   d51e8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d51ec:	e893 0003 	ldmia.w	r3, {r0, r1}
   d51f0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d51f4:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d51f8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d51fc:	b002      	add	sp, #8
   d51fe:	bd10      	pop	{r4, pc}

000d5200 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5200:	4803      	ldr	r0, [pc, #12]	; (d5210 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5202:	4a04      	ldr	r2, [pc, #16]	; (d5214 <_GLOBAL__sub_I_RGB+0x14>)
   d5204:	4904      	ldr	r1, [pc, #16]	; (d5218 <_GLOBAL__sub_I_RGB+0x18>)
   d5206:	2300      	movs	r3, #0
   d5208:	6083      	str	r3, [r0, #8]
   d520a:	f000 bff5 	b.w	d61f8 <__aeabi_atexit>
   d520e:	bf00      	nop
   d5210:	2003e3c8 	.word	0x2003e3c8
   d5214:	2003e1c8 	.word	0x2003e1c8
   d5218:	000d51d5 	.word	0x000d51d5

000d521c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d521c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d521e:	4b0c      	ldr	r3, [pc, #48]	; (d5250 <serialEventRun+0x34>)
   d5220:	b133      	cbz	r3, d5230 <serialEventRun+0x14>
   d5222:	f000 fc47 	bl	d5ab4 <_Z16_fetch_usbserialv>
   d5226:	6803      	ldr	r3, [r0, #0]
   d5228:	691b      	ldr	r3, [r3, #16]
   d522a:	4798      	blx	r3
   d522c:	2800      	cmp	r0, #0
   d522e:	dc09      	bgt.n	d5244 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5230:	4b08      	ldr	r3, [pc, #32]	; (d5254 <serialEventRun+0x38>)
   d5232:	b163      	cbz	r3, d524e <serialEventRun+0x32>
   d5234:	f000 fd0c 	bl	d5c50 <_Z22__fetch_global_Serial1v>
   d5238:	6803      	ldr	r3, [r0, #0]
   d523a:	691b      	ldr	r3, [r3, #16]
   d523c:	4798      	blx	r3
   d523e:	2800      	cmp	r0, #0
   d5240:	dc03      	bgt.n	d524a <serialEventRun+0x2e>
   d5242:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5244:	f3af 8000 	nop.w
   d5248:	e7f2      	b.n	d5230 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d524a:	f3af 8000 	nop.w
   d524e:	bd08      	pop	{r3, pc}
	...

000d5258 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5258:	b508      	push	{r3, lr}
	serialEventRun();
   d525a:	f7ff ffdf 	bl	d521c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d525e:	f7ff fbf9 	bl	d4a54 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5262:	4b01      	ldr	r3, [pc, #4]	; (d5268 <_post_loop+0x10>)
   d5264:	6018      	str	r0, [r3, #0]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	2003e730 	.word	0x2003e730

000d526c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d526c:	4802      	ldr	r0, [pc, #8]	; (d5278 <_Z33system_initialize_user_backup_ramv+0xc>)
   d526e:	4a03      	ldr	r2, [pc, #12]	; (d527c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5270:	4903      	ldr	r1, [pc, #12]	; (d5280 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5272:	1a12      	subs	r2, r2, r0
   d5274:	f002 ba0c 	b.w	d7690 <memcpy>
   d5278:	2003f400 	.word	0x2003f400
   d527c:	2003f404 	.word	0x2003f404
   d5280:	000d7c10 	.word	0x000d7c10

000d5284 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5284:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5286:	2300      	movs	r3, #0
   d5288:	9300      	str	r3, [sp, #0]
   d528a:	461a      	mov	r2, r3
   d528c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5290:	f7ff fd12 	bl	d4cb8 <system_ctrl_set_result>
}
   d5294:	b003      	add	sp, #12
   d5296:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d529c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d529c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d529e:	8843      	ldrh	r3, [r0, #2]
   d52a0:	2b0a      	cmp	r3, #10
   d52a2:	d008      	beq.n	d52b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d52a4:	2b50      	cmp	r3, #80	; 0x50
   d52a6:	d109      	bne.n	d52bc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d52a8:	4b09      	ldr	r3, [pc, #36]	; (d52d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d52aa:	681b      	ldr	r3, [r3, #0]
   d52ac:	b13b      	cbz	r3, d52be <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d52ae:	b003      	add	sp, #12
   d52b0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d52b4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d52b6:	f7ff ffe5 	bl	d5284 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d52ba:	e006      	b.n	d52ca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52bc:	2300      	movs	r3, #0
   d52be:	9300      	str	r3, [sp, #0]
   d52c0:	461a      	mov	r2, r3
   d52c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52c6:	f7ff fcf7 	bl	d4cb8 <system_ctrl_set_result>
        break;
    }
}
   d52ca:	b003      	add	sp, #12
   d52cc:	f85d fb04 	ldr.w	pc, [sp], #4
   d52d0:	2003e3d8 	.word	0x2003e3d8

000d52d4 <module_user_init_hook>:

void module_user_init_hook()
{
   d52d4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d52d6:	4c10      	ldr	r4, [pc, #64]	; (d5318 <module_user_init_hook+0x44>)
   d52d8:	4d10      	ldr	r5, [pc, #64]	; (d531c <module_user_init_hook+0x48>)
   d52da:	6823      	ldr	r3, [r4, #0]
   d52dc:	42ab      	cmp	r3, r5
   d52de:	4b10      	ldr	r3, [pc, #64]	; (d5320 <module_user_init_hook+0x4c>)
   d52e0:	bf0c      	ite	eq
   d52e2:	2201      	moveq	r2, #1
   d52e4:	2200      	movne	r2, #0
   d52e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d52e8:	d002      	beq.n	d52f0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d52ea:	f7ff ffbf 	bl	d526c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d52ee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d52f0:	f7ff fba8 	bl	d4a44 <HAL_RNG_GetRandomNumber>
   d52f4:	4604      	mov	r4, r0
    srand(seed);
   d52f6:	f002 f9df 	bl	d76b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d52fa:	4b0a      	ldr	r3, [pc, #40]	; (d5324 <module_user_init_hook+0x50>)
   d52fc:	b113      	cbz	r3, d5304 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d52fe:	4620      	mov	r0, r4
   d5300:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5304:	2100      	movs	r1, #0
   d5306:	4807      	ldr	r0, [pc, #28]	; (d5324 <module_user_init_hook+0x50>)
   d5308:	f7ff fd50 	bl	d4dac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d530c:	2100      	movs	r1, #0
   d530e:	4806      	ldr	r0, [pc, #24]	; (d5328 <module_user_init_hook+0x54>)
}
   d5310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5314:	f7ff bcc6 	b.w	d4ca4 <system_ctrl_set_app_request_handler>
   d5318:	2003f400 	.word	0x2003f400
   d531c:	9a271c1e 	.word	0x9a271c1e
   d5320:	2003e3dc 	.word	0x2003e3dc
   d5324:	00000000 	.word	0x00000000
   d5328:	000d529d 	.word	0x000d529d

000d532c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d532c:	4770      	bx	lr

000d532e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d532e:	2000      	movs	r0, #0
   d5330:	4770      	bx	lr

000d5332 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5332:	b510      	push	{r4, lr}
   d5334:	2110      	movs	r1, #16
   d5336:	4604      	mov	r4, r0
   d5338:	f000 ff6c 	bl	d6214 <_ZdlPvj>
   d533c:	4620      	mov	r0, r4
   d533e:	bd10      	pop	{r4, pc}

000d5340 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5340:	b508      	push	{r3, lr}
      { delete this; }
   d5342:	b108      	cbz	r0, d5348 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5344:	f7ff fff5 	bl	d5332 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5348:	bd08      	pop	{r3, pc}

000d534a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d534a:	2200      	movs	r2, #0
   d534c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d534e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5350:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5354:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5356:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d535a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d535c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d535e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5360:	680c      	ldr	r4, [r1, #0]
   d5362:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5364:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5366:	bd10      	pop	{r4, pc}

000d5368 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5368:	b510      	push	{r4, lr}
   d536a:	4604      	mov	r4, r0
    free((void*)msg_);
   d536c:	6800      	ldr	r0, [r0, #0]
   d536e:	f7ff fd2d 	bl	d4dcc <free>
}
   d5372:	4620      	mov	r0, r4
   d5374:	bd10      	pop	{r4, pc}

000d5376 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5376:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5378:	68c4      	ldr	r4, [r0, #12]
   d537a:	b1f4      	cbz	r4, d53ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d537c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d537e:	2b02      	cmp	r3, #2
   d5380:	d103      	bne.n	d538a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5382:	f104 000c 	add.w	r0, r4, #12
   d5386:	f7ff ffef 	bl	d5368 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d538a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d538c:	b135      	cbz	r5, d539c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d538e:	4628      	mov	r0, r5
   d5390:	f7ff ff17 	bl	d51c2 <_ZNSt14_Function_baseD1Ev>
   d5394:	2110      	movs	r1, #16
   d5396:	4628      	mov	r0, r5
   d5398:	f000 ff3c 	bl	d6214 <_ZdlPvj>
   d539c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d539e:	b135      	cbz	r5, d53ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d53a0:	4628      	mov	r0, r5
   d53a2:	f7ff ff0e 	bl	d51c2 <_ZNSt14_Function_baseD1Ev>
   d53a6:	2110      	movs	r1, #16
   d53a8:	4628      	mov	r0, r5
   d53aa:	f000 ff33 	bl	d6214 <_ZdlPvj>
   d53ae:	4620      	mov	r0, r4
   d53b0:	2114      	movs	r1, #20
   d53b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d53b6:	f000 bf2d 	b.w	d6214 <_ZdlPvj>
   d53ba:	bd38      	pop	{r3, r4, r5, pc}

000d53bc <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d53bc:	b510      	push	{r4, lr}
   d53be:	b088      	sub	sp, #32
   d53c0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d53c2:	4668      	mov	r0, sp
   d53c4:	f7ff fde7 	bl	d4f96 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d53c8:	4669      	mov	r1, sp
   d53ca:	a804      	add	r0, sp, #16
   d53cc:	f7ff fe05 	bl	d4fda <_ZN6StringC1ERKS_>
   d53d0:	a804      	add	r0, sp, #16
   d53d2:	47a0      	blx	r4
   d53d4:	4604      	mov	r4, r0
   d53d6:	a804      	add	r0, sp, #16
   d53d8:	f7ff fd96 	bl	d4f08 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d53dc:	4668      	mov	r0, sp
   d53de:	f7ff fd93 	bl	d4f08 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d53e2:	4620      	mov	r0, r4
   d53e4:	b008      	add	sp, #32
   d53e6:	bd10      	pop	{r4, pc}

000d53e8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d53e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d53ea:	2410      	movs	r4, #16
   d53ec:	b085      	sub	sp, #20
   d53ee:	4607      	mov	r7, r0
   d53f0:	460e      	mov	r6, r1
   d53f2:	4615      	mov	r5, r2
   d53f4:	2100      	movs	r1, #0
   d53f6:	4622      	mov	r2, r4
   d53f8:	4668      	mov	r0, sp
   d53fa:	f002 f954 	bl	d76a6 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d53fe:	2200      	movs	r2, #0
   d5400:	4669      	mov	r1, sp
   d5402:	4610      	mov	r0, r2
         size = sizeof(*this);
   d5404:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d5408:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d540a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d540c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d540e:	f7ff fcb5 	bl	d4d7c <spark_function>
}
   d5412:	b005      	add	sp, #20
   d5414:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5416 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5416:	b513      	push	{r0, r1, r4, lr}
   d5418:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d541a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d541e:	2300      	movs	r3, #0
   d5420:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5422:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5424:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5426:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5428:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d542a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d542c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d542e:	f7ff f8e3 	bl	d45f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5432:	4620      	mov	r0, r4
   d5434:	b002      	add	sp, #8
   d5436:	bd10      	pop	{r4, pc}

000d5438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d543a:	460c      	mov	r4, r1
   d543c:	ad02      	add	r5, sp, #8
   d543e:	f854 3b04 	ldr.w	r3, [r4], #4
   d5442:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5446:	4606      	mov	r6, r0
   d5448:	460f      	mov	r7, r1
   d544a:	a801      	add	r0, sp, #4
   d544c:	4621      	mov	r1, r4
   d544e:	f7ff fde9 	bl	d5024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5452:	4629      	mov	r1, r5
   d5454:	4630      	mov	r0, r6
   d5456:	f7ff ffde 	bl	d5416 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d545a:	a801      	add	r0, sp, #4
   d545c:	f7ff f8cc 	bl	d45f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5460:	4620      	mov	r0, r4
   d5462:	f7ff f8c9 	bl	d45f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5466:	4638      	mov	r0, r7
   d5468:	2108      	movs	r1, #8
   d546a:	f000 fed3 	bl	d6214 <_ZdlPvj>
        return p;
    }
   d546e:	4630      	mov	r0, r6
   d5470:	b003      	add	sp, #12
   d5472:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5474 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5474:	b538      	push	{r3, r4, r5, lr}
   d5476:	2300      	movs	r3, #0
   d5478:	4604      	mov	r4, r0
   d547a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d547c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d547e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5480:	f7fe fe0b 	bl	d409a <_Znwj>
   d5484:	b128      	cbz	r0, d5492 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5486:	2301      	movs	r3, #1
   d5488:	6043      	str	r3, [r0, #4]
   d548a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d548c:	4b02      	ldr	r3, [pc, #8]	; (d5498 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d548e:	6003      	str	r3, [r0, #0]
   d5490:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5492:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5494:	4620      	mov	r0, r4
   d5496:	bd38      	pop	{r3, r4, r5, pc}
   d5498:	000d79cc 	.word	0x000d79cc

000d549c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d549c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d549e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54a0:	b90a      	cbnz	r2, d54a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d54a2:	f000 feca 	bl	d623a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54a6:	68c3      	ldr	r3, [r0, #12]
    }
   d54a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54ac:	4718      	bx	r3

000d54ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d54ae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54b0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d54b2:	f100 0110 	add.w	r1, r0, #16
   d54b6:	f7ff fff1 	bl	d549c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d54ba:	bd08      	pop	{r3, pc}

000d54bc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54bc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d54be:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54c0:	b90a      	cbnz	r2, d54c6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d54c2:	f000 feba 	bl	d623a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54c6:	68c3      	ldr	r3, [r0, #12]
    }
   d54c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54cc:	4718      	bx	r3

000d54ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d54ce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54d0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d54d2:	f100 0110 	add.w	r1, r0, #16
   d54d6:	f7ff fff1 	bl	d54bc <_ZNKSt8functionIFvRKbEEclES1_>
   d54da:	bd08      	pop	{r3, pc}

000d54dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54dc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54de:	2300      	movs	r3, #0
   d54e0:	6083      	str	r3, [r0, #8]
   d54e2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54e4:	4604      	mov	r4, r0
   d54e6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d54e8:	b12b      	cbz	r3, d54f6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d54ea:	2202      	movs	r2, #2
   d54ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d54ee:	68eb      	ldr	r3, [r5, #12]
   d54f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d54f2:	68ab      	ldr	r3, [r5, #8]
   d54f4:	60a3      	str	r3, [r4, #8]
	}
    }
   d54f6:	4620      	mov	r0, r4
   d54f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d54fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d54fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d54fe:	b089      	sub	sp, #36	; 0x24
   d5500:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5502:	4668      	mov	r0, sp
   d5504:	f7ff ff21 	bl	d534a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5508:	2300      	movs	r3, #0
   d550a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d550e:	f04f 0202 	mov.w	r2, #2
   d5512:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5516:	2b00      	cmp	r3, #0
   d5518:	d103      	bne.n	d5522 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d551a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d551e:	2900      	cmp	r1, #0
   d5520:	d1f7      	bne.n	d5512 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5522:	d002      	beq.n	d552a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5524:	f88d 3008 	strb.w	r3, [sp, #8]
   d5528:	e063      	b.n	d55f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d552a:	f114 050c 	adds.w	r5, r4, #12
   d552e:	d003      	beq.n	d5538 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5530:	4669      	mov	r1, sp
   d5532:	4628      	mov	r0, r5
   d5534:	f7ff ff09 	bl	d534a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5538:	f3bf 8f5f 	dmb	sy
   d553c:	2301      	movs	r3, #1
   d553e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5540:	2000      	movs	r0, #0
   d5542:	f104 0308 	add.w	r3, r4, #8
   d5546:	f3bf 8f5f 	dmb	sy
   d554a:	e853 6f00 	ldrex	r6, [r3]
   d554e:	e843 0200 	strex	r2, r0, [r3]
   d5552:	2a00      	cmp	r2, #0
   d5554:	d1f9      	bne.n	d554a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5556:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d555a:	2e00      	cmp	r6, #0
   d555c:	d049      	beq.n	d55f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d555e:	f7ff fb91 	bl	d4c84 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5562:	b120      	cbz	r0, d556e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5564:	4629      	mov	r1, r5
   d5566:	4630      	mov	r0, r6
   d5568:	f7ff ff98 	bl	d549c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d556c:	e03a      	b.n	d55e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d556e:	4631      	mov	r1, r6
   d5570:	a802      	add	r0, sp, #8
   d5572:	f7ff ffb3 	bl	d54dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5576:	68e0      	ldr	r0, [r4, #12]
   d5578:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d557c:	b108      	cbz	r0, d5582 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d557e:	f002 f8cd 	bl	d771c <strdup>
   d5582:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5584:	2010      	movs	r0, #16
   d5586:	f8ad 501c 	strh.w	r5, [sp, #28]
   d558a:	f7fe fd86 	bl	d409a <_Znwj>
   d558e:	4605      	mov	r5, r0
   d5590:	b1e8      	cbz	r0, d55ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5592:	2700      	movs	r7, #0
   d5594:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5596:	2018      	movs	r0, #24
   d5598:	f7fe fd7f 	bl	d409a <_Znwj>
   d559c:	4604      	mov	r4, r0
   d559e:	b188      	cbz	r0, d55c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d55a0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d55a2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d55a4:	a802      	add	r0, sp, #8
   d55a6:	f7ff fe1b 	bl	d51e0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55aa:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d55ac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d55ae:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55b0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d55b2:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d55b4:	a906      	add	r1, sp, #24
   d55b6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d55b8:	60e3      	str	r3, [r4, #12]
   d55ba:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d55be:	9205      	str	r2, [sp, #20]
   d55c0:	f7ff fec3 	bl	d534a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d55c4:	4b0d      	ldr	r3, [pc, #52]	; (d55fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d55c6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d55c8:	4b0d      	ldr	r3, [pc, #52]	; (d5600 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55ca:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d55cc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d55ce:	a806      	add	r0, sp, #24
   d55d0:	f7ff feca 	bl	d5368 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55d4:	a802      	add	r0, sp, #8
   d55d6:	f7ff fdf4 	bl	d51c2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d55da:	2200      	movs	r2, #0
   d55dc:	4629      	mov	r1, r5
   d55de:	4809      	ldr	r0, [pc, #36]	; (d5604 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d55e0:	f7ff fb58 	bl	d4c94 <application_thread_invoke>
   d55e4:	4630      	mov	r0, r6
   d55e6:	f7ff fdec 	bl	d51c2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d55ea:	2110      	movs	r1, #16
   d55ec:	4630      	mov	r0, r6
   d55ee:	f000 fe11 	bl	d6214 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d55f2:	4668      	mov	r0, sp
   d55f4:	f7ff feb8 	bl	d5368 <_ZN8particle5ErrorD1Ev>
    }
   d55f8:	b009      	add	sp, #36	; 0x24
   d55fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55fc:	000d54af 	.word	0x000d54af
   d5600:	000d5725 	.word	0x000d5725
   d5604:	000d5c9d 	.word	0x000d5c9d

000d5608 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d560c:	b08b      	sub	sp, #44	; 0x2c
   d560e:	4606      	mov	r6, r0
   d5610:	460f      	mov	r7, r1
   d5612:	4690      	mov	r8, r2
   d5614:	4699      	mov	r9, r3
   d5616:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d561a:	f7ff fbb7 	bl	d4d8c <spark_cloud_flag_connected>
   d561e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5620:	4683      	mov	fp, r0
   d5622:	bb30      	cbnz	r0, d5672 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5624:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5628:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d562a:	a905      	add	r1, sp, #20
   d562c:	4628      	mov	r0, r5
   d562e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5632:	f7ff fe8a 	bl	d534a <_ZN8particle5ErrorC1EOS0_>
   d5636:	2014      	movs	r0, #20
   d5638:	f7fe fd2f 	bl	d409a <_Znwj>
   d563c:	4604      	mov	r4, r0
   d563e:	b158      	cbz	r0, d5658 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5640:	2302      	movs	r3, #2
   d5642:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5644:	2301      	movs	r3, #1
   d5646:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5648:	f8c0 b004 	str.w	fp, [r0, #4]
   d564c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5650:	4629      	mov	r1, r5
   d5652:	300c      	adds	r0, #12
   d5654:	f7ff fe79 	bl	d534a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5658:	4630      	mov	r0, r6
   d565a:	4621      	mov	r1, r4
   d565c:	f840 4b04 	str.w	r4, [r0], #4
   d5660:	f7ff ff08 	bl	d5474 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5664:	4628      	mov	r0, r5
   d5666:	f7ff fe7f 	bl	d5368 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d566a:	a805      	add	r0, sp, #20
   d566c:	f7ff fe7c 	bl	d5368 <_ZN8particle5ErrorD1Ev>
   d5670:	e052      	b.n	d5718 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5672:	2400      	movs	r4, #0
   d5674:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5676:	2014      	movs	r0, #20
   d5678:	606c      	str	r4, [r5, #4]
   d567a:	60ac      	str	r4, [r5, #8]
   d567c:	9307      	str	r3, [sp, #28]
   d567e:	f7fe fd0c 	bl	d409a <_Znwj>
   d5682:	4601      	mov	r1, r0
   d5684:	b118      	cbz	r0, d568e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5686:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5688:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d568a:	6044      	str	r4, [r0, #4]
   d568c:	6084      	str	r4, [r0, #8]
   d568e:	a804      	add	r0, sp, #16
   d5690:	9103      	str	r1, [sp, #12]
   d5692:	f7ff feef 	bl	d5474 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5696:	4b22      	ldr	r3, [pc, #136]	; (d5720 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5698:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d569a:	2008      	movs	r0, #8
   d569c:	f7fe fcfd 	bl	d409a <_Znwj>
   d56a0:	4604      	mov	r4, r0
   d56a2:	b128      	cbz	r0, d56b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56a4:	9b03      	ldr	r3, [sp, #12]
   d56a6:	f840 3b04 	str.w	r3, [r0], #4
   d56aa:	a904      	add	r1, sp, #16
   d56ac:	f7ff fcba 	bl	d5024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d56b0:	9500      	str	r5, [sp, #0]
   d56b2:	fa5f f38a 	uxtb.w	r3, sl
   d56b6:	464a      	mov	r2, r9
   d56b8:	4641      	mov	r1, r8
   d56ba:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d56bc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d56be:	f7ff fb6d 	bl	d4d9c <spark_send_event>
   d56c2:	b920      	cbnz	r0, d56ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d56c4:	9b03      	ldr	r3, [sp, #12]
   d56c6:	785b      	ldrb	r3, [r3, #1]
   d56c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d56cc:	b183      	cbz	r3, d56f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d56ce:	9b03      	ldr	r3, [sp, #12]
   d56d0:	9305      	str	r3, [sp, #20]
   d56d2:	a904      	add	r1, sp, #16
   d56d4:	a806      	add	r0, sp, #24
   d56d6:	f7ff fca5 	bl	d5024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d56da:	a905      	add	r1, sp, #20
   d56dc:	4630      	mov	r0, r6
   d56de:	f7ff fe9a 	bl	d5416 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56e2:	a806      	add	r0, sp, #24
   d56e4:	f7fe ff88 	bl	d45f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56e8:	a804      	add	r0, sp, #16
   d56ea:	f7fe ff85 	bl	d45f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56ee:	e013      	b.n	d5718 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d56f0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d56f4:	a905      	add	r1, sp, #20
   d56f6:	a803      	add	r0, sp, #12
   d56f8:	9205      	str	r2, [sp, #20]
   d56fa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d56fe:	f7ff fefd 	bl	d54fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5702:	a805      	add	r0, sp, #20
   d5704:	f7ff fe30 	bl	d5368 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5708:	a805      	add	r0, sp, #20
   d570a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d570c:	f7ff fe94 	bl	d5438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5710:	a806      	add	r0, sp, #24
   d5712:	f7fe ff71 	bl	d45f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5716:	e7da      	b.n	d56ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5718:	4630      	mov	r0, r6
   d571a:	b00b      	add	sp, #44	; 0x2c
   d571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5720:	000d5895 	.word	0x000d5895

000d5724 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5724:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5728:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d572a:	d006      	beq.n	d573a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d572c:	2a03      	cmp	r2, #3
   d572e:	d017      	beq.n	d5760 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5730:	2a01      	cmp	r2, #1
   d5732:	d122      	bne.n	d577a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5734:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5736:	6003      	str	r3, [r0, #0]
	      break;
   d5738:	e01f      	b.n	d577a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d573a:	2018      	movs	r0, #24
   d573c:	680e      	ldr	r6, [r1, #0]
   d573e:	f7fe fcac 	bl	d409a <_Znwj>
   d5742:	4605      	mov	r5, r0
   d5744:	b150      	cbz	r0, d575c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5746:	4631      	mov	r1, r6
   d5748:	f7ff fec8 	bl	d54dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d574c:	6930      	ldr	r0, [r6, #16]
   d574e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5752:	b108      	cbz	r0, d5758 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5754:	f001 ffe2 	bl	d771c <strdup>
   d5758:	6128      	str	r0, [r5, #16]
   d575a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d575c:	6025      	str	r5, [r4, #0]
   d575e:	e00c      	b.n	d577a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5760:	6804      	ldr	r4, [r0, #0]
   d5762:	b154      	cbz	r4, d577a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5764:	f104 0010 	add.w	r0, r4, #16
   d5768:	f7ff fdfe 	bl	d5368 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d576c:	4620      	mov	r0, r4
   d576e:	f7ff fd28 	bl	d51c2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5772:	2118      	movs	r1, #24
   d5774:	4620      	mov	r0, r4
   d5776:	f000 fd4d 	bl	d6214 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d577a:	2000      	movs	r0, #0
   d577c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d577e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d577e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5780:	2300      	movs	r3, #0
   d5782:	6083      	str	r3, [r0, #8]
   d5784:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5786:	4604      	mov	r4, r0
   d5788:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d578a:	b12b      	cbz	r3, d5798 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d578c:	2202      	movs	r2, #2
   d578e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5790:	68eb      	ldr	r3, [r5, #12]
   d5792:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5794:	68ab      	ldr	r3, [r5, #8]
   d5796:	60a3      	str	r3, [r4, #8]
	}
    }
   d5798:	4620      	mov	r0, r4
   d579a:	bd38      	pop	{r3, r4, r5, pc}

000d579c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d579c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d579e:	b570      	push	{r4, r5, r6, lr}
   d57a0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d57a2:	d006      	beq.n	d57b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d57a4:	2a03      	cmp	r2, #3
   d57a6:	d011      	beq.n	d57cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d57a8:	2a01      	cmp	r2, #1
   d57aa:	d118      	bne.n	d57de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d57ac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d57ae:	6003      	str	r3, [r0, #0]
	      break;
   d57b0:	e015      	b.n	d57de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d57b2:	2014      	movs	r0, #20
   d57b4:	680e      	ldr	r6, [r1, #0]
   d57b6:	f7fe fc70 	bl	d409a <_Znwj>
   d57ba:	4605      	mov	r5, r0
   d57bc:	b120      	cbz	r0, d57c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d57be:	4631      	mov	r1, r6
   d57c0:	f7ff ffdd 	bl	d577e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d57c4:	7c33      	ldrb	r3, [r6, #16]
   d57c6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d57c8:	6025      	str	r5, [r4, #0]
   d57ca:	e008      	b.n	d57de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d57cc:	6804      	ldr	r4, [r0, #0]
   d57ce:	b134      	cbz	r4, d57de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d57d0:	4620      	mov	r0, r4
   d57d2:	f7ff fcf6 	bl	d51c2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d57d6:	2114      	movs	r1, #20
   d57d8:	4620      	mov	r0, r4
   d57da:	f000 fd1b 	bl	d6214 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d57de:	2000      	movs	r0, #0
   d57e0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d57e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d57e4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d57e6:	2300      	movs	r3, #0
   d57e8:	b087      	sub	sp, #28
   d57ea:	460c      	mov	r4, r1
   d57ec:	f3bf 8f5f 	dmb	sy
   d57f0:	e850 6f00 	ldrex	r6, [r0]
   d57f4:	e840 3200 	strex	r2, r3, [r0]
   d57f8:	2a00      	cmp	r2, #0
   d57fa:	d1f9      	bne.n	d57f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d57fc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5800:	2e00      	cmp	r6, #0
   d5802:	d03f      	beq.n	d5884 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5804:	4618      	mov	r0, r3
   d5806:	f7ff fa3d 	bl	d4c84 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d580a:	4607      	mov	r7, r0
   d580c:	b120      	cbz	r0, d5818 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d580e:	4621      	mov	r1, r4
   d5810:	4630      	mov	r0, r6
   d5812:	f7ff fe53 	bl	d54bc <_ZNKSt8functionIFvRKbEEclES1_>
   d5816:	e02e      	b.n	d5876 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5818:	4631      	mov	r1, r6
   d581a:	a801      	add	r0, sp, #4
   d581c:	f7ff ffaf 	bl	d577e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5820:	7823      	ldrb	r3, [r4, #0]
   d5822:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5826:	2010      	movs	r0, #16
   d5828:	f7fe fc37 	bl	d409a <_Znwj>
   d582c:	4605      	mov	r5, r0
   d582e:	b1d0      	cbz	r0, d5866 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5830:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5832:	2014      	movs	r0, #20
   d5834:	f7fe fc31 	bl	d409a <_Znwj>
   d5838:	4604      	mov	r4, r0
   d583a:	b178      	cbz	r0, d585c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d583c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d583e:	4601      	mov	r1, r0
   d5840:	a801      	add	r0, sp, #4
   d5842:	f7ff fccd 	bl	d51e0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5846:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5848:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d584a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d584c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d584e:	9203      	str	r2, [sp, #12]
   d5850:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5852:	60e3      	str	r3, [r4, #12]
   d5854:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5858:	9204      	str	r2, [sp, #16]
   d585a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d585c:	4b0a      	ldr	r3, [pc, #40]	; (d5888 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d585e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5860:	4b0a      	ldr	r3, [pc, #40]	; (d588c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5862:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5864:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5866:	a801      	add	r0, sp, #4
   d5868:	f7ff fcab 	bl	d51c2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d586c:	2200      	movs	r2, #0
   d586e:	4629      	mov	r1, r5
   d5870:	4807      	ldr	r0, [pc, #28]	; (d5890 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5872:	f7ff fa0f 	bl	d4c94 <application_thread_invoke>
   d5876:	4630      	mov	r0, r6
   d5878:	f7ff fca3 	bl	d51c2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d587c:	2110      	movs	r1, #16
   d587e:	4630      	mov	r0, r6
   d5880:	f000 fcc8 	bl	d6214 <_ZdlPvj>
        }
    }
   d5884:	b007      	add	sp, #28
   d5886:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5888:	000d54cf 	.word	0x000d54cf
   d588c:	000d579d 	.word	0x000d579d
   d5890:	000d5c9d 	.word	0x000d5c9d

000d5894 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5894:	b530      	push	{r4, r5, lr}
   d5896:	b085      	sub	sp, #20
   d5898:	4604      	mov	r4, r0
   d589a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d589c:	4668      	mov	r0, sp
   d589e:	4611      	mov	r1, r2
   d58a0:	f7ff fdca 	bl	d5438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d58a4:	b17c      	cbz	r4, d58c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d58a6:	b224      	sxth	r4, r4
   d58a8:	4628      	mov	r0, r5
   d58aa:	b10d      	cbz	r5, d58b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d58ac:	f001 ff36 	bl	d771c <strdup>
   d58b0:	9002      	str	r0, [sp, #8]
   d58b2:	a902      	add	r1, sp, #8
   d58b4:	4668      	mov	r0, sp
   d58b6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d58ba:	f7ff fe1f 	bl	d54fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d58be:	a802      	add	r0, sp, #8
   d58c0:	f7ff fd52 	bl	d5368 <_ZN8particle5ErrorD1Ev>
   d58c4:	e01d      	b.n	d5902 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d58c6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d58c8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d58cc:	f04f 0201 	mov.w	r2, #1
   d58d0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d58d4:	42a3      	cmp	r3, r4
   d58d6:	d103      	bne.n	d58e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d58d8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d58dc:	2900      	cmp	r1, #0
   d58de:	d1f7      	bne.n	d58d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d58e0:	d002      	beq.n	d58e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d58e2:	f88d 3008 	strb.w	r3, [sp, #8]
   d58e6:	e00c      	b.n	d5902 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d58e8:	f110 010c 	adds.w	r1, r0, #12
   d58ec:	f04f 0301 	mov.w	r3, #1
   d58f0:	bf18      	it	ne
   d58f2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d58f4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d58f8:	3004      	adds	r0, #4
   d58fa:	f800 3c03 	strb.w	r3, [r0, #-3]
   d58fe:	f7ff ff71 	bl	d57e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5902:	a801      	add	r0, sp, #4
   d5904:	f7fe fe78 	bl	d45f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5908:	b005      	add	sp, #20
   d590a:	bd30      	pop	{r4, r5, pc}

000d590c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d590c:	4770      	bx	lr

000d590e <_ZN9IPAddressD0Ev>:
   d590e:	b510      	push	{r4, lr}
   d5910:	2118      	movs	r1, #24
   d5912:	4604      	mov	r4, r0
   d5914:	f000 fc7e 	bl	d6214 <_ZdlPvj>
   d5918:	4620      	mov	r0, r4
   d591a:	bd10      	pop	{r4, pc}

000d591c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d591c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d591e:	7d03      	ldrb	r3, [r0, #20]
   d5920:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5922:	b08d      	sub	sp, #52	; 0x34
   d5924:	460e      	mov	r6, r1
   d5926:	f100 0704 	add.w	r7, r0, #4
   d592a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d592e:	d002      	beq.n	d5936 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5930:	f100 0508 	add.w	r5, r0, #8
   d5934:	e018      	b.n	d5968 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5936:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5938:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d593a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d593e:	232f      	movs	r3, #47	; 0x2f
   d5940:	462a      	mov	r2, r5
   d5942:	200a      	movs	r0, #10
   d5944:	f7ff f8b6 	bl	d4ab4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5948:	4628      	mov	r0, r5
   d594a:	f001 ff02 	bl	d7752 <strlen>
   d594e:	6833      	ldr	r3, [r6, #0]
   d5950:	4602      	mov	r2, r0
   d5952:	68db      	ldr	r3, [r3, #12]
   d5954:	4629      	mov	r1, r5
   d5956:	4630      	mov	r0, r6
   d5958:	4798      	blx	r3
   d595a:	e00f      	b.n	d597c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d595c:	b124      	cbz	r4, d5968 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d595e:	212e      	movs	r1, #46	; 0x2e
   d5960:	4630      	mov	r0, r6
   d5962:	f7ff fba5 	bl	d50b0 <_ZN5Print5printEc>
   d5966:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5968:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d596c:	220a      	movs	r2, #10
   d596e:	4630      	mov	r0, r6
   d5970:	f7ff fbb7 	bl	d50e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5974:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5976:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5978:	d1f0      	bne.n	d595c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d597a:	4620      	mov	r0, r4
    }
    return n;
}
   d597c:	b00d      	add	sp, #52	; 0x34
   d597e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5980 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5980:	b510      	push	{r4, lr}
   d5982:	4b05      	ldr	r3, [pc, #20]	; (d5998 <_ZN9IPAddressC1Ev+0x18>)
   d5984:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5986:	2211      	movs	r2, #17
   d5988:	f840 3b04 	str.w	r3, [r0], #4
   d598c:	2100      	movs	r1, #0
   d598e:	f001 fe8a 	bl	d76a6 <memset>
{
    clear();
}
   d5992:	4620      	mov	r0, r4
   d5994:	bd10      	pop	{r4, pc}
   d5996:	bf00      	nop
   d5998:	000d79e8 	.word	0x000d79e8

000d599c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d599c:	4603      	mov	r3, r0
   d599e:	4a07      	ldr	r2, [pc, #28]	; (d59bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d59a0:	b510      	push	{r4, lr}
   d59a2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d59a6:	f101 0210 	add.w	r2, r1, #16
   d59aa:	f851 4b04 	ldr.w	r4, [r1], #4
   d59ae:	f843 4b04 	str.w	r4, [r3], #4
   d59b2:	4291      	cmp	r1, r2
   d59b4:	d1f9      	bne.n	d59aa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d59b6:	780a      	ldrb	r2, [r1, #0]
   d59b8:	701a      	strb	r2, [r3, #0]
}
   d59ba:	bd10      	pop	{r4, pc}
   d59bc:	000d79e8 	.word	0x000d79e8

000d59c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d59c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d59c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d59c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d59ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d59ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d59d2:	2304      	movs	r3, #4
   d59d4:	6041      	str	r1, [r0, #4]
   d59d6:	7503      	strb	r3, [r0, #20]
   d59d8:	bd10      	pop	{r4, pc}

000d59da <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d59da:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d59dc:	780d      	ldrb	r5, [r1, #0]
   d59de:	788b      	ldrb	r3, [r1, #2]
   d59e0:	784a      	ldrb	r2, [r1, #1]
   d59e2:	78c9      	ldrb	r1, [r1, #3]
   d59e4:	9100      	str	r1, [sp, #0]
   d59e6:	4629      	mov	r1, r5
   d59e8:	f7ff ffea 	bl	d59c0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d59ec:	b003      	add	sp, #12
   d59ee:	bd30      	pop	{r4, r5, pc}

000d59f0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d59f0:	7441      	strb	r1, [r0, #17]
   d59f2:	4770      	bx	lr

000d59f4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d59f4:	4770      	bx	lr

000d59f6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d59f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d59f8:	2100      	movs	r1, #0
   d59fa:	7c00      	ldrb	r0, [r0, #16]
   d59fc:	f7ff f91a 	bl	d4c34 <HAL_USB_USART_Receive_Data>
}
   d5a00:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a04:	bf28      	it	cs
   d5a06:	f04f 30ff 	movcs.w	r0, #4294967295
   d5a0a:	bd08      	pop	{r3, pc}

000d5a0c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5a0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5a0e:	2101      	movs	r1, #1
   d5a10:	7c00      	ldrb	r0, [r0, #16]
   d5a12:	f7ff f90f 	bl	d4c34 <HAL_USB_USART_Receive_Data>
}
   d5a16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a1a:	bf28      	it	cs
   d5a1c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5a20:	bd08      	pop	{r3, pc}

000d5a22 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5a22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5a24:	7c00      	ldrb	r0, [r0, #16]
   d5a26:	f7ff f8fd 	bl	d4c24 <HAL_USB_USART_Available_Data_For_Write>
}
   d5a2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a2e:	bd08      	pop	{r3, pc}

000d5a30 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5a30:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5a32:	7c00      	ldrb	r0, [r0, #16]
   d5a34:	f7ff f8ee 	bl	d4c14 <HAL_USB_USART_Available_Data>
}
   d5a38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a3c:	bd08      	pop	{r3, pc}

000d5a3e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5a3e:	7c00      	ldrb	r0, [r0, #16]
   d5a40:	f7ff b908 	b.w	d4c54 <HAL_USB_USART_Flush_Data>

000d5a44 <_ZN9USBSerialD0Ev>:
   d5a44:	b510      	push	{r4, lr}
   d5a46:	2114      	movs	r1, #20
   d5a48:	4604      	mov	r4, r0
   d5a4a:	f000 fbe3 	bl	d6214 <_ZdlPvj>
   d5a4e:	4620      	mov	r0, r4
   d5a50:	bd10      	pop	{r4, pc}

000d5a52 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5a52:	b538      	push	{r3, r4, r5, lr}
   d5a54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a56:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5a58:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a5a:	f7ff f8e3 	bl	d4c24 <HAL_USB_USART_Available_Data_For_Write>
   d5a5e:	2800      	cmp	r0, #0
   d5a60:	dc01      	bgt.n	d5a66 <_ZN9USBSerial5writeEh+0x14>
   d5a62:	7c60      	ldrb	r0, [r4, #17]
   d5a64:	b128      	cbz	r0, d5a72 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5a66:	4629      	mov	r1, r5
   d5a68:	7c20      	ldrb	r0, [r4, #16]
   d5a6a:	f7ff f8eb 	bl	d4c44 <HAL_USB_USART_Send_Data>
   d5a6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5a72:	bd38      	pop	{r3, r4, r5, pc}

000d5a74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a74:	b510      	push	{r4, lr}
   d5a76:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5a78:	2300      	movs	r3, #0
   d5a7a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a80:	60a3      	str	r3, [r4, #8]
   d5a82:	4b05      	ldr	r3, [pc, #20]	; (d5a98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5a84:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5a86:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a88:	4608      	mov	r0, r1
{
  _serial = serial;
   d5a8a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5a8c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5a8e:	4611      	mov	r1, r2
   d5a90:	f7ff f8b0 	bl	d4bf4 <HAL_USB_USART_Init>
}
   d5a94:	4620      	mov	r0, r4
   d5a96:	bd10      	pop	{r4, pc}
   d5a98:	000d79fc 	.word	0x000d79fc

000d5a9c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5a9c:	2200      	movs	r2, #0
   d5a9e:	7c00      	ldrb	r0, [r0, #16]
   d5aa0:	f7ff b8b0 	b.w	d4c04 <HAL_USB_USART_Begin>

000d5aa4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5aa4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5aa6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5aa8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5aaa:	2100      	movs	r1, #0
   d5aac:	f001 fdfb 	bl	d76a6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5ab0:	4620      	mov	r0, r4
   d5ab2:	bd10      	pop	{r4, pc}

000d5ab4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5ab4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ab6:	4d0e      	ldr	r5, [pc, #56]	; (d5af0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5ab8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5aba:	a801      	add	r0, sp, #4
   d5abc:	f7ff fff2 	bl	d5aa4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ac0:	6829      	ldr	r1, [r5, #0]
   d5ac2:	f011 0401 	ands.w	r4, r1, #1
   d5ac6:	d110      	bne.n	d5aea <_Z16_fetch_usbserialv+0x36>
   d5ac8:	4628      	mov	r0, r5
   d5aca:	f7fe faec 	bl	d40a6 <__cxa_guard_acquire>
   d5ace:	b160      	cbz	r0, d5aea <_Z16_fetch_usbserialv+0x36>
   d5ad0:	aa01      	add	r2, sp, #4
   d5ad2:	4621      	mov	r1, r4
   d5ad4:	4807      	ldr	r0, [pc, #28]	; (d5af4 <_Z16_fetch_usbserialv+0x40>)
   d5ad6:	f7ff ffcd 	bl	d5a74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5ada:	4628      	mov	r0, r5
   d5adc:	f7fe fae8 	bl	d40b0 <__cxa_guard_release>
   d5ae0:	4a05      	ldr	r2, [pc, #20]	; (d5af8 <_Z16_fetch_usbserialv+0x44>)
   d5ae2:	4906      	ldr	r1, [pc, #24]	; (d5afc <_Z16_fetch_usbserialv+0x48>)
   d5ae4:	4803      	ldr	r0, [pc, #12]	; (d5af4 <_Z16_fetch_usbserialv+0x40>)
   d5ae6:	f000 fb87 	bl	d61f8 <__aeabi_atexit>
	return _usbserial;
}
   d5aea:	4802      	ldr	r0, [pc, #8]	; (d5af4 <_Z16_fetch_usbserialv+0x40>)
   d5aec:	b007      	add	sp, #28
   d5aee:	bd30      	pop	{r4, r5, pc}
   d5af0:	2003e3e0 	.word	0x2003e3e0
   d5af4:	2003e3e4 	.word	0x2003e3e4
   d5af8:	2003e1c8 	.word	0x2003e1c8
   d5afc:	000d59f5 	.word	0x000d59f5

000d5b00 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5b00:	2200      	movs	r2, #0
   d5b02:	4611      	mov	r1, r2
   d5b04:	6840      	ldr	r0, [r0, #4]
   d5b06:	f7ff b8f9 	b.w	d4cfc <network_ready>

000d5b0a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b0a:	2200      	movs	r2, #0
   d5b0c:	4611      	mov	r1, r2
   d5b0e:	6840      	ldr	r0, [r0, #4]
   d5b10:	f7ff b914 	b.w	d4d3c <network_listening>

000d5b14 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b14:	2200      	movs	r2, #0
   d5b16:	4611      	mov	r1, r2
   d5b18:	6840      	ldr	r0, [r0, #4]
   d5b1a:	f7ff b91f 	b.w	d4d5c <network_get_listen_timeout>

000d5b1e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b1e:	2200      	movs	r2, #0
   d5b20:	6840      	ldr	r0, [r0, #4]
   d5b22:	f7ff b913 	b.w	d4d4c <network_set_listen_timeout>

000d5b26 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b26:	2200      	movs	r2, #0
   d5b28:	f081 0101 	eor.w	r1, r1, #1
   d5b2c:	6840      	ldr	r0, [r0, #4]
   d5b2e:	f7ff b8fd 	b.w	d4d2c <network_listen>

000d5b32 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5b32:	2300      	movs	r3, #0
   d5b34:	461a      	mov	r2, r3
   d5b36:	4619      	mov	r1, r3
   d5b38:	6840      	ldr	r0, [r0, #4]
   d5b3a:	f7ff b8ef 	b.w	d4d1c <network_off>

000d5b3e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5b3e:	2300      	movs	r3, #0
   d5b40:	461a      	mov	r2, r3
   d5b42:	4619      	mov	r1, r3
   d5b44:	6840      	ldr	r0, [r0, #4]
   d5b46:	f7ff b8e1 	b.w	d4d0c <network_on>

000d5b4a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b4a:	2200      	movs	r2, #0
   d5b4c:	4611      	mov	r1, r2
   d5b4e:	6840      	ldr	r0, [r0, #4]
   d5b50:	f7ff b8c4 	b.w	d4cdc <network_connecting>

000d5b54 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b54:	2200      	movs	r2, #0
   d5b56:	2102      	movs	r1, #2
   d5b58:	6840      	ldr	r0, [r0, #4]
   d5b5a:	f7ff b8c7 	b.w	d4cec <network_disconnect>

000d5b5e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b5e:	2300      	movs	r3, #0
   d5b60:	461a      	mov	r2, r3
   d5b62:	6840      	ldr	r0, [r0, #4]
   d5b64:	f7ff b8b2 	b.w	d4ccc <network_connect>

000d5b68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5b68:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5b6a:	4c08      	ldr	r4, [pc, #32]	; (d5b8c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5b6c:	2528      	movs	r5, #40	; 0x28
   d5b6e:	462a      	mov	r2, r5
   d5b70:	2100      	movs	r1, #0
   d5b72:	4620      	mov	r0, r4
   d5b74:	f001 fd97 	bl	d76a6 <memset>
        cid = -1;
   d5b78:	f04f 33ff 	mov.w	r3, #4294967295
   d5b7c:	6063      	str	r3, [r4, #4]
   d5b7e:	4b04      	ldr	r3, [pc, #16]	; (d5b90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5b80:	8025      	strh	r5, [r4, #0]
   d5b82:	2204      	movs	r2, #4
   d5b84:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5b86:	4a03      	ldr	r2, [pc, #12]	; (d5b94 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5b88:	601a      	str	r2, [r3, #0]
   d5b8a:	bd38      	pop	{r3, r4, r5, pc}
   d5b8c:	2003e400 	.word	0x2003e400
   d5b90:	2003e3f8 	.word	0x2003e3f8
   d5b94:	000d7a2c 	.word	0x000d7a2c

000d5b98 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5b98:	4770      	bx	lr

000d5b9a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b9a:	7441      	strb	r1, [r0, #17]
   d5b9c:	4770      	bx	lr

000d5b9e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5b9e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5ba0:	7c00      	ldrb	r0, [r0, #16]
   d5ba2:	f7fe ffc7 	bl	d4b34 <HAL_USART_Available_Data_For_Write>
}
   d5ba6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5baa:	bd08      	pop	{r3, pc}

000d5bac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5bac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5bae:	7c00      	ldrb	r0, [r0, #16]
   d5bb0:	f7fe ff98 	bl	d4ae4 <HAL_USART_Available_Data>
}
   d5bb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bb8:	bd08      	pop	{r3, pc}

000d5bba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5bba:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5bbc:	7c00      	ldrb	r0, [r0, #16]
   d5bbe:	f7fe ffa1 	bl	d4b04 <HAL_USART_Peek_Data>
}
   d5bc2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bc6:	bf28      	it	cs
   d5bc8:	f04f 30ff 	movcs.w	r0, #4294967295
   d5bcc:	bd08      	pop	{r3, pc}

000d5bce <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5bce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5bd0:	7c00      	ldrb	r0, [r0, #16]
   d5bd2:	f7fe ff8f 	bl	d4af4 <HAL_USART_Read_Data>
}
   d5bd6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bda:	bf28      	it	cs
   d5bdc:	f04f 30ff 	movcs.w	r0, #4294967295
   d5be0:	bd08      	pop	{r3, pc}

000d5be2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5be2:	7c00      	ldrb	r0, [r0, #16]
   d5be4:	f7fe bf96 	b.w	d4b14 <HAL_USART_Flush_Data>

000d5be8 <_ZN11USARTSerialD0Ev>:
   d5be8:	b510      	push	{r4, lr}
   d5bea:	2114      	movs	r1, #20
   d5bec:	4604      	mov	r4, r0
   d5bee:	f000 fb11 	bl	d6214 <_ZdlPvj>
   d5bf2:	4620      	mov	r0, r4
   d5bf4:	bd10      	pop	{r4, pc}

000d5bf6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5bf6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5bf8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5bfa:	4604      	mov	r4, r0
   d5bfc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5bfe:	b925      	cbnz	r5, d5c0a <_ZN11USARTSerial5writeEh+0x14>
   d5c00:	7c00      	ldrb	r0, [r0, #16]
   d5c02:	f7fe ff97 	bl	d4b34 <HAL_USART_Available_Data_For_Write>
   d5c06:	2800      	cmp	r0, #0
   d5c08:	dd05      	ble.n	d5c16 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5c0a:	4631      	mov	r1, r6
   d5c0c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5c12:	f7fe bf5f 	b.w	d4ad4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5c16:	4628      	mov	r0, r5
   d5c18:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5c1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5c1c:	b510      	push	{r4, lr}
   d5c1e:	4604      	mov	r4, r0
   d5c20:	4608      	mov	r0, r1
   d5c22:	4611      	mov	r1, r2
   d5c24:	2200      	movs	r2, #0
   d5c26:	6062      	str	r2, [r4, #4]
   d5c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5c2c:	60a2      	str	r2, [r4, #8]
   d5c2e:	4a05      	ldr	r2, [pc, #20]	; (d5c44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5c30:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5c32:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5c34:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5c36:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5c38:	461a      	mov	r2, r3
   d5c3a:	f7fe ff43 	bl	d4ac4 <HAL_USART_Init>
}
   d5c3e:	4620      	mov	r0, r4
   d5c40:	bd10      	pop	{r4, pc}
   d5c42:	bf00      	nop
   d5c44:	000d7a60 	.word	0x000d7a60

000d5c48 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5c48:	7c00      	ldrb	r0, [r0, #16]
   d5c4a:	f7fe bf6b 	b.w	d4b24 <HAL_USART_Is_Enabled>
	...

000d5c50 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5c50:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5c52:	4d0c      	ldr	r5, [pc, #48]	; (d5c84 <_Z22__fetch_global_Serial1v+0x34>)
   d5c54:	6829      	ldr	r1, [r5, #0]
   d5c56:	f011 0401 	ands.w	r4, r1, #1
   d5c5a:	d111      	bne.n	d5c80 <_Z22__fetch_global_Serial1v+0x30>
   d5c5c:	4628      	mov	r0, r5
   d5c5e:	f7fe fa22 	bl	d40a6 <__cxa_guard_acquire>
   d5c62:	b168      	cbz	r0, d5c80 <_Z22__fetch_global_Serial1v+0x30>
   d5c64:	4a08      	ldr	r2, [pc, #32]	; (d5c88 <_Z22__fetch_global_Serial1v+0x38>)
   d5c66:	4b09      	ldr	r3, [pc, #36]	; (d5c8c <_Z22__fetch_global_Serial1v+0x3c>)
   d5c68:	4809      	ldr	r0, [pc, #36]	; (d5c90 <_Z22__fetch_global_Serial1v+0x40>)
   d5c6a:	4621      	mov	r1, r4
   d5c6c:	f7ff ffd6 	bl	d5c1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5c70:	4628      	mov	r0, r5
   d5c72:	f7fe fa1d 	bl	d40b0 <__cxa_guard_release>
   d5c76:	4a07      	ldr	r2, [pc, #28]	; (d5c94 <_Z22__fetch_global_Serial1v+0x44>)
   d5c78:	4907      	ldr	r1, [pc, #28]	; (d5c98 <_Z22__fetch_global_Serial1v+0x48>)
   d5c7a:	4805      	ldr	r0, [pc, #20]	; (d5c90 <_Z22__fetch_global_Serial1v+0x40>)
   d5c7c:	f000 fabc 	bl	d61f8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5c80:	4803      	ldr	r0, [pc, #12]	; (d5c90 <_Z22__fetch_global_Serial1v+0x40>)
   d5c82:	bd38      	pop	{r3, r4, r5, pc}
   d5c84:	2003e4c0 	.word	0x2003e4c0
   d5c88:	2003e4c4 	.word	0x2003e4c4
   d5c8c:	2003e43c 	.word	0x2003e43c
   d5c90:	2003e428 	.word	0x2003e428
   d5c94:	2003e1c8 	.word	0x2003e1c8
   d5c98:	000d5b99 	.word	0x000d5b99

000d5c9c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5c9c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5c9e:	6883      	ldr	r3, [r0, #8]
   d5ca0:	4604      	mov	r4, r0
   d5ca2:	b90b      	cbnz	r3, d5ca8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5ca4:	f000 fac9 	bl	d623a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ca8:	68c3      	ldr	r3, [r0, #12]
   d5caa:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5cac:	68a3      	ldr	r3, [r4, #8]
   d5cae:	b11b      	cbz	r3, d5cb8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5cb0:	2203      	movs	r2, #3
   d5cb2:	4621      	mov	r1, r4
   d5cb4:	4620      	mov	r0, r4
   d5cb6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5cb8:	4620      	mov	r0, r4
   d5cba:	2110      	movs	r1, #16
}
   d5cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5cc0:	f000 baa8 	b.w	d6214 <_ZdlPvj>

000d5cc4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5cc4:	4770      	bx	lr

000d5cc6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cc8:	4606      	mov	r6, r0
   d5cca:	4615      	mov	r5, r2
   d5ccc:	460c      	mov	r4, r1
   d5cce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5cd0:	42bc      	cmp	r4, r7
   d5cd2:	d006      	beq.n	d5ce2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5cd4:	6833      	ldr	r3, [r6, #0]
   d5cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5cda:	689b      	ldr	r3, [r3, #8]
   d5cdc:	4630      	mov	r0, r6
   d5cde:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ce0:	e7f6      	b.n	d5cd0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5ce2:	4628      	mov	r0, r5
   d5ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ce6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5ce6:	2200      	movs	r2, #0
   d5ce8:	7c00      	ldrb	r0, [r0, #16]
   d5cea:	f7fe bf43 	b.w	d4b74 <HAL_I2C_Write_Data>

000d5cee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5cee:	2100      	movs	r1, #0
   d5cf0:	7c00      	ldrb	r0, [r0, #16]
   d5cf2:	f7fe bf47 	b.w	d4b84 <HAL_I2C_Available_Data>

000d5cf6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5cf6:	2100      	movs	r1, #0
   d5cf8:	7c00      	ldrb	r0, [r0, #16]
   d5cfa:	f7fe bf4b 	b.w	d4b94 <HAL_I2C_Read_Data>

000d5cfe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5cfe:	2100      	movs	r1, #0
   d5d00:	7c00      	ldrb	r0, [r0, #16]
   d5d02:	f7fe bf4f 	b.w	d4ba4 <HAL_I2C_Peek_Data>

000d5d06 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5d06:	2100      	movs	r1, #0
   d5d08:	7c00      	ldrb	r0, [r0, #16]
   d5d0a:	f7fe bf53 	b.w	d4bb4 <HAL_I2C_Flush_Data>

000d5d0e <_ZN7TwoWireD0Ev>:
   d5d0e:	b510      	push	{r4, lr}
   d5d10:	2114      	movs	r1, #20
   d5d12:	4604      	mov	r4, r0
   d5d14:	f000 fa7e 	bl	d6214 <_ZdlPvj>
   d5d18:	4620      	mov	r0, r4
   d5d1a:	bd10      	pop	{r4, pc}

000d5d1c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5d1c:	b510      	push	{r4, lr}
   d5d1e:	4604      	mov	r4, r0
   d5d20:	2300      	movs	r3, #0
   d5d22:	6063      	str	r3, [r4, #4]
   d5d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d28:	60a3      	str	r3, [r4, #8]
   d5d2a:	4b04      	ldr	r3, [pc, #16]	; (d5d3c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5d2c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5d2e:	4608      	mov	r0, r1
   d5d30:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5d32:	4611      	mov	r1, r2
   d5d34:	f7fe ff4e 	bl	d4bd4 <HAL_I2C_Init>
}
   d5d38:	4620      	mov	r0, r4
   d5d3a:	bd10      	pop	{r4, pc}
   d5d3c:	000d7a90 	.word	0x000d7a90

000d5d40 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5d40:	2300      	movs	r3, #0
   d5d42:	461a      	mov	r2, r3
   d5d44:	4619      	mov	r1, r3
   d5d46:	7c00      	ldrb	r0, [r0, #16]
   d5d48:	f7fe befc 	b.w	d4b44 <HAL_I2C_Begin>

000d5d4c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5d4c:	b570      	push	{r4, r5, r6, lr}
   d5d4e:	460c      	mov	r4, r1
   d5d50:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5d52:	2514      	movs	r5, #20
   d5d54:	4606      	mov	r6, r0
   d5d56:	462a      	mov	r2, r5
   d5d58:	2100      	movs	r1, #0
   d5d5a:	a801      	add	r0, sp, #4
   d5d5c:	f001 fca3 	bl	d76a6 <memset>
   d5d60:	7823      	ldrb	r3, [r4, #0]
   d5d62:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d66:	6863      	ldr	r3, [r4, #4]
   d5d68:	9303      	str	r3, [sp, #12]
   d5d6a:	68e3      	ldr	r3, [r4, #12]
   d5d6c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5d6e:	2200      	movs	r2, #0
   d5d70:	7a23      	ldrb	r3, [r4, #8]
   d5d72:	7c30      	ldrb	r0, [r6, #16]
   d5d74:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5d78:	a901      	add	r1, sp, #4
   d5d7a:	9305      	str	r3, [sp, #20]
   d5d7c:	f7fe ff32 	bl	d4be4 <HAL_I2C_Request_Data_Ex>
}
   d5d80:	b006      	add	sp, #24
   d5d82:	bd70      	pop	{r4, r5, r6, pc}

000d5d84 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d86:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5d88:	f88d 1000 	strb.w	r1, [sp]
   d5d8c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5d90:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d92:	bf18      	it	ne
   d5d94:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5d96:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5d98:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d9a:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d9e:	f7ff ffd5 	bl	d5d4c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5da2:	b005      	add	sp, #20
   d5da4:	f85d fb04 	ldr.w	pc, [sp], #4

000d5da8 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5da8:	2200      	movs	r2, #0
   d5daa:	7c00      	ldrb	r0, [r0, #16]
   d5dac:	f7fe bed2 	b.w	d4b54 <HAL_I2C_Begin_Transmission>

000d5db0 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5db0:	b2c9      	uxtb	r1, r1
   d5db2:	f7ff bff9 	b.w	d5da8 <_ZN7TwoWire17beginTransmissionEh>

000d5db6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5db6:	2200      	movs	r2, #0
   d5db8:	7c00      	ldrb	r0, [r0, #16]
   d5dba:	f7fe bed3 	b.w	d4b64 <HAL_I2C_End_Transmission>

000d5dbe <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5dbe:	2100      	movs	r1, #0
   d5dc0:	7c00      	ldrb	r0, [r0, #16]
   d5dc2:	f7fe beff 	b.w	d4bc4 <HAL_I2C_Is_Enabled>

000d5dc6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5dc6:	2200      	movs	r2, #0
   d5dc8:	4611      	mov	r1, r2
   d5dca:	6840      	ldr	r0, [r0, #4]
   d5dcc:	f7fe bfb6 	b.w	d4d3c <network_listening>

000d5dd0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5dd0:	2200      	movs	r2, #0
   d5dd2:	4611      	mov	r1, r2
   d5dd4:	6840      	ldr	r0, [r0, #4]
   d5dd6:	f7fe bfc1 	b.w	d4d5c <network_get_listen_timeout>

000d5dda <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5dda:	2200      	movs	r2, #0
   d5ddc:	6840      	ldr	r0, [r0, #4]
   d5dde:	f7fe bfb5 	b.w	d4d4c <network_set_listen_timeout>

000d5de2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5de2:	2200      	movs	r2, #0
   d5de4:	f081 0101 	eor.w	r1, r1, #1
   d5de8:	6840      	ldr	r0, [r0, #4]
   d5dea:	f7fe bf9f 	b.w	d4d2c <network_listen>

000d5dee <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5dee:	2300      	movs	r3, #0
   d5df0:	461a      	mov	r2, r3
   d5df2:	2101      	movs	r1, #1
   d5df4:	6840      	ldr	r0, [r0, #4]
   d5df6:	f7fe bf91 	b.w	d4d1c <network_off>

000d5dfa <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5dfa:	2300      	movs	r3, #0
   d5dfc:	461a      	mov	r2, r3
   d5dfe:	4619      	mov	r1, r3
   d5e00:	6840      	ldr	r0, [r0, #4]
   d5e02:	f7fe bf83 	b.w	d4d0c <network_on>

000d5e06 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5e06:	2200      	movs	r2, #0
   d5e08:	4611      	mov	r1, r2
   d5e0a:	6840      	ldr	r0, [r0, #4]
   d5e0c:	f7fe bf76 	b.w	d4cfc <network_ready>

000d5e10 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e10:	2200      	movs	r2, #0
   d5e12:	4611      	mov	r1, r2
   d5e14:	6840      	ldr	r0, [r0, #4]
   d5e16:	f7fe bf61 	b.w	d4cdc <network_connecting>

000d5e1a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e1a:	2200      	movs	r2, #0
   d5e1c:	2102      	movs	r1, #2
   d5e1e:	6840      	ldr	r0, [r0, #4]
   d5e20:	f7fe bf64 	b.w	d4cec <network_disconnect>

000d5e24 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e24:	2300      	movs	r3, #0
   d5e26:	461a      	mov	r2, r3
   d5e28:	6840      	ldr	r0, [r0, #4]
   d5e2a:	f7fe bf4f 	b.w	d4ccc <network_connect>

000d5e2e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5e2e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e30:	4605      	mov	r5, r0
   d5e32:	b188      	cbz	r0, d5e58 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e34:	6804      	ldr	r4, [r0, #0]
   d5e36:	b14c      	cbz	r4, d5e4c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5e38:	68a3      	ldr	r3, [r4, #8]
   d5e3a:	b11b      	cbz	r3, d5e44 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e3c:	2203      	movs	r2, #3
   d5e3e:	4621      	mov	r1, r4
   d5e40:	4620      	mov	r0, r4
   d5e42:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e44:	2110      	movs	r1, #16
   d5e46:	4620      	mov	r0, r4
   d5e48:	f000 f9e4 	bl	d6214 <_ZdlPvj>
   d5e4c:	4628      	mov	r0, r5
   d5e4e:	2114      	movs	r1, #20
      }
   d5e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e54:	f000 b9de 	b.w	d6214 <_ZdlPvj>
   d5e58:	bd38      	pop	{r3, r4, r5, pc}

000d5e5a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5e5a:	b110      	cbz	r0, d5e62 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5e5c:	6803      	ldr	r3, [r0, #0]
   d5e5e:	685b      	ldr	r3, [r3, #4]
   d5e60:	4718      	bx	r3
   d5e62:	4770      	bx	lr

000d5e64 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5e64:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5e66:	6803      	ldr	r3, [r0, #0]
   d5e68:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5e6a:	b1bb      	cbz	r3, d5e9c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5e6c:	6858      	ldr	r0, [r3, #4]
   d5e6e:	f7fe fdf9 	bl	d4a64 <os_thread_is_current>
   d5e72:	b978      	cbnz	r0, d5e94 <_ZN6ThreadD1Ev+0x30>
   d5e74:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5e76:	7c5a      	ldrb	r2, [r3, #17]
   d5e78:	b912      	cbnz	r2, d5e80 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5e7a:	6858      	ldr	r0, [r3, #4]
   d5e7c:	f7fe fdfa 	bl	d4a74 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5e80:	6823      	ldr	r3, [r4, #0]
   d5e82:	6858      	ldr	r0, [r3, #4]
   d5e84:	f7fe fdfe 	bl	d4a84 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e88:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5e8a:	2300      	movs	r3, #0
   d5e8c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5e8e:	b128      	cbz	r0, d5e9c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5e90:	f7ff ffcd 	bl	d5e2e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e94:	6820      	ldr	r0, [r4, #0]
   d5e96:	b108      	cbz	r0, d5e9c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5e98:	f7ff ffc9 	bl	d5e2e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5e9c:	4620      	mov	r0, r4
   d5e9e:	bd10      	pop	{r4, pc}

000d5ea0 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5ea0:	b538      	push	{r3, r4, r5, lr}
   d5ea2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ea4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5ea8:	b108      	cbz	r0, d5eae <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5eaa:	f7fe f8fa 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5eae:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5eb2:	b108      	cbz	r0, d5eb8 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5eb4:	f7fe fdf6 	bl	d4aa4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5eb8:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5ebc:	b135      	cbz	r5, d5ecc <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5ebe:	4628      	mov	r0, r5
   d5ec0:	f7ff ffd0 	bl	d5e64 <_ZN6ThreadD1Ev>
   d5ec4:	2104      	movs	r1, #4
   d5ec6:	4628      	mov	r0, r5
   d5ec8:	f000 f9a4 	bl	d6214 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ecc:	6820      	ldr	r0, [r4, #0]
   d5ece:	b108      	cbz	r0, d5ed4 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5ed0:	f7ff ffc3 	bl	d5e5a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5ed4:	4620      	mov	r0, r4
   d5ed6:	bd38      	pop	{r3, r4, r5, pc}

000d5ed8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5ed8:	b510      	push	{r4, lr}
   d5eda:	4b04      	ldr	r3, [pc, #16]	; (d5eec <_ZN5spark9MeshClassD1Ev+0x14>)
   d5edc:	4604      	mov	r4, r0
   d5ede:	f840 3b08 	str.w	r3, [r0], #8
   d5ee2:	f7ff ffdd 	bl	d5ea0 <_ZN5spark11MeshPublishD1Ev>
   d5ee6:	4620      	mov	r0, r4
   d5ee8:	bd10      	pop	{r4, pc}
   d5eea:	bf00      	nop
   d5eec:	000d7ab8 	.word	0x000d7ab8

000d5ef0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5ef0:	b538      	push	{r3, r4, r5, lr}
   d5ef2:	4c0e      	ldr	r4, [pc, #56]	; (d5f2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5ef4:	4b0e      	ldr	r3, [pc, #56]	; (d5f30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5ef6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5ef8:	2500      	movs	r5, #0
   d5efa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5efc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5f00:	6063      	str	r3, [r4, #4]
   d5f02:	60a5      	str	r5, [r4, #8]
   d5f04:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5f08:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5f0c:	f7fe fdc2 	bl	d4a94 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5f10:	4b08      	ldr	r3, [pc, #32]	; (d5f34 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5f12:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5f16:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5f1a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5f1c:	4620      	mov	r0, r4
   d5f1e:	4a06      	ldr	r2, [pc, #24]	; (d5f38 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5f20:	4906      	ldr	r1, [pc, #24]	; (d5f3c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5f26:	f000 b967 	b.w	d61f8 <__aeabi_atexit>
   d5f2a:	bf00      	nop
   d5f2c:	2003e548 	.word	0x2003e548
   d5f30:	000d7aec 	.word	0x000d7aec
   d5f34:	000d7ab8 	.word	0x000d7ab8
   d5f38:	2003e1c8 	.word	0x2003e1c8
   d5f3c:	000d5ed9 	.word	0x000d5ed9

000d5f40 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5f40:	2300      	movs	r3, #0
   d5f42:	461a      	mov	r2, r3
   d5f44:	6840      	ldr	r0, [r0, #4]
   d5f46:	f7fe bec1 	b.w	d4ccc <network_connect>

000d5f4a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5f4a:	2200      	movs	r2, #0
   d5f4c:	2102      	movs	r1, #2
   d5f4e:	6840      	ldr	r0, [r0, #4]
   d5f50:	f7fe becc 	b.w	d4cec <network_disconnect>

000d5f54 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5f54:	2200      	movs	r2, #0
   d5f56:	4611      	mov	r1, r2
   d5f58:	6840      	ldr	r0, [r0, #4]
   d5f5a:	f7fe bebf 	b.w	d4cdc <network_connecting>

000d5f5e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5f5e:	2200      	movs	r2, #0
   d5f60:	4611      	mov	r1, r2
   d5f62:	6840      	ldr	r0, [r0, #4]
   d5f64:	f7fe beca 	b.w	d4cfc <network_ready>

000d5f68 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5f68:	2300      	movs	r3, #0
   d5f6a:	461a      	mov	r2, r3
   d5f6c:	4619      	mov	r1, r3
   d5f6e:	6840      	ldr	r0, [r0, #4]
   d5f70:	f7fe becc 	b.w	d4d0c <network_on>

000d5f74 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5f74:	2300      	movs	r3, #0
   d5f76:	461a      	mov	r2, r3
   d5f78:	4619      	mov	r1, r3
   d5f7a:	6840      	ldr	r0, [r0, #4]
   d5f7c:	f7fe bece 	b.w	d4d1c <network_off>

000d5f80 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5f80:	2200      	movs	r2, #0
   d5f82:	f081 0101 	eor.w	r1, r1, #1
   d5f86:	6840      	ldr	r0, [r0, #4]
   d5f88:	f7fe bed0 	b.w	d4d2c <network_listen>

000d5f8c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5f8c:	2200      	movs	r2, #0
   d5f8e:	6840      	ldr	r0, [r0, #4]
   d5f90:	f7fe bedc 	b.w	d4d4c <network_set_listen_timeout>

000d5f94 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5f94:	2200      	movs	r2, #0
   d5f96:	4611      	mov	r1, r2
   d5f98:	6840      	ldr	r0, [r0, #4]
   d5f9a:	f7fe bedf 	b.w	d4d5c <network_get_listen_timeout>

000d5f9e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5f9e:	2200      	movs	r2, #0
   d5fa0:	4611      	mov	r1, r2
   d5fa2:	6840      	ldr	r0, [r0, #4]
   d5fa4:	f7fe beca 	b.w	d4d3c <network_listening>

000d5fa8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5fac:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5fae:	b095      	sub	sp, #84	; 0x54
   d5fb0:	4616      	mov	r6, r2
   d5fb2:	460d      	mov	r5, r1
   d5fb4:	4607      	mov	r7, r0
    IPAddress addr;
   d5fb6:	f7ff fce3 	bl	d5980 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5fba:	4621      	mov	r1, r4
   d5fbc:	2220      	movs	r2, #32
   d5fbe:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5fc0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5fc2:	f001 fb70 	bl	d76a6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5fc6:	2340      	movs	r3, #64	; 0x40
   d5fc8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5fca:	4621      	mov	r1, r4
   d5fcc:	466b      	mov	r3, sp
   d5fce:	aa0c      	add	r2, sp, #48	; 0x30
   d5fd0:	4630      	mov	r0, r6
   d5fd2:	f7fe fcef 	bl	d49b4 <netdb_getaddrinfo>
    if (!r) {
   d5fd6:	4604      	mov	r4, r0
   d5fd8:	2800      	cmp	r0, #0
   d5fda:	d144      	bne.n	d6066 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5fdc:	4602      	mov	r2, r0
   d5fde:	2101      	movs	r1, #1
   d5fe0:	6868      	ldr	r0, [r5, #4]
   d5fe2:	f7fe fe8b 	bl	d4cfc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5fe6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5fe8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5fea:	4622      	mov	r2, r4
   d5fec:	6868      	ldr	r0, [r5, #4]
   d5fee:	f7fe fe85 	bl	d4cfc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ff2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ff4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5ff6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ff8:	2e00      	cmp	r6, #0
   d5ffa:	d034      	beq.n	d6066 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5ffc:	2900      	cmp	r1, #0
   d5ffe:	d132      	bne.n	d6066 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6000:	6873      	ldr	r3, [r6, #4]
   d6002:	2b02      	cmp	r3, #2
   d6004:	d002      	beq.n	d600c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6006:	2b0a      	cmp	r3, #10
   d6008:	d009      	beq.n	d601e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d600a:	e02a      	b.n	d6062 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d600c:	f1b8 0f00 	cmp.w	r8, #0
   d6010:	d027      	beq.n	d6062 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6012:	6971      	ldr	r1, [r6, #20]
   d6014:	4638      	mov	r0, r7
   d6016:	3104      	adds	r1, #4
   d6018:	f7ff fcdf 	bl	d59da <_ZN9IPAddressaSEPKh>
   d601c:	e020      	b.n	d6060 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d601e:	f1b9 0f00 	cmp.w	r9, #0
   d6022:	d01e      	beq.n	d6062 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6024:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6026:	2211      	movs	r2, #17
   d6028:	a801      	add	r0, sp, #4
   d602a:	f001 fb3c 	bl	d76a6 <memset>
                    a.v = 6;
   d602e:	2306      	movs	r3, #6
   d6030:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6034:	ad01      	add	r5, sp, #4
   d6036:	f104 0308 	add.w	r3, r4, #8
   d603a:	3418      	adds	r4, #24
   d603c:	6818      	ldr	r0, [r3, #0]
   d603e:	6859      	ldr	r1, [r3, #4]
   d6040:	462a      	mov	r2, r5
   d6042:	c203      	stmia	r2!, {r0, r1}
   d6044:	3308      	adds	r3, #8
   d6046:	42a3      	cmp	r3, r4
   d6048:	4615      	mov	r5, r2
   d604a:	d1f7      	bne.n	d603c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d604c:	a901      	add	r1, sp, #4
   d604e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6050:	ad07      	add	r5, sp, #28
   d6052:	f7ff fca3 	bl	d599c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6058:	1d3c      	adds	r4, r7, #4
   d605a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d605c:	682b      	ldr	r3, [r5, #0]
   d605e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6060:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6062:	69f6      	ldr	r6, [r6, #28]
   d6064:	e7c8      	b.n	d5ff8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6066:	9800      	ldr	r0, [sp, #0]
   d6068:	f7fe fc9c 	bl	d49a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d606c:	4638      	mov	r0, r7
   d606e:	b015      	add	sp, #84	; 0x54
   d6070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6074 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6074:	4b02      	ldr	r3, [pc, #8]	; (d6080 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6076:	4a03      	ldr	r2, [pc, #12]	; (d6084 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6078:	601a      	str	r2, [r3, #0]
   d607a:	2200      	movs	r2, #0
   d607c:	605a      	str	r2, [r3, #4]
   d607e:	4770      	bx	lr
   d6080:	2003e71c 	.word	0x2003e71c
   d6084:	000d7aec 	.word	0x000d7aec

000d6088 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6088:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d608a:	4e18      	ldr	r6, [pc, #96]	; (d60ec <pinAvailable+0x64>)
   d608c:	6831      	ldr	r1, [r6, #0]
   d608e:	f011 0501 	ands.w	r5, r1, #1
   d6092:	4604      	mov	r4, r0
   d6094:	d10a      	bne.n	d60ac <pinAvailable+0x24>
   d6096:	4630      	mov	r0, r6
   d6098:	f7fe f805 	bl	d40a6 <__cxa_guard_acquire>
   d609c:	b130      	cbz	r0, d60ac <pinAvailable+0x24>
   d609e:	4629      	mov	r1, r5
   d60a0:	4813      	ldr	r0, [pc, #76]	; (d60f0 <pinAvailable+0x68>)
   d60a2:	f7fe ff09 	bl	d4eb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d60a6:	4630      	mov	r0, r6
   d60a8:	f7fe f802 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d60ac:	4810      	ldr	r0, [pc, #64]	; (d60f0 <pinAvailable+0x68>)
   d60ae:	f7fe ff0d 	bl	d4ecc <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d60b2:	b128      	cbz	r0, d60c0 <pinAvailable+0x38>
   d60b4:	f1a4 030b 	sub.w	r3, r4, #11
   d60b8:	2b02      	cmp	r3, #2
   d60ba:	d801      	bhi.n	d60c0 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d60bc:	2000      	movs	r0, #0
   d60be:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d60c0:	f000 f874 	bl	d61ac <_Z19__fetch_global_Wirev>
   d60c4:	f7ff fe7b 	bl	d5dbe <_ZN7TwoWire9isEnabledEv>
   d60c8:	b108      	cbz	r0, d60ce <pinAvailable+0x46>
   d60ca:	2c01      	cmp	r4, #1
   d60cc:	d9f6      	bls.n	d60bc <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d60ce:	f7ff fdbf 	bl	d5c50 <_Z22__fetch_global_Serial1v>
   d60d2:	f7ff fdb9 	bl	d5c48 <_ZN11USARTSerial9isEnabledEv>
   d60d6:	b118      	cbz	r0, d60e0 <pinAvailable+0x58>
   d60d8:	f1a4 0309 	sub.w	r3, r4, #9
   d60dc:	2b01      	cmp	r3, #1
   d60de:	d9ed      	bls.n	d60bc <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d60e0:	2c23      	cmp	r4, #35	; 0x23
   d60e2:	bf8c      	ite	hi
   d60e4:	2000      	movhi	r0, #0
   d60e6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d60e8:	bd70      	pop	{r4, r5, r6, pc}
   d60ea:	bf00      	nop
   d60ec:	2003e724 	.word	0x2003e724
   d60f0:	2003e728 	.word	0x2003e728

000d60f4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d60f4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d60f6:	b538      	push	{r3, r4, r5, lr}
   d60f8:	4604      	mov	r4, r0
   d60fa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d60fc:	d80a      	bhi.n	d6114 <pinMode+0x20>
   d60fe:	29ff      	cmp	r1, #255	; 0xff
   d6100:	d008      	beq.n	d6114 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6102:	f7ff ffc1 	bl	d6088 <pinAvailable>
   d6106:	b128      	cbz	r0, d6114 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6108:	4629      	mov	r1, r5
   d610a:	4620      	mov	r0, r4
}
   d610c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6110:	f7fe bc68 	b.w	d49e4 <HAL_Pin_Mode>
   d6114:	bd38      	pop	{r3, r4, r5, pc}

000d6116 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6116:	b538      	push	{r3, r4, r5, lr}
   d6118:	4604      	mov	r4, r0
   d611a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d611c:	f7fe fc6a 	bl	d49f4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6120:	28ff      	cmp	r0, #255	; 0xff
   d6122:	d010      	beq.n	d6146 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6124:	2806      	cmp	r0, #6
   d6126:	d804      	bhi.n	d6132 <digitalWrite+0x1c>
   d6128:	234d      	movs	r3, #77	; 0x4d
   d612a:	fa23 f000 	lsr.w	r0, r3, r0
   d612e:	07c3      	lsls	r3, r0, #31
   d6130:	d409      	bmi.n	d6146 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6132:	4620      	mov	r0, r4
   d6134:	f7ff ffa8 	bl	d6088 <pinAvailable>
   d6138:	b128      	cbz	r0, d6146 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d613a:	4629      	mov	r1, r5
   d613c:	4620      	mov	r0, r4
}
   d613e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6142:	f7fe bc5f 	b.w	d4a04 <HAL_GPIO_Write>
   d6146:	bd38      	pop	{r3, r4, r5, pc}

000d6148 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6148:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d614a:	b510      	push	{r4, lr}
   d614c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d614e:	bf9c      	itt	ls
   d6150:	340e      	addls	r4, #14
   d6152:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6154:	4620      	mov	r0, r4
   d6156:	f7ff ff97 	bl	d6088 <pinAvailable>
   d615a:	b150      	cbz	r0, d6172 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d615c:	2103      	movs	r1, #3
   d615e:	4620      	mov	r0, r4
   d6160:	f7fe fc38 	bl	d49d4 <HAL_Validate_Pin_Function>
   d6164:	2803      	cmp	r0, #3
   d6166:	d104      	bne.n	d6172 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6168:	4620      	mov	r0, r4
}
   d616a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d616e:	f7fe bc51 	b.w	d4a14 <HAL_ADC_Read>
}
   d6172:	2000      	movs	r0, #0
   d6174:	bd10      	pop	{r4, pc}
	...

000d6178 <_Z17acquireWireBufferv>:
   d6178:	b570      	push	{r4, r5, r6, lr}
   d617a:	4604      	mov	r4, r0
   d617c:	2514      	movs	r5, #20
   d617e:	462a      	mov	r2, r5
   d6180:	4e09      	ldr	r6, [pc, #36]	; (d61a8 <_Z17acquireWireBufferv+0x30>)
   d6182:	2100      	movs	r1, #0
   d6184:	f001 fa8f 	bl	d76a6 <memset>
   d6188:	8025      	strh	r5, [r4, #0]
   d618a:	2520      	movs	r5, #32
   d618c:	4631      	mov	r1, r6
   d618e:	60a5      	str	r5, [r4, #8]
   d6190:	6125      	str	r5, [r4, #16]
   d6192:	4628      	mov	r0, r5
   d6194:	f000 f840 	bl	d6218 <_ZnajRKSt9nothrow_t>
   d6198:	4631      	mov	r1, r6
   d619a:	6060      	str	r0, [r4, #4]
   d619c:	4628      	mov	r0, r5
   d619e:	f000 f83b 	bl	d6218 <_ZnajRKSt9nothrow_t>
   d61a2:	60e0      	str	r0, [r4, #12]
   d61a4:	4620      	mov	r0, r4
   d61a6:	bd70      	pop	{r4, r5, r6, pc}
   d61a8:	000d7b18 	.word	0x000d7b18

000d61ac <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d61ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d61ae:	4d0e      	ldr	r5, [pc, #56]	; (d61e8 <_Z19__fetch_global_Wirev+0x3c>)
   d61b0:	6829      	ldr	r1, [r5, #0]
   d61b2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d61b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d61b8:	d113      	bne.n	d61e2 <_Z19__fetch_global_Wirev+0x36>
   d61ba:	4628      	mov	r0, r5
   d61bc:	f7fd ff73 	bl	d40a6 <__cxa_guard_acquire>
   d61c0:	b178      	cbz	r0, d61e2 <_Z19__fetch_global_Wirev+0x36>
   d61c2:	a801      	add	r0, sp, #4
   d61c4:	f7ff ffd8 	bl	d6178 <_Z17acquireWireBufferv>
   d61c8:	aa01      	add	r2, sp, #4
   d61ca:	4621      	mov	r1, r4
   d61cc:	4807      	ldr	r0, [pc, #28]	; (d61ec <_Z19__fetch_global_Wirev+0x40>)
   d61ce:	f7ff fda5 	bl	d5d1c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d61d2:	4628      	mov	r0, r5
   d61d4:	f7fd ff6c 	bl	d40b0 <__cxa_guard_release>
   d61d8:	4a05      	ldr	r2, [pc, #20]	; (d61f0 <_Z19__fetch_global_Wirev+0x44>)
   d61da:	4906      	ldr	r1, [pc, #24]	; (d61f4 <_Z19__fetch_global_Wirev+0x48>)
   d61dc:	4803      	ldr	r0, [pc, #12]	; (d61ec <_Z19__fetch_global_Wirev+0x40>)
   d61de:	f000 f80b 	bl	d61f8 <__aeabi_atexit>
	return wire;
}
   d61e2:	4802      	ldr	r0, [pc, #8]	; (d61ec <_Z19__fetch_global_Wirev+0x40>)
   d61e4:	b007      	add	sp, #28
   d61e6:	bd30      	pop	{r4, r5, pc}
   d61e8:	2003e734 	.word	0x2003e734
   d61ec:	2003e738 	.word	0x2003e738
   d61f0:	2003e1c8 	.word	0x2003e1c8
   d61f4:	000d5cc5 	.word	0x000d5cc5

000d61f8 <__aeabi_atexit>:
   d61f8:	460b      	mov	r3, r1
   d61fa:	4601      	mov	r1, r0
   d61fc:	4618      	mov	r0, r3
   d61fe:	f001 ba39 	b.w	d7674 <__cxa_atexit>
	...

000d6204 <_ZSt15get_new_handlerv>:
   d6204:	4b02      	ldr	r3, [pc, #8]	; (d6210 <_ZSt15get_new_handlerv+0xc>)
   d6206:	6818      	ldr	r0, [r3, #0]
   d6208:	f3bf 8f5f 	dmb	sy
   d620c:	4770      	bx	lr
   d620e:	bf00      	nop
   d6210:	2003e74c 	.word	0x2003e74c

000d6214 <_ZdlPvj>:
   d6214:	f7fd bf43 	b.w	d409e <_ZdlPv>

000d6218 <_ZnajRKSt9nothrow_t>:
   d6218:	f000 b800 	b.w	d621c <_ZnwjRKSt9nothrow_t>

000d621c <_ZnwjRKSt9nothrow_t>:
   d621c:	b510      	push	{r4, lr}
   d621e:	2800      	cmp	r0, #0
   d6220:	bf14      	ite	ne
   d6222:	4604      	movne	r4, r0
   d6224:	2401      	moveq	r4, #1
   d6226:	4620      	mov	r0, r4
   d6228:	f7fe fdc8 	bl	d4dbc <malloc>
   d622c:	b920      	cbnz	r0, d6238 <_ZnwjRKSt9nothrow_t+0x1c>
   d622e:	f7ff ffe9 	bl	d6204 <_ZSt15get_new_handlerv>
   d6232:	b108      	cbz	r0, d6238 <_ZnwjRKSt9nothrow_t+0x1c>
   d6234:	4780      	blx	r0
   d6236:	e7f6      	b.n	d6226 <_ZnwjRKSt9nothrow_t+0xa>
   d6238:	bd10      	pop	{r4, pc}

000d623a <_ZSt25__throw_bad_function_callv>:
   d623a:	b508      	push	{r3, lr}
   d623c:	f7fe fde6 	bl	d4e0c <abort>

000d6240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6240:	4b18      	ldr	r3, [pc, #96]	; (d62a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6242:	681a      	ldr	r2, [r3, #0]
   d6244:	07d1      	lsls	r1, r2, #31
   d6246:	bf5c      	itt	pl
   d6248:	2201      	movpl	r2, #1
   d624a:	601a      	strpl	r2, [r3, #0]
   d624c:	4b16      	ldr	r3, [pc, #88]	; (d62a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d624e:	681a      	ldr	r2, [r3, #0]
   d6250:	07d2      	lsls	r2, r2, #31
   d6252:	bf5c      	itt	pl
   d6254:	2201      	movpl	r2, #1
   d6256:	601a      	strpl	r2, [r3, #0]
   d6258:	4b14      	ldr	r3, [pc, #80]	; (d62ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d625a:	681a      	ldr	r2, [r3, #0]
   d625c:	07d0      	lsls	r0, r2, #31
   d625e:	bf5c      	itt	pl
   d6260:	2201      	movpl	r2, #1
   d6262:	601a      	strpl	r2, [r3, #0]
   d6264:	4b12      	ldr	r3, [pc, #72]	; (d62b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6266:	681a      	ldr	r2, [r3, #0]
   d6268:	07d1      	lsls	r1, r2, #31
   d626a:	bf5c      	itt	pl
   d626c:	2201      	movpl	r2, #1
   d626e:	601a      	strpl	r2, [r3, #0]
   d6270:	4b10      	ldr	r3, [pc, #64]	; (d62b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6272:	681a      	ldr	r2, [r3, #0]
   d6274:	07d2      	lsls	r2, r2, #31
   d6276:	bf5c      	itt	pl
   d6278:	2201      	movpl	r2, #1
   d627a:	601a      	strpl	r2, [r3, #0]
   d627c:	4b0e      	ldr	r3, [pc, #56]	; (d62b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d627e:	681a      	ldr	r2, [r3, #0]
   d6280:	07d0      	lsls	r0, r2, #31
   d6282:	bf5c      	itt	pl
   d6284:	2201      	movpl	r2, #1
   d6286:	601a      	strpl	r2, [r3, #0]
   d6288:	4b0c      	ldr	r3, [pc, #48]	; (d62bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d628a:	681a      	ldr	r2, [r3, #0]
   d628c:	07d1      	lsls	r1, r2, #31
   d628e:	bf5c      	itt	pl
   d6290:	2201      	movpl	r2, #1
   d6292:	601a      	strpl	r2, [r3, #0]
   d6294:	4b0a      	ldr	r3, [pc, #40]	; (d62c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6296:	681a      	ldr	r2, [r3, #0]
   d6298:	07d2      	lsls	r2, r2, #31
   d629a:	bf5c      	itt	pl
   d629c:	2201      	movpl	r2, #1
   d629e:	601a      	strpl	r2, [r3, #0]
   d62a0:	4770      	bx	lr
   d62a2:	bf00      	nop
   d62a4:	2003e76c 	.word	0x2003e76c
   d62a8:	2003e768 	.word	0x2003e768
   d62ac:	2003e764 	.word	0x2003e764
   d62b0:	2003e760 	.word	0x2003e760
   d62b4:	2003e75c 	.word	0x2003e75c
   d62b8:	2003e758 	.word	0x2003e758
   d62bc:	2003e754 	.word	0x2003e754
   d62c0:	2003e750 	.word	0x2003e750

000d62c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d62c4:	4b24      	ldr	r3, [pc, #144]	; (d6358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d62c6:	681a      	ldr	r2, [r3, #0]
   d62c8:	07d0      	lsls	r0, r2, #31
   d62ca:	bf5c      	itt	pl
   d62cc:	2201      	movpl	r2, #1
   d62ce:	601a      	strpl	r2, [r3, #0]
   d62d0:	4b22      	ldr	r3, [pc, #136]	; (d635c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d62d2:	681a      	ldr	r2, [r3, #0]
   d62d4:	07d1      	lsls	r1, r2, #31
   d62d6:	bf5c      	itt	pl
   d62d8:	2201      	movpl	r2, #1
   d62da:	601a      	strpl	r2, [r3, #0]
   d62dc:	4b20      	ldr	r3, [pc, #128]	; (d6360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d62de:	681a      	ldr	r2, [r3, #0]
   d62e0:	07d2      	lsls	r2, r2, #31
   d62e2:	bf5c      	itt	pl
   d62e4:	2201      	movpl	r2, #1
   d62e6:	601a      	strpl	r2, [r3, #0]
   d62e8:	4b1e      	ldr	r3, [pc, #120]	; (d6364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d62ea:	681a      	ldr	r2, [r3, #0]
   d62ec:	07d0      	lsls	r0, r2, #31
   d62ee:	bf5c      	itt	pl
   d62f0:	2201      	movpl	r2, #1
   d62f2:	601a      	strpl	r2, [r3, #0]
   d62f4:	4b1c      	ldr	r3, [pc, #112]	; (d6368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d62f6:	681a      	ldr	r2, [r3, #0]
   d62f8:	07d1      	lsls	r1, r2, #31
   d62fa:	bf5c      	itt	pl
   d62fc:	2201      	movpl	r2, #1
   d62fe:	601a      	strpl	r2, [r3, #0]
   d6300:	4b1a      	ldr	r3, [pc, #104]	; (d636c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6302:	681a      	ldr	r2, [r3, #0]
   d6304:	07d2      	lsls	r2, r2, #31
   d6306:	bf5c      	itt	pl
   d6308:	2201      	movpl	r2, #1
   d630a:	601a      	strpl	r2, [r3, #0]
   d630c:	4b18      	ldr	r3, [pc, #96]	; (d6370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d630e:	681a      	ldr	r2, [r3, #0]
   d6310:	07d0      	lsls	r0, r2, #31
   d6312:	bf5c      	itt	pl
   d6314:	2201      	movpl	r2, #1
   d6316:	601a      	strpl	r2, [r3, #0]
   d6318:	4b16      	ldr	r3, [pc, #88]	; (d6374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d631a:	681a      	ldr	r2, [r3, #0]
   d631c:	07d1      	lsls	r1, r2, #31
   d631e:	bf5c      	itt	pl
   d6320:	2201      	movpl	r2, #1
   d6322:	601a      	strpl	r2, [r3, #0]
   d6324:	4b14      	ldr	r3, [pc, #80]	; (d6378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6326:	681a      	ldr	r2, [r3, #0]
   d6328:	07d2      	lsls	r2, r2, #31
   d632a:	bf5c      	itt	pl
   d632c:	2201      	movpl	r2, #1
   d632e:	601a      	strpl	r2, [r3, #0]
   d6330:	4b12      	ldr	r3, [pc, #72]	; (d637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6332:	681a      	ldr	r2, [r3, #0]
   d6334:	07d0      	lsls	r0, r2, #31
   d6336:	bf5c      	itt	pl
   d6338:	2201      	movpl	r2, #1
   d633a:	601a      	strpl	r2, [r3, #0]
   d633c:	4b10      	ldr	r3, [pc, #64]	; (d6380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d633e:	681a      	ldr	r2, [r3, #0]
   d6340:	07d1      	lsls	r1, r2, #31
   d6342:	bf5c      	itt	pl
   d6344:	2201      	movpl	r2, #1
   d6346:	601a      	strpl	r2, [r3, #0]
   d6348:	4b0e      	ldr	r3, [pc, #56]	; (d6384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d634a:	681a      	ldr	r2, [r3, #0]
   d634c:	07d2      	lsls	r2, r2, #31
   d634e:	bf5c      	itt	pl
   d6350:	2201      	movpl	r2, #1
   d6352:	601a      	strpl	r2, [r3, #0]
   d6354:	4770      	bx	lr
   d6356:	bf00      	nop
   d6358:	2003e79c 	.word	0x2003e79c
   d635c:	2003e798 	.word	0x2003e798
   d6360:	2003e794 	.word	0x2003e794
   d6364:	2003e790 	.word	0x2003e790
   d6368:	2003e78c 	.word	0x2003e78c
   d636c:	2003e788 	.word	0x2003e788
   d6370:	2003e784 	.word	0x2003e784
   d6374:	2003e780 	.word	0x2003e780
   d6378:	2003e77c 	.word	0x2003e77c
   d637c:	2003e778 	.word	0x2003e778
   d6380:	2003e774 	.word	0x2003e774
   d6384:	2003e770 	.word	0x2003e770

000d6388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6388:	4b24      	ldr	r3, [pc, #144]	; (d641c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d638a:	681a      	ldr	r2, [r3, #0]
   d638c:	07d0      	lsls	r0, r2, #31
   d638e:	bf5c      	itt	pl
   d6390:	2201      	movpl	r2, #1
   d6392:	601a      	strpl	r2, [r3, #0]
   d6394:	4b22      	ldr	r3, [pc, #136]	; (d6420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6396:	681a      	ldr	r2, [r3, #0]
   d6398:	07d1      	lsls	r1, r2, #31
   d639a:	bf5c      	itt	pl
   d639c:	2201      	movpl	r2, #1
   d639e:	601a      	strpl	r2, [r3, #0]
   d63a0:	4b20      	ldr	r3, [pc, #128]	; (d6424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d63a2:	681a      	ldr	r2, [r3, #0]
   d63a4:	07d2      	lsls	r2, r2, #31
   d63a6:	bf5c      	itt	pl
   d63a8:	2201      	movpl	r2, #1
   d63aa:	601a      	strpl	r2, [r3, #0]
   d63ac:	4b1e      	ldr	r3, [pc, #120]	; (d6428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d63ae:	681a      	ldr	r2, [r3, #0]
   d63b0:	07d0      	lsls	r0, r2, #31
   d63b2:	bf5c      	itt	pl
   d63b4:	2201      	movpl	r2, #1
   d63b6:	601a      	strpl	r2, [r3, #0]
   d63b8:	4b1c      	ldr	r3, [pc, #112]	; (d642c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d63ba:	681a      	ldr	r2, [r3, #0]
   d63bc:	07d1      	lsls	r1, r2, #31
   d63be:	bf5c      	itt	pl
   d63c0:	2201      	movpl	r2, #1
   d63c2:	601a      	strpl	r2, [r3, #0]
   d63c4:	4b1a      	ldr	r3, [pc, #104]	; (d6430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d63c6:	681a      	ldr	r2, [r3, #0]
   d63c8:	07d2      	lsls	r2, r2, #31
   d63ca:	bf5c      	itt	pl
   d63cc:	2201      	movpl	r2, #1
   d63ce:	601a      	strpl	r2, [r3, #0]
   d63d0:	4b18      	ldr	r3, [pc, #96]	; (d6434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d63d2:	681a      	ldr	r2, [r3, #0]
   d63d4:	07d0      	lsls	r0, r2, #31
   d63d6:	bf5c      	itt	pl
   d63d8:	2201      	movpl	r2, #1
   d63da:	601a      	strpl	r2, [r3, #0]
   d63dc:	4b16      	ldr	r3, [pc, #88]	; (d6438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d63de:	681a      	ldr	r2, [r3, #0]
   d63e0:	07d1      	lsls	r1, r2, #31
   d63e2:	bf5c      	itt	pl
   d63e4:	2201      	movpl	r2, #1
   d63e6:	601a      	strpl	r2, [r3, #0]
   d63e8:	4b14      	ldr	r3, [pc, #80]	; (d643c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d63ea:	681a      	ldr	r2, [r3, #0]
   d63ec:	07d2      	lsls	r2, r2, #31
   d63ee:	bf5c      	itt	pl
   d63f0:	2201      	movpl	r2, #1
   d63f2:	601a      	strpl	r2, [r3, #0]
   d63f4:	4b12      	ldr	r3, [pc, #72]	; (d6440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d63f6:	681a      	ldr	r2, [r3, #0]
   d63f8:	07d0      	lsls	r0, r2, #31
   d63fa:	bf5c      	itt	pl
   d63fc:	2201      	movpl	r2, #1
   d63fe:	601a      	strpl	r2, [r3, #0]
   d6400:	4b10      	ldr	r3, [pc, #64]	; (d6444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6402:	681a      	ldr	r2, [r3, #0]
   d6404:	07d1      	lsls	r1, r2, #31
   d6406:	bf5c      	itt	pl
   d6408:	2201      	movpl	r2, #1
   d640a:	601a      	strpl	r2, [r3, #0]
   d640c:	4b0e      	ldr	r3, [pc, #56]	; (d6448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d640e:	681a      	ldr	r2, [r3, #0]
   d6410:	07d2      	lsls	r2, r2, #31
   d6412:	bf5c      	itt	pl
   d6414:	2201      	movpl	r2, #1
   d6416:	601a      	strpl	r2, [r3, #0]
   d6418:	4770      	bx	lr
   d641a:	bf00      	nop
   d641c:	2003e7cc 	.word	0x2003e7cc
   d6420:	2003e7c8 	.word	0x2003e7c8
   d6424:	2003e7c4 	.word	0x2003e7c4
   d6428:	2003e7c0 	.word	0x2003e7c0
   d642c:	2003e7bc 	.word	0x2003e7bc
   d6430:	2003e7b8 	.word	0x2003e7b8
   d6434:	2003e7b4 	.word	0x2003e7b4
   d6438:	2003e7b0 	.word	0x2003e7b0
   d643c:	2003e7ac 	.word	0x2003e7ac
   d6440:	2003e7a8 	.word	0x2003e7a8
   d6444:	2003e7a4 	.word	0x2003e7a4
   d6448:	2003e7a0 	.word	0x2003e7a0

000d644c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d644c:	4b18      	ldr	r3, [pc, #96]	; (d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d644e:	681a      	ldr	r2, [r3, #0]
   d6450:	07d1      	lsls	r1, r2, #31
   d6452:	bf5c      	itt	pl
   d6454:	2201      	movpl	r2, #1
   d6456:	601a      	strpl	r2, [r3, #0]
   d6458:	4b16      	ldr	r3, [pc, #88]	; (d64b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d645a:	681a      	ldr	r2, [r3, #0]
   d645c:	07d2      	lsls	r2, r2, #31
   d645e:	bf5c      	itt	pl
   d6460:	2201      	movpl	r2, #1
   d6462:	601a      	strpl	r2, [r3, #0]
   d6464:	4b14      	ldr	r3, [pc, #80]	; (d64b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6466:	681a      	ldr	r2, [r3, #0]
   d6468:	07d0      	lsls	r0, r2, #31
   d646a:	bf5c      	itt	pl
   d646c:	2201      	movpl	r2, #1
   d646e:	601a      	strpl	r2, [r3, #0]
   d6470:	4b12      	ldr	r3, [pc, #72]	; (d64bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6472:	681a      	ldr	r2, [r3, #0]
   d6474:	07d1      	lsls	r1, r2, #31
   d6476:	bf5c      	itt	pl
   d6478:	2201      	movpl	r2, #1
   d647a:	601a      	strpl	r2, [r3, #0]
   d647c:	4b10      	ldr	r3, [pc, #64]	; (d64c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d647e:	681a      	ldr	r2, [r3, #0]
   d6480:	07d2      	lsls	r2, r2, #31
   d6482:	bf5c      	itt	pl
   d6484:	2201      	movpl	r2, #1
   d6486:	601a      	strpl	r2, [r3, #0]
   d6488:	4b0e      	ldr	r3, [pc, #56]	; (d64c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d648a:	681a      	ldr	r2, [r3, #0]
   d648c:	07d0      	lsls	r0, r2, #31
   d648e:	bf5c      	itt	pl
   d6490:	2201      	movpl	r2, #1
   d6492:	601a      	strpl	r2, [r3, #0]
   d6494:	4b0c      	ldr	r3, [pc, #48]	; (d64c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6496:	681a      	ldr	r2, [r3, #0]
   d6498:	07d1      	lsls	r1, r2, #31
   d649a:	bf5c      	itt	pl
   d649c:	2201      	movpl	r2, #1
   d649e:	601a      	strpl	r2, [r3, #0]
   d64a0:	4b0a      	ldr	r3, [pc, #40]	; (d64cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d64a2:	681a      	ldr	r2, [r3, #0]
   d64a4:	07d2      	lsls	r2, r2, #31
   d64a6:	bf5c      	itt	pl
   d64a8:	2201      	movpl	r2, #1
   d64aa:	601a      	strpl	r2, [r3, #0]
   d64ac:	4770      	bx	lr
   d64ae:	bf00      	nop
   d64b0:	2003e7ec 	.word	0x2003e7ec
   d64b4:	2003e7e8 	.word	0x2003e7e8
   d64b8:	2003e7e4 	.word	0x2003e7e4
   d64bc:	2003e7e0 	.word	0x2003e7e0
   d64c0:	2003e7dc 	.word	0x2003e7dc
   d64c4:	2003e7d8 	.word	0x2003e7d8
   d64c8:	2003e7d4 	.word	0x2003e7d4
   d64cc:	2003e7d0 	.word	0x2003e7d0

000d64d0 <atan2>:
   d64d0:	f000 b862 	b.w	d6598 <__ieee754_atan2>

000d64d4 <sqrt>:
   d64d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d64d8:	ed2d 8b02 	vpush	{d8}
   d64dc:	b08b      	sub	sp, #44	; 0x2c
   d64de:	ec55 4b10 	vmov	r4, r5, d0
   d64e2:	f000 f94f 	bl	d6784 <__ieee754_sqrt>
   d64e6:	4b29      	ldr	r3, [pc, #164]	; (d658c <sqrt+0xb8>)
   d64e8:	eeb0 8a40 	vmov.f32	s16, s0
   d64ec:	eef0 8a60 	vmov.f32	s17, s1
   d64f0:	f993 6000 	ldrsb.w	r6, [r3]
   d64f4:	1c73      	adds	r3, r6, #1
   d64f6:	d012      	beq.n	d651e <sqrt+0x4a>
   d64f8:	4622      	mov	r2, r4
   d64fa:	462b      	mov	r3, r5
   d64fc:	4620      	mov	r0, r4
   d64fe:	4629      	mov	r1, r5
   d6500:	f001 f82a 	bl	d7558 <__aeabi_dcmpun>
   d6504:	4607      	mov	r7, r0
   d6506:	b950      	cbnz	r0, d651e <sqrt+0x4a>
   d6508:	f04f 0800 	mov.w	r8, #0
   d650c:	f04f 0900 	mov.w	r9, #0
   d6510:	4620      	mov	r0, r4
   d6512:	4629      	mov	r1, r5
   d6514:	4642      	mov	r2, r8
   d6516:	464b      	mov	r3, r9
   d6518:	f000 fff6 	bl	d7508 <__aeabi_dcmplt>
   d651c:	b940      	cbnz	r0, d6530 <sqrt+0x5c>
   d651e:	eeb0 0a48 	vmov.f32	s0, s16
   d6522:	eef0 0a68 	vmov.f32	s1, s17
   d6526:	b00b      	add	sp, #44	; 0x2c
   d6528:	ecbd 8b02 	vpop	{d8}
   d652c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6530:	4b17      	ldr	r3, [pc, #92]	; (d6590 <sqrt+0xbc>)
   d6532:	9708      	str	r7, [sp, #32]
   d6534:	2201      	movs	r2, #1
   d6536:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d653a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d653e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d6542:	b1b6      	cbz	r6, d6572 <sqrt+0x9e>
   d6544:	4642      	mov	r2, r8
   d6546:	464b      	mov	r3, r9
   d6548:	4640      	mov	r0, r8
   d654a:	4649      	mov	r1, r9
   d654c:	f000 fe94 	bl	d7278 <__aeabi_ddiv>
   d6550:	2e02      	cmp	r6, #2
   d6552:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d6556:	d10e      	bne.n	d6576 <sqrt+0xa2>
   d6558:	f7fe fc68 	bl	d4e2c <__errno>
   d655c:	2321      	movs	r3, #33	; 0x21
   d655e:	6003      	str	r3, [r0, #0]
   d6560:	9b08      	ldr	r3, [sp, #32]
   d6562:	b973      	cbnz	r3, d6582 <sqrt+0xae>
   d6564:	ed9d 0b06 	vldr	d0, [sp, #24]
   d6568:	b00b      	add	sp, #44	; 0x2c
   d656a:	ecbd 8b02 	vpop	{d8}
   d656e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6572:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d6576:	4668      	mov	r0, sp
   d6578:	f000 fb9a 	bl	d6cb0 <matherr>
   d657c:	2800      	cmp	r0, #0
   d657e:	d1ef      	bne.n	d6560 <sqrt+0x8c>
   d6580:	e7ea      	b.n	d6558 <sqrt+0x84>
   d6582:	f7fe fc53 	bl	d4e2c <__errno>
   d6586:	9b08      	ldr	r3, [sp, #32]
   d6588:	6003      	str	r3, [r0, #0]
   d658a:	e7eb      	b.n	d6564 <sqrt+0x90>
   d658c:	2003e160 	.word	0x2003e160
   d6590:	000d7b1c 	.word	0x000d7b1c
   d6594:	00000000 	.word	0x00000000

000d6598 <__ieee754_atan2>:
   d6598:	ec51 0b11 	vmov	r0, r1, d1
   d659c:	4243      	negs	r3, r0
   d659e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d65a2:	4303      	orrs	r3, r0
   d65a4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d65a8:	4f75      	ldr	r7, [pc, #468]	; (d6780 <__ieee754_atan2+0x1e8>)
   d65aa:	ea48 73d3 	orr.w	r3, r8, r3, lsr #31
   d65ae:	42bb      	cmp	r3, r7
   d65b0:	ec55 4b10 	vmov	r4, r5, d0
   d65b4:	d849      	bhi.n	d664a <__ieee754_atan2+0xb2>
   d65b6:	4263      	negs	r3, r4
   d65b8:	4323      	orrs	r3, r4
   d65ba:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   d65be:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   d65c2:	42bb      	cmp	r3, r7
   d65c4:	46a9      	mov	r9, r5
   d65c6:	d840      	bhi.n	d664a <__ieee754_atan2+0xb2>
   d65c8:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   d65cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d65d0:	4303      	orrs	r3, r0
   d65d2:	468e      	mov	lr, r1
   d65d4:	d050      	beq.n	d6678 <__ieee754_atan2+0xe0>
   d65d6:	178e      	asrs	r6, r1, #30
   d65d8:	f006 0602 	and.w	r6, r6, #2
   d65dc:	ea54 030a 	orrs.w	r3, r4, sl
   d65e0:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
   d65e4:	d039      	beq.n	d665a <__ieee754_atan2+0xc2>
   d65e6:	ea50 0308 	orrs.w	r3, r0, r8
   d65ea:	d03e      	beq.n	d666a <__ieee754_atan2+0xd2>
   d65ec:	45b8      	cmp	r8, r7
   d65ee:	d055      	beq.n	d669c <__ieee754_atan2+0x104>
   d65f0:	45ba      	cmp	sl, r7
   d65f2:	d03a      	beq.n	d666a <__ieee754_atan2+0xd2>
   d65f4:	ebc8 080a 	rsb	r8, r8, sl
   d65f8:	ea4f 5828 	mov.w	r8, r8, asr #20
   d65fc:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
   d6600:	dc40      	bgt.n	d6684 <__ieee754_atan2+0xec>
   d6602:	2900      	cmp	r1, #0
   d6604:	db70      	blt.n	d66e8 <__ieee754_atan2+0x150>
   d6606:	4602      	mov	r2, r0
   d6608:	460b      	mov	r3, r1
   d660a:	4620      	mov	r0, r4
   d660c:	4629      	mov	r1, r5
   d660e:	f000 fe33 	bl	d7278 <__aeabi_ddiv>
   d6612:	ec41 0b10 	vmov	d0, r0, r1
   d6616:	f000 fb43 	bl	d6ca0 <fabs>
   d661a:	f000 f985 	bl	d6928 <atan>
   d661e:	ec51 0b10 	vmov	r0, r1, d0
   d6622:	2e01      	cmp	r6, #1
   d6624:	d05a      	beq.n	d66dc <__ieee754_atan2+0x144>
   d6626:	2e02      	cmp	r6, #2
   d6628:	d048      	beq.n	d66bc <__ieee754_atan2+0x124>
   d662a:	2e00      	cmp	r6, #0
   d662c:	d042      	beq.n	d66b4 <__ieee754_atan2+0x11c>
   d662e:	a33e      	add	r3, pc, #248	; (adr r3, d6728 <__ieee754_atan2+0x190>)
   d6630:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6634:	f000 fb42 	bl	d6cbc <__aeabi_dsub>
   d6638:	a33d      	add	r3, pc, #244	; (adr r3, d6730 <__ieee754_atan2+0x198>)
   d663a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d663e:	f000 fb3d 	bl	d6cbc <__aeabi_dsub>
   d6642:	ec41 0b10 	vmov	d0, r0, r1
   d6646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d664a:	4622      	mov	r2, r4
   d664c:	462b      	mov	r3, r5
   d664e:	f000 fb37 	bl	d6cc0 <__adddf3>
   d6652:	ec41 0b10 	vmov	d0, r0, r1
   d6656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d665a:	2e02      	cmp	r6, #2
   d665c:	d016      	beq.n	d668c <__ieee754_atan2+0xf4>
   d665e:	2e03      	cmp	r6, #3
   d6660:	d10e      	bne.n	d6680 <__ieee754_atan2+0xe8>
   d6662:	ed9f 0b35 	vldr	d0, [pc, #212]	; d6738 <__ieee754_atan2+0x1a0>
   d6666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d666a:	f1b9 0f00 	cmp.w	r9, #0
   d666e:	db11      	blt.n	d6694 <__ieee754_atan2+0xfc>
   d6670:	ed9f 0b33 	vldr	d0, [pc, #204]	; d6740 <__ieee754_atan2+0x1a8>
   d6674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6678:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d667c:	f000 b954 	b.w	d6928 <atan>
   d6680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6684:	a12e      	add	r1, pc, #184	; (adr r1, d6740 <__ieee754_atan2+0x1a8>)
   d6686:	e9d1 0100 	ldrd	r0, r1, [r1]
   d668a:	e7ca      	b.n	d6622 <__ieee754_atan2+0x8a>
   d668c:	ed9f 0b28 	vldr	d0, [pc, #160]	; d6730 <__ieee754_atan2+0x198>
   d6690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6694:	ed9f 0b2c 	vldr	d0, [pc, #176]	; d6748 <__ieee754_atan2+0x1b0>
   d6698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d669c:	45c2      	cmp	sl, r8
   d669e:	d029      	beq.n	d66f4 <__ieee754_atan2+0x15c>
   d66a0:	2e02      	cmp	r6, #2
   d66a2:	d0f3      	beq.n	d668c <__ieee754_atan2+0xf4>
   d66a4:	2e03      	cmp	r6, #3
   d66a6:	d0dc      	beq.n	d6662 <__ieee754_atan2+0xca>
   d66a8:	2e01      	cmp	r6, #1
   d66aa:	d02d      	beq.n	d6708 <__ieee754_atan2+0x170>
   d66ac:	ed9f 0b28 	vldr	d0, [pc, #160]	; d6750 <__ieee754_atan2+0x1b8>
   d66b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d66b4:	ec41 0b10 	vmov	d0, r0, r1
   d66b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d66bc:	a31a      	add	r3, pc, #104	; (adr r3, d6728 <__ieee754_atan2+0x190>)
   d66be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d66c2:	f000 fafb 	bl	d6cbc <__aeabi_dsub>
   d66c6:	4602      	mov	r2, r0
   d66c8:	460b      	mov	r3, r1
   d66ca:	a119      	add	r1, pc, #100	; (adr r1, d6730 <__ieee754_atan2+0x198>)
   d66cc:	e9d1 0100 	ldrd	r0, r1, [r1]
   d66d0:	f000 faf4 	bl	d6cbc <__aeabi_dsub>
   d66d4:	ec41 0b10 	vmov	d0, r0, r1
   d66d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d66dc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   d66e0:	ec41 0b10 	vmov	d0, r0, r1
   d66e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d66e8:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
   d66ec:	da8b      	bge.n	d6606 <__ieee754_atan2+0x6e>
   d66ee:	2000      	movs	r0, #0
   d66f0:	2100      	movs	r1, #0
   d66f2:	e796      	b.n	d6622 <__ieee754_atan2+0x8a>
   d66f4:	2e02      	cmp	r6, #2
   d66f6:	d013      	beq.n	d6720 <__ieee754_atan2+0x188>
   d66f8:	2e03      	cmp	r6, #3
   d66fa:	d00d      	beq.n	d6718 <__ieee754_atan2+0x180>
   d66fc:	2e01      	cmp	r6, #1
   d66fe:	d007      	beq.n	d6710 <__ieee754_atan2+0x178>
   d6700:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6758 <__ieee754_atan2+0x1c0>
   d6704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6708:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6760 <__ieee754_atan2+0x1c8>
   d670c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6710:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6768 <__ieee754_atan2+0x1d0>
   d6714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6718:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6770 <__ieee754_atan2+0x1d8>
   d671c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6720:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6778 <__ieee754_atan2+0x1e0>
   d6724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6728:	33145c07 	.word	0x33145c07
   d672c:	3ca1a626 	.word	0x3ca1a626
   d6730:	54442d18 	.word	0x54442d18
   d6734:	400921fb 	.word	0x400921fb
   d6738:	54442d18 	.word	0x54442d18
   d673c:	c00921fb 	.word	0xc00921fb
   d6740:	54442d18 	.word	0x54442d18
   d6744:	3ff921fb 	.word	0x3ff921fb
   d6748:	54442d18 	.word	0x54442d18
   d674c:	bff921fb 	.word	0xbff921fb
	...
   d6758:	54442d18 	.word	0x54442d18
   d675c:	3fe921fb 	.word	0x3fe921fb
   d6760:	00000000 	.word	0x00000000
   d6764:	80000000 	.word	0x80000000
   d6768:	54442d18 	.word	0x54442d18
   d676c:	bfe921fb 	.word	0xbfe921fb
   d6770:	7f3321d2 	.word	0x7f3321d2
   d6774:	c002d97c 	.word	0xc002d97c
   d6778:	7f3321d2 	.word	0x7f3321d2
   d677c:	4002d97c 	.word	0x4002d97c
   d6780:	7ff00000 	.word	0x7ff00000

000d6784 <__ieee754_sqrt>:
   d6784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6788:	4965      	ldr	r1, [pc, #404]	; (d6920 <__ieee754_sqrt+0x19c>)
   d678a:	ec55 4b10 	vmov	r4, r5, d0
   d678e:	460e      	mov	r6, r1
   d6790:	4029      	ands	r1, r5
   d6792:	42b1      	cmp	r1, r6
   d6794:	f000 8097 	beq.w	d68c6 <__ieee754_sqrt+0x142>
   d6798:	2d00      	cmp	r5, #0
   d679a:	462b      	mov	r3, r5
   d679c:	ee10 2a10 	vmov	r2, s0
   d67a0:	dd74      	ble.n	d688c <__ieee754_sqrt+0x108>
   d67a2:	152f      	asrs	r7, r5, #20
   d67a4:	d07f      	beq.n	d68a6 <__ieee754_sqrt+0x122>
   d67a6:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d67aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d67ae:	07f9      	lsls	r1, r7, #31
   d67b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d67b4:	d465      	bmi.n	d6882 <__ieee754_sqrt+0xfe>
   d67b6:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d67ba:	2600      	movs	r6, #0
   d67bc:	440b      	add	r3, r1
   d67be:	107f      	asrs	r7, r7, #1
   d67c0:	0052      	lsls	r2, r2, #1
   d67c2:	46b6      	mov	lr, r6
   d67c4:	2016      	movs	r0, #22
   d67c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d67ca:	eb0e 0401 	add.w	r4, lr, r1
   d67ce:	429c      	cmp	r4, r3
   d67d0:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d67d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d67d8:	dc03      	bgt.n	d67e2 <__ieee754_sqrt+0x5e>
   d67da:	1b1b      	subs	r3, r3, r4
   d67dc:	eb04 0e01 	add.w	lr, r4, r1
   d67e0:	440e      	add	r6, r1
   d67e2:	3801      	subs	r0, #1
   d67e4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d67e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d67ec:	d1ed      	bne.n	d67ca <__ieee754_sqrt+0x46>
   d67ee:	4684      	mov	ip, r0
   d67f0:	2420      	movs	r4, #32
   d67f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d67f6:	e009      	b.n	d680c <__ieee754_sqrt+0x88>
   d67f8:	d020      	beq.n	d683c <__ieee754_sqrt+0xb8>
   d67fa:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d67fe:	3c01      	subs	r4, #1
   d6800:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6804:	442b      	add	r3, r5
   d6806:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d680a:	d020      	beq.n	d684e <__ieee754_sqrt+0xca>
   d680c:	459e      	cmp	lr, r3
   d680e:	eb01 050c 	add.w	r5, r1, ip
   d6812:	daf1      	bge.n	d67f8 <__ieee754_sqrt+0x74>
   d6814:	2d00      	cmp	r5, #0
   d6816:	eb05 0c01 	add.w	ip, r5, r1
   d681a:	db09      	blt.n	d6830 <__ieee754_sqrt+0xac>
   d681c:	46f0      	mov	r8, lr
   d681e:	4295      	cmp	r5, r2
   d6820:	ebce 0303 	rsb	r3, lr, r3
   d6824:	d900      	bls.n	d6828 <__ieee754_sqrt+0xa4>
   d6826:	3b01      	subs	r3, #1
   d6828:	1b52      	subs	r2, r2, r5
   d682a:	4408      	add	r0, r1
   d682c:	46c6      	mov	lr, r8
   d682e:	e7e4      	b.n	d67fa <__ieee754_sqrt+0x76>
   d6830:	f1bc 0f00 	cmp.w	ip, #0
   d6834:	dbf2      	blt.n	d681c <__ieee754_sqrt+0x98>
   d6836:	f10e 0801 	add.w	r8, lr, #1
   d683a:	e7f0      	b.n	d681e <__ieee754_sqrt+0x9a>
   d683c:	4295      	cmp	r5, r2
   d683e:	d81e      	bhi.n	d687e <__ieee754_sqrt+0xfa>
   d6840:	2d00      	cmp	r5, #0
   d6842:	eb05 0c01 	add.w	ip, r5, r1
   d6846:	db50      	blt.n	d68ea <__ieee754_sqrt+0x166>
   d6848:	4698      	mov	r8, r3
   d684a:	2300      	movs	r3, #0
   d684c:	e7ec      	b.n	d6828 <__ieee754_sqrt+0xa4>
   d684e:	4313      	orrs	r3, r2
   d6850:	d004      	beq.n	d685c <__ieee754_sqrt+0xd8>
   d6852:	1c42      	adds	r2, r0, #1
   d6854:	d04d      	beq.n	d68f2 <__ieee754_sqrt+0x16e>
   d6856:	f000 0301 	and.w	r3, r0, #1
   d685a:	4418      	add	r0, r3
   d685c:	0840      	lsrs	r0, r0, #1
   d685e:	1071      	asrs	r1, r6, #1
   d6860:	07f3      	lsls	r3, r6, #31
   d6862:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d6866:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d686a:	bf48      	it	mi
   d686c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d6870:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d6874:	4602      	mov	r2, r0
   d6876:	ec43 2b10 	vmov	d0, r2, r3
   d687a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d687e:	4673      	mov	r3, lr
   d6880:	e7bb      	b.n	d67fa <__ieee754_sqrt+0x76>
   d6882:	005b      	lsls	r3, r3, #1
   d6884:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d6888:	0052      	lsls	r2, r2, #1
   d688a:	e794      	b.n	d67b6 <__ieee754_sqrt+0x32>
   d688c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d6890:	4321      	orrs	r1, r4
   d6892:	d028      	beq.n	d68e6 <__ieee754_sqrt+0x162>
   d6894:	bbad      	cbnz	r5, d6902 <__ieee754_sqrt+0x17e>
   d6896:	462f      	mov	r7, r5
   d6898:	0ad3      	lsrs	r3, r2, #11
   d689a:	3f15      	subs	r7, #21
   d689c:	0552      	lsls	r2, r2, #21
   d689e:	2b00      	cmp	r3, #0
   d68a0:	d0fa      	beq.n	d6898 <__ieee754_sqrt+0x114>
   d68a2:	02dd      	lsls	r5, r3, #11
   d68a4:	d428      	bmi.n	d68f8 <__ieee754_sqrt+0x174>
   d68a6:	2100      	movs	r1, #0
   d68a8:	e000      	b.n	d68ac <__ieee754_sqrt+0x128>
   d68aa:	4601      	mov	r1, r0
   d68ac:	005b      	lsls	r3, r3, #1
   d68ae:	02dc      	lsls	r4, r3, #11
   d68b0:	f101 0001 	add.w	r0, r1, #1
   d68b4:	d5f9      	bpl.n	d68aa <__ieee754_sqrt+0x126>
   d68b6:	f1c0 0420 	rsb	r4, r0, #32
   d68ba:	fa22 f404 	lsr.w	r4, r2, r4
   d68be:	4323      	orrs	r3, r4
   d68c0:	1a7f      	subs	r7, r7, r1
   d68c2:	4082      	lsls	r2, r0
   d68c4:	e76f      	b.n	d67a6 <__ieee754_sqrt+0x22>
   d68c6:	ee10 2a10 	vmov	r2, s0
   d68ca:	462b      	mov	r3, r5
   d68cc:	ee10 0a10 	vmov	r0, s0
   d68d0:	4629      	mov	r1, r5
   d68d2:	f000 fba7 	bl	d7024 <__aeabi_dmul>
   d68d6:	4622      	mov	r2, r4
   d68d8:	462b      	mov	r3, r5
   d68da:	f000 f9f1 	bl	d6cc0 <__adddf3>
   d68de:	ec41 0b10 	vmov	d0, r0, r1
   d68e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d68e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d68ea:	f1bc 0f00 	cmp.w	ip, #0
   d68ee:	daa2      	bge.n	d6836 <__ieee754_sqrt+0xb2>
   d68f0:	e7aa      	b.n	d6848 <__ieee754_sqrt+0xc4>
   d68f2:	3601      	adds	r6, #1
   d68f4:	4620      	mov	r0, r4
   d68f6:	e7b2      	b.n	d685e <__ieee754_sqrt+0xda>
   d68f8:	2420      	movs	r4, #32
   d68fa:	f04f 31ff 	mov.w	r1, #4294967295
   d68fe:	2000      	movs	r0, #0
   d6900:	e7db      	b.n	d68ba <__ieee754_sqrt+0x136>
   d6902:	ee10 2a10 	vmov	r2, s0
   d6906:	462b      	mov	r3, r5
   d6908:	4620      	mov	r0, r4
   d690a:	4629      	mov	r1, r5
   d690c:	f000 f9d6 	bl	d6cbc <__aeabi_dsub>
   d6910:	4602      	mov	r2, r0
   d6912:	460b      	mov	r3, r1
   d6914:	f000 fcb0 	bl	d7278 <__aeabi_ddiv>
   d6918:	ec41 0b10 	vmov	d0, r0, r1
   d691c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6920:	7ff00000 	.word	0x7ff00000
   d6924:	00000000 	.word	0x00000000

000d6928 <atan>:
   d6928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d692c:	ec55 4b10 	vmov	r4, r5, d0
   d6930:	4bd1      	ldr	r3, [pc, #836]	; (d6c78 <atan+0x350>)
   d6932:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   d6936:	429e      	cmp	r6, r3
   d6938:	46ab      	mov	fp, r5
   d693a:	dd10      	ble.n	d695e <atan+0x36>
   d693c:	4bcf      	ldr	r3, [pc, #828]	; (d6c7c <atan+0x354>)
   d693e:	429e      	cmp	r6, r3
   d6940:	f300 80b2 	bgt.w	d6aa8 <atan+0x180>
   d6944:	f000 80ad 	beq.w	d6aa2 <atan+0x17a>
   d6948:	f1bb 0f00 	cmp.w	fp, #0
   d694c:	f340 80fd 	ble.w	d6b4a <atan+0x222>
   d6950:	a5ad      	add	r5, pc, #692	; (adr r5, d6c08 <atan+0x2e0>)
   d6952:	e9d5 4500 	ldrd	r4, r5, [r5]
   d6956:	ec45 4b10 	vmov	d0, r4, r5
   d695a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d695e:	4bc8      	ldr	r3, [pc, #800]	; (d6c80 <atan+0x358>)
   d6960:	429e      	cmp	r6, r3
   d6962:	f300 80c0 	bgt.w	d6ae6 <atan+0x1be>
   d6966:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   d696a:	429e      	cmp	r6, r3
   d696c:	f340 80a8 	ble.w	d6ac0 <atan+0x198>
   d6970:	f04f 3aff 	mov.w	sl, #4294967295
   d6974:	4622      	mov	r2, r4
   d6976:	462b      	mov	r3, r5
   d6978:	4620      	mov	r0, r4
   d697a:	4629      	mov	r1, r5
   d697c:	f000 fb52 	bl	d7024 <__aeabi_dmul>
   d6980:	4602      	mov	r2, r0
   d6982:	460b      	mov	r3, r1
   d6984:	4680      	mov	r8, r0
   d6986:	4689      	mov	r9, r1
   d6988:	f000 fb4c 	bl	d7024 <__aeabi_dmul>
   d698c:	a3a0      	add	r3, pc, #640	; (adr r3, d6c10 <atan+0x2e8>)
   d698e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6992:	4606      	mov	r6, r0
   d6994:	460f      	mov	r7, r1
   d6996:	f000 fb45 	bl	d7024 <__aeabi_dmul>
   d699a:	a39f      	add	r3, pc, #636	; (adr r3, d6c18 <atan+0x2f0>)
   d699c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d69a0:	f000 f98e 	bl	d6cc0 <__adddf3>
   d69a4:	4632      	mov	r2, r6
   d69a6:	463b      	mov	r3, r7
   d69a8:	f000 fb3c 	bl	d7024 <__aeabi_dmul>
   d69ac:	a39c      	add	r3, pc, #624	; (adr r3, d6c20 <atan+0x2f8>)
   d69ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d69b2:	f000 f985 	bl	d6cc0 <__adddf3>
   d69b6:	4632      	mov	r2, r6
   d69b8:	463b      	mov	r3, r7
   d69ba:	f000 fb33 	bl	d7024 <__aeabi_dmul>
   d69be:	a39a      	add	r3, pc, #616	; (adr r3, d6c28 <atan+0x300>)
   d69c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d69c4:	f000 f97c 	bl	d6cc0 <__adddf3>
   d69c8:	4632      	mov	r2, r6
   d69ca:	463b      	mov	r3, r7
   d69cc:	f000 fb2a 	bl	d7024 <__aeabi_dmul>
   d69d0:	a397      	add	r3, pc, #604	; (adr r3, d6c30 <atan+0x308>)
   d69d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d69d6:	f000 f973 	bl	d6cc0 <__adddf3>
   d69da:	4632      	mov	r2, r6
   d69dc:	463b      	mov	r3, r7
   d69de:	f000 fb21 	bl	d7024 <__aeabi_dmul>
   d69e2:	a395      	add	r3, pc, #596	; (adr r3, d6c38 <atan+0x310>)
   d69e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d69e8:	f000 f96a 	bl	d6cc0 <__adddf3>
   d69ec:	4642      	mov	r2, r8
   d69ee:	464b      	mov	r3, r9
   d69f0:	f000 fb18 	bl	d7024 <__aeabi_dmul>
   d69f4:	a392      	add	r3, pc, #584	; (adr r3, d6c40 <atan+0x318>)
   d69f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d69fa:	4680      	mov	r8, r0
   d69fc:	4689      	mov	r9, r1
   d69fe:	4630      	mov	r0, r6
   d6a00:	4639      	mov	r1, r7
   d6a02:	f000 fb0f 	bl	d7024 <__aeabi_dmul>
   d6a06:	a390      	add	r3, pc, #576	; (adr r3, d6c48 <atan+0x320>)
   d6a08:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6a0c:	f000 f956 	bl	d6cbc <__aeabi_dsub>
   d6a10:	4632      	mov	r2, r6
   d6a12:	463b      	mov	r3, r7
   d6a14:	f000 fb06 	bl	d7024 <__aeabi_dmul>
   d6a18:	a38d      	add	r3, pc, #564	; (adr r3, d6c50 <atan+0x328>)
   d6a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6a1e:	f000 f94d 	bl	d6cbc <__aeabi_dsub>
   d6a22:	4632      	mov	r2, r6
   d6a24:	463b      	mov	r3, r7
   d6a26:	f000 fafd 	bl	d7024 <__aeabi_dmul>
   d6a2a:	a38b      	add	r3, pc, #556	; (adr r3, d6c58 <atan+0x330>)
   d6a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6a30:	f000 f944 	bl	d6cbc <__aeabi_dsub>
   d6a34:	4632      	mov	r2, r6
   d6a36:	463b      	mov	r3, r7
   d6a38:	f000 faf4 	bl	d7024 <__aeabi_dmul>
   d6a3c:	a388      	add	r3, pc, #544	; (adr r3, d6c60 <atan+0x338>)
   d6a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6a42:	f000 f93b 	bl	d6cbc <__aeabi_dsub>
   d6a46:	4632      	mov	r2, r6
   d6a48:	463b      	mov	r3, r7
   d6a4a:	f000 faeb 	bl	d7024 <__aeabi_dmul>
   d6a4e:	f1ba 3fff 	cmp.w	sl, #4294967295
   d6a52:	4602      	mov	r2, r0
   d6a54:	460b      	mov	r3, r1
   d6a56:	d07c      	beq.n	d6b52 <atan+0x22a>
   d6a58:	4640      	mov	r0, r8
   d6a5a:	4649      	mov	r1, r9
   d6a5c:	f000 f930 	bl	d6cc0 <__adddf3>
   d6a60:	4622      	mov	r2, r4
   d6a62:	462b      	mov	r3, r5
   d6a64:	f000 fade 	bl	d7024 <__aeabi_dmul>
   d6a68:	4e86      	ldr	r6, [pc, #536]	; (d6c84 <atan+0x35c>)
   d6a6a:	4b87      	ldr	r3, [pc, #540]	; (d6c88 <atan+0x360>)
   d6a6c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   d6a70:	4456      	add	r6, sl
   d6a72:	449a      	add	sl, r3
   d6a74:	e9da 2300 	ldrd	r2, r3, [sl]
   d6a78:	f000 f920 	bl	d6cbc <__aeabi_dsub>
   d6a7c:	4622      	mov	r2, r4
   d6a7e:	462b      	mov	r3, r5
   d6a80:	f000 f91c 	bl	d6cbc <__aeabi_dsub>
   d6a84:	4602      	mov	r2, r0
   d6a86:	460b      	mov	r3, r1
   d6a88:	e9d6 0100 	ldrd	r0, r1, [r6]
   d6a8c:	f000 f916 	bl	d6cbc <__aeabi_dsub>
   d6a90:	f1bb 0f00 	cmp.w	fp, #0
   d6a94:	db52      	blt.n	d6b3c <atan+0x214>
   d6a96:	4604      	mov	r4, r0
   d6a98:	460d      	mov	r5, r1
   d6a9a:	ec45 4b10 	vmov	d0, r4, r5
   d6a9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6aa2:	2c00      	cmp	r4, #0
   d6aa4:	f43f af50 	beq.w	d6948 <atan+0x20>
   d6aa8:	4622      	mov	r2, r4
   d6aaa:	462b      	mov	r3, r5
   d6aac:	4620      	mov	r0, r4
   d6aae:	4629      	mov	r1, r5
   d6ab0:	f000 f906 	bl	d6cc0 <__adddf3>
   d6ab4:	4604      	mov	r4, r0
   d6ab6:	460d      	mov	r5, r1
   d6ab8:	ec45 4b10 	vmov	d0, r4, r5
   d6abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ac0:	a369      	add	r3, pc, #420	; (adr r3, d6c68 <atan+0x340>)
   d6ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ac6:	ee10 0a10 	vmov	r0, s0
   d6aca:	4629      	mov	r1, r5
   d6acc:	f000 f8f8 	bl	d6cc0 <__adddf3>
   d6ad0:	2200      	movs	r2, #0
   d6ad2:	4b6e      	ldr	r3, [pc, #440]	; (d6c8c <atan+0x364>)
   d6ad4:	f000 fd36 	bl	d7544 <__aeabi_dcmpgt>
   d6ad8:	2800      	cmp	r0, #0
   d6ada:	f43f af49 	beq.w	d6970 <atan+0x48>
   d6ade:	ec45 4b10 	vmov	d0, r4, r5
   d6ae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ae6:	f000 f8db 	bl	d6ca0 <fabs>
   d6aea:	4b69      	ldr	r3, [pc, #420]	; (d6c90 <atan+0x368>)
   d6aec:	429e      	cmp	r6, r3
   d6aee:	ec55 4b10 	vmov	r4, r5, d0
   d6af2:	dc3f      	bgt.n	d6b74 <atan+0x24c>
   d6af4:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   d6af8:	429e      	cmp	r6, r3
   d6afa:	dc68      	bgt.n	d6bce <atan+0x2a6>
   d6afc:	ee10 2a10 	vmov	r2, s0
   d6b00:	ee10 0a10 	vmov	r0, s0
   d6b04:	462b      	mov	r3, r5
   d6b06:	4629      	mov	r1, r5
   d6b08:	f000 f8da 	bl	d6cc0 <__adddf3>
   d6b0c:	2200      	movs	r2, #0
   d6b0e:	4b5f      	ldr	r3, [pc, #380]	; (d6c8c <atan+0x364>)
   d6b10:	f000 f8d4 	bl	d6cbc <__aeabi_dsub>
   d6b14:	2200      	movs	r2, #0
   d6b16:	4606      	mov	r6, r0
   d6b18:	460f      	mov	r7, r1
   d6b1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d6b1e:	4620      	mov	r0, r4
   d6b20:	4629      	mov	r1, r5
   d6b22:	f000 f8cd 	bl	d6cc0 <__adddf3>
   d6b26:	4602      	mov	r2, r0
   d6b28:	460b      	mov	r3, r1
   d6b2a:	4630      	mov	r0, r6
   d6b2c:	4639      	mov	r1, r7
   d6b2e:	f000 fba3 	bl	d7278 <__aeabi_ddiv>
   d6b32:	f04f 0a00 	mov.w	sl, #0
   d6b36:	4604      	mov	r4, r0
   d6b38:	460d      	mov	r5, r1
   d6b3a:	e71b      	b.n	d6974 <atan+0x4c>
   d6b3c:	4604      	mov	r4, r0
   d6b3e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   d6b42:	ec45 4b10 	vmov	d0, r4, r5
   d6b46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6b4a:	a549      	add	r5, pc, #292	; (adr r5, d6c70 <atan+0x348>)
   d6b4c:	e9d5 4500 	ldrd	r4, r5, [r5]
   d6b50:	e7b2      	b.n	d6ab8 <atan+0x190>
   d6b52:	4640      	mov	r0, r8
   d6b54:	4649      	mov	r1, r9
   d6b56:	f000 f8b3 	bl	d6cc0 <__adddf3>
   d6b5a:	4622      	mov	r2, r4
   d6b5c:	462b      	mov	r3, r5
   d6b5e:	f000 fa61 	bl	d7024 <__aeabi_dmul>
   d6b62:	4602      	mov	r2, r0
   d6b64:	460b      	mov	r3, r1
   d6b66:	4620      	mov	r0, r4
   d6b68:	4629      	mov	r1, r5
   d6b6a:	f000 f8a7 	bl	d6cbc <__aeabi_dsub>
   d6b6e:	4604      	mov	r4, r0
   d6b70:	460d      	mov	r5, r1
   d6b72:	e7a1      	b.n	d6ab8 <atan+0x190>
   d6b74:	4b47      	ldr	r3, [pc, #284]	; (d6c94 <atan+0x36c>)
   d6b76:	429e      	cmp	r6, r3
   d6b78:	dc1d      	bgt.n	d6bb6 <atan+0x28e>
   d6b7a:	ee10 0a10 	vmov	r0, s0
   d6b7e:	2200      	movs	r2, #0
   d6b80:	4b45      	ldr	r3, [pc, #276]	; (d6c98 <atan+0x370>)
   d6b82:	4629      	mov	r1, r5
   d6b84:	f000 f89a 	bl	d6cbc <__aeabi_dsub>
   d6b88:	2200      	movs	r2, #0
   d6b8a:	4606      	mov	r6, r0
   d6b8c:	460f      	mov	r7, r1
   d6b8e:	4b42      	ldr	r3, [pc, #264]	; (d6c98 <atan+0x370>)
   d6b90:	4620      	mov	r0, r4
   d6b92:	4629      	mov	r1, r5
   d6b94:	f000 fa46 	bl	d7024 <__aeabi_dmul>
   d6b98:	2200      	movs	r2, #0
   d6b9a:	4b3c      	ldr	r3, [pc, #240]	; (d6c8c <atan+0x364>)
   d6b9c:	f000 f890 	bl	d6cc0 <__adddf3>
   d6ba0:	4602      	mov	r2, r0
   d6ba2:	460b      	mov	r3, r1
   d6ba4:	4630      	mov	r0, r6
   d6ba6:	4639      	mov	r1, r7
   d6ba8:	f000 fb66 	bl	d7278 <__aeabi_ddiv>
   d6bac:	f04f 0a02 	mov.w	sl, #2
   d6bb0:	4604      	mov	r4, r0
   d6bb2:	460d      	mov	r5, r1
   d6bb4:	e6de      	b.n	d6974 <atan+0x4c>
   d6bb6:	462b      	mov	r3, r5
   d6bb8:	ee10 2a10 	vmov	r2, s0
   d6bbc:	2000      	movs	r0, #0
   d6bbe:	4937      	ldr	r1, [pc, #220]	; (d6c9c <atan+0x374>)
   d6bc0:	f000 fb5a 	bl	d7278 <__aeabi_ddiv>
   d6bc4:	f04f 0a03 	mov.w	sl, #3
   d6bc8:	4604      	mov	r4, r0
   d6bca:	460d      	mov	r5, r1
   d6bcc:	e6d2      	b.n	d6974 <atan+0x4c>
   d6bce:	ee10 0a10 	vmov	r0, s0
   d6bd2:	2200      	movs	r2, #0
   d6bd4:	4b2d      	ldr	r3, [pc, #180]	; (d6c8c <atan+0x364>)
   d6bd6:	4629      	mov	r1, r5
   d6bd8:	f000 f870 	bl	d6cbc <__aeabi_dsub>
   d6bdc:	2200      	movs	r2, #0
   d6bde:	4606      	mov	r6, r0
   d6be0:	460f      	mov	r7, r1
   d6be2:	4b2a      	ldr	r3, [pc, #168]	; (d6c8c <atan+0x364>)
   d6be4:	4620      	mov	r0, r4
   d6be6:	4629      	mov	r1, r5
   d6be8:	f000 f86a 	bl	d6cc0 <__adddf3>
   d6bec:	4602      	mov	r2, r0
   d6bee:	460b      	mov	r3, r1
   d6bf0:	4630      	mov	r0, r6
   d6bf2:	4639      	mov	r1, r7
   d6bf4:	f000 fb40 	bl	d7278 <__aeabi_ddiv>
   d6bf8:	f04f 0a01 	mov.w	sl, #1
   d6bfc:	4604      	mov	r4, r0
   d6bfe:	460d      	mov	r5, r1
   d6c00:	e6b8      	b.n	d6974 <atan+0x4c>
   d6c02:	bf00      	nop
   d6c04:	f3af 8000 	nop.w
   d6c08:	54442d18 	.word	0x54442d18
   d6c0c:	3ff921fb 	.word	0x3ff921fb
   d6c10:	e322da11 	.word	0xe322da11
   d6c14:	3f90ad3a 	.word	0x3f90ad3a
   d6c18:	24760deb 	.word	0x24760deb
   d6c1c:	3fa97b4b 	.word	0x3fa97b4b
   d6c20:	a0d03d51 	.word	0xa0d03d51
   d6c24:	3fb10d66 	.word	0x3fb10d66
   d6c28:	c54c206e 	.word	0xc54c206e
   d6c2c:	3fb745cd 	.word	0x3fb745cd
   d6c30:	920083ff 	.word	0x920083ff
   d6c34:	3fc24924 	.word	0x3fc24924
   d6c38:	5555550d 	.word	0x5555550d
   d6c3c:	3fd55555 	.word	0x3fd55555
   d6c40:	2c6a6c2f 	.word	0x2c6a6c2f
   d6c44:	bfa2b444 	.word	0xbfa2b444
   d6c48:	52defd9a 	.word	0x52defd9a
   d6c4c:	3fadde2d 	.word	0x3fadde2d
   d6c50:	af749a6d 	.word	0xaf749a6d
   d6c54:	3fb3b0f2 	.word	0x3fb3b0f2
   d6c58:	fe231671 	.word	0xfe231671
   d6c5c:	3fbc71c6 	.word	0x3fbc71c6
   d6c60:	9998ebc4 	.word	0x9998ebc4
   d6c64:	3fc99999 	.word	0x3fc99999
   d6c68:	8800759c 	.word	0x8800759c
   d6c6c:	7e37e43c 	.word	0x7e37e43c
   d6c70:	54442d18 	.word	0x54442d18
   d6c74:	bff921fb 	.word	0xbff921fb
   d6c78:	440fffff 	.word	0x440fffff
   d6c7c:	7ff00000 	.word	0x7ff00000
   d6c80:	3fdbffff 	.word	0x3fdbffff
   d6c84:	000d7b48 	.word	0x000d7b48
   d6c88:	000d7b28 	.word	0x000d7b28
   d6c8c:	3ff00000 	.word	0x3ff00000
   d6c90:	3ff2ffff 	.word	0x3ff2ffff
   d6c94:	40037fff 	.word	0x40037fff
   d6c98:	3ff80000 	.word	0x3ff80000
   d6c9c:	bff00000 	.word	0xbff00000

000d6ca0 <fabs>:
   d6ca0:	ec53 2b10 	vmov	r2, r3, d0
   d6ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d6ca8:	ec43 2b10 	vmov	d0, r2, r3
   d6cac:	4770      	bx	lr
   d6cae:	bf00      	nop

000d6cb0 <matherr>:
   d6cb0:	2000      	movs	r0, #0
   d6cb2:	4770      	bx	lr

000d6cb4 <__aeabi_drsub>:
   d6cb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6cb8:	e002      	b.n	d6cc0 <__adddf3>
   d6cba:	bf00      	nop

000d6cbc <__aeabi_dsub>:
   d6cbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6cc0 <__adddf3>:
   d6cc0:	b530      	push	{r4, r5, lr}
   d6cc2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6cc6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6cca:	ea94 0f05 	teq	r4, r5
   d6cce:	bf08      	it	eq
   d6cd0:	ea90 0f02 	teqeq	r0, r2
   d6cd4:	bf1f      	itttt	ne
   d6cd6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6cda:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6cde:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6ce2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6ce6:	f000 80e2 	beq.w	d6eae <__adddf3+0x1ee>
   d6cea:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6cee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6cf2:	bfb8      	it	lt
   d6cf4:	426d      	neglt	r5, r5
   d6cf6:	dd0c      	ble.n	d6d12 <__adddf3+0x52>
   d6cf8:	442c      	add	r4, r5
   d6cfa:	ea80 0202 	eor.w	r2, r0, r2
   d6cfe:	ea81 0303 	eor.w	r3, r1, r3
   d6d02:	ea82 0000 	eor.w	r0, r2, r0
   d6d06:	ea83 0101 	eor.w	r1, r3, r1
   d6d0a:	ea80 0202 	eor.w	r2, r0, r2
   d6d0e:	ea81 0303 	eor.w	r3, r1, r3
   d6d12:	2d36      	cmp	r5, #54	; 0x36
   d6d14:	bf88      	it	hi
   d6d16:	bd30      	pophi	{r4, r5, pc}
   d6d18:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6d1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6d20:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6d24:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6d28:	d002      	beq.n	d6d30 <__adddf3+0x70>
   d6d2a:	4240      	negs	r0, r0
   d6d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6d30:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6d34:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6d38:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6d3c:	d002      	beq.n	d6d44 <__adddf3+0x84>
   d6d3e:	4252      	negs	r2, r2
   d6d40:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6d44:	ea94 0f05 	teq	r4, r5
   d6d48:	f000 80a7 	beq.w	d6e9a <__adddf3+0x1da>
   d6d4c:	f1a4 0401 	sub.w	r4, r4, #1
   d6d50:	f1d5 0e20 	rsbs	lr, r5, #32
   d6d54:	db0d      	blt.n	d6d72 <__adddf3+0xb2>
   d6d56:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6d5a:	fa22 f205 	lsr.w	r2, r2, r5
   d6d5e:	1880      	adds	r0, r0, r2
   d6d60:	f141 0100 	adc.w	r1, r1, #0
   d6d64:	fa03 f20e 	lsl.w	r2, r3, lr
   d6d68:	1880      	adds	r0, r0, r2
   d6d6a:	fa43 f305 	asr.w	r3, r3, r5
   d6d6e:	4159      	adcs	r1, r3
   d6d70:	e00e      	b.n	d6d90 <__adddf3+0xd0>
   d6d72:	f1a5 0520 	sub.w	r5, r5, #32
   d6d76:	f10e 0e20 	add.w	lr, lr, #32
   d6d7a:	2a01      	cmp	r2, #1
   d6d7c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6d80:	bf28      	it	cs
   d6d82:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6d86:	fa43 f305 	asr.w	r3, r3, r5
   d6d8a:	18c0      	adds	r0, r0, r3
   d6d8c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6d90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6d94:	d507      	bpl.n	d6da6 <__adddf3+0xe6>
   d6d96:	f04f 0e00 	mov.w	lr, #0
   d6d9a:	f1dc 0c00 	rsbs	ip, ip, #0
   d6d9e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6da2:	eb6e 0101 	sbc.w	r1, lr, r1
   d6da6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6daa:	d31b      	bcc.n	d6de4 <__adddf3+0x124>
   d6dac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6db0:	d30c      	bcc.n	d6dcc <__adddf3+0x10c>
   d6db2:	0849      	lsrs	r1, r1, #1
   d6db4:	ea5f 0030 	movs.w	r0, r0, rrx
   d6db8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6dbc:	f104 0401 	add.w	r4, r4, #1
   d6dc0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6dc4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6dc8:	f080 809a 	bcs.w	d6f00 <__adddf3+0x240>
   d6dcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6dd0:	bf08      	it	eq
   d6dd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6dd6:	f150 0000 	adcs.w	r0, r0, #0
   d6dda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6dde:	ea41 0105 	orr.w	r1, r1, r5
   d6de2:	bd30      	pop	{r4, r5, pc}
   d6de4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6de8:	4140      	adcs	r0, r0
   d6dea:	eb41 0101 	adc.w	r1, r1, r1
   d6dee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6df2:	f1a4 0401 	sub.w	r4, r4, #1
   d6df6:	d1e9      	bne.n	d6dcc <__adddf3+0x10c>
   d6df8:	f091 0f00 	teq	r1, #0
   d6dfc:	bf04      	itt	eq
   d6dfe:	4601      	moveq	r1, r0
   d6e00:	2000      	moveq	r0, #0
   d6e02:	fab1 f381 	clz	r3, r1
   d6e06:	bf08      	it	eq
   d6e08:	3320      	addeq	r3, #32
   d6e0a:	f1a3 030b 	sub.w	r3, r3, #11
   d6e0e:	f1b3 0220 	subs.w	r2, r3, #32
   d6e12:	da0c      	bge.n	d6e2e <__adddf3+0x16e>
   d6e14:	320c      	adds	r2, #12
   d6e16:	dd08      	ble.n	d6e2a <__adddf3+0x16a>
   d6e18:	f102 0c14 	add.w	ip, r2, #20
   d6e1c:	f1c2 020c 	rsb	r2, r2, #12
   d6e20:	fa01 f00c 	lsl.w	r0, r1, ip
   d6e24:	fa21 f102 	lsr.w	r1, r1, r2
   d6e28:	e00c      	b.n	d6e44 <__adddf3+0x184>
   d6e2a:	f102 0214 	add.w	r2, r2, #20
   d6e2e:	bfd8      	it	le
   d6e30:	f1c2 0c20 	rsble	ip, r2, #32
   d6e34:	fa01 f102 	lsl.w	r1, r1, r2
   d6e38:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6e3c:	bfdc      	itt	le
   d6e3e:	ea41 010c 	orrle.w	r1, r1, ip
   d6e42:	4090      	lslle	r0, r2
   d6e44:	1ae4      	subs	r4, r4, r3
   d6e46:	bfa2      	ittt	ge
   d6e48:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6e4c:	4329      	orrge	r1, r5
   d6e4e:	bd30      	popge	{r4, r5, pc}
   d6e50:	ea6f 0404 	mvn.w	r4, r4
   d6e54:	3c1f      	subs	r4, #31
   d6e56:	da1c      	bge.n	d6e92 <__adddf3+0x1d2>
   d6e58:	340c      	adds	r4, #12
   d6e5a:	dc0e      	bgt.n	d6e7a <__adddf3+0x1ba>
   d6e5c:	f104 0414 	add.w	r4, r4, #20
   d6e60:	f1c4 0220 	rsb	r2, r4, #32
   d6e64:	fa20 f004 	lsr.w	r0, r0, r4
   d6e68:	fa01 f302 	lsl.w	r3, r1, r2
   d6e6c:	ea40 0003 	orr.w	r0, r0, r3
   d6e70:	fa21 f304 	lsr.w	r3, r1, r4
   d6e74:	ea45 0103 	orr.w	r1, r5, r3
   d6e78:	bd30      	pop	{r4, r5, pc}
   d6e7a:	f1c4 040c 	rsb	r4, r4, #12
   d6e7e:	f1c4 0220 	rsb	r2, r4, #32
   d6e82:	fa20 f002 	lsr.w	r0, r0, r2
   d6e86:	fa01 f304 	lsl.w	r3, r1, r4
   d6e8a:	ea40 0003 	orr.w	r0, r0, r3
   d6e8e:	4629      	mov	r1, r5
   d6e90:	bd30      	pop	{r4, r5, pc}
   d6e92:	fa21 f004 	lsr.w	r0, r1, r4
   d6e96:	4629      	mov	r1, r5
   d6e98:	bd30      	pop	{r4, r5, pc}
   d6e9a:	f094 0f00 	teq	r4, #0
   d6e9e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6ea2:	bf06      	itte	eq
   d6ea4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6ea8:	3401      	addeq	r4, #1
   d6eaa:	3d01      	subne	r5, #1
   d6eac:	e74e      	b.n	d6d4c <__adddf3+0x8c>
   d6eae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6eb2:	bf18      	it	ne
   d6eb4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6eb8:	d029      	beq.n	d6f0e <__adddf3+0x24e>
   d6eba:	ea94 0f05 	teq	r4, r5
   d6ebe:	bf08      	it	eq
   d6ec0:	ea90 0f02 	teqeq	r0, r2
   d6ec4:	d005      	beq.n	d6ed2 <__adddf3+0x212>
   d6ec6:	ea54 0c00 	orrs.w	ip, r4, r0
   d6eca:	bf04      	itt	eq
   d6ecc:	4619      	moveq	r1, r3
   d6ece:	4610      	moveq	r0, r2
   d6ed0:	bd30      	pop	{r4, r5, pc}
   d6ed2:	ea91 0f03 	teq	r1, r3
   d6ed6:	bf1e      	ittt	ne
   d6ed8:	2100      	movne	r1, #0
   d6eda:	2000      	movne	r0, #0
   d6edc:	bd30      	popne	{r4, r5, pc}
   d6ede:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6ee2:	d105      	bne.n	d6ef0 <__adddf3+0x230>
   d6ee4:	0040      	lsls	r0, r0, #1
   d6ee6:	4149      	adcs	r1, r1
   d6ee8:	bf28      	it	cs
   d6eea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6eee:	bd30      	pop	{r4, r5, pc}
   d6ef0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6ef4:	bf3c      	itt	cc
   d6ef6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6efa:	bd30      	popcc	{r4, r5, pc}
   d6efc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6f00:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6f04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6f08:	f04f 0000 	mov.w	r0, #0
   d6f0c:	bd30      	pop	{r4, r5, pc}
   d6f0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6f12:	bf1a      	itte	ne
   d6f14:	4619      	movne	r1, r3
   d6f16:	4610      	movne	r0, r2
   d6f18:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6f1c:	bf1c      	itt	ne
   d6f1e:	460b      	movne	r3, r1
   d6f20:	4602      	movne	r2, r0
   d6f22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6f26:	bf06      	itte	eq
   d6f28:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6f2c:	ea91 0f03 	teqeq	r1, r3
   d6f30:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6f34:	bd30      	pop	{r4, r5, pc}
   d6f36:	bf00      	nop

000d6f38 <__aeabi_ui2d>:
   d6f38:	f090 0f00 	teq	r0, #0
   d6f3c:	bf04      	itt	eq
   d6f3e:	2100      	moveq	r1, #0
   d6f40:	4770      	bxeq	lr
   d6f42:	b530      	push	{r4, r5, lr}
   d6f44:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6f48:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6f4c:	f04f 0500 	mov.w	r5, #0
   d6f50:	f04f 0100 	mov.w	r1, #0
   d6f54:	e750      	b.n	d6df8 <__adddf3+0x138>
   d6f56:	bf00      	nop

000d6f58 <__aeabi_i2d>:
   d6f58:	f090 0f00 	teq	r0, #0
   d6f5c:	bf04      	itt	eq
   d6f5e:	2100      	moveq	r1, #0
   d6f60:	4770      	bxeq	lr
   d6f62:	b530      	push	{r4, r5, lr}
   d6f64:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6f68:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6f6c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6f70:	bf48      	it	mi
   d6f72:	4240      	negmi	r0, r0
   d6f74:	f04f 0100 	mov.w	r1, #0
   d6f78:	e73e      	b.n	d6df8 <__adddf3+0x138>
   d6f7a:	bf00      	nop

000d6f7c <__aeabi_f2d>:
   d6f7c:	0042      	lsls	r2, r0, #1
   d6f7e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6f82:	ea4f 0131 	mov.w	r1, r1, rrx
   d6f86:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6f8a:	bf1f      	itttt	ne
   d6f8c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6f90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6f94:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6f98:	4770      	bxne	lr
   d6f9a:	f092 0f00 	teq	r2, #0
   d6f9e:	bf14      	ite	ne
   d6fa0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6fa4:	4770      	bxeq	lr
   d6fa6:	b530      	push	{r4, r5, lr}
   d6fa8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6fac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6fb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6fb4:	e720      	b.n	d6df8 <__adddf3+0x138>
   d6fb6:	bf00      	nop

000d6fb8 <__aeabi_ul2d>:
   d6fb8:	ea50 0201 	orrs.w	r2, r0, r1
   d6fbc:	bf08      	it	eq
   d6fbe:	4770      	bxeq	lr
   d6fc0:	b530      	push	{r4, r5, lr}
   d6fc2:	f04f 0500 	mov.w	r5, #0
   d6fc6:	e00a      	b.n	d6fde <__aeabi_l2d+0x16>

000d6fc8 <__aeabi_l2d>:
   d6fc8:	ea50 0201 	orrs.w	r2, r0, r1
   d6fcc:	bf08      	it	eq
   d6fce:	4770      	bxeq	lr
   d6fd0:	b530      	push	{r4, r5, lr}
   d6fd2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6fd6:	d502      	bpl.n	d6fde <__aeabi_l2d+0x16>
   d6fd8:	4240      	negs	r0, r0
   d6fda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6fde:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6fe2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6fe6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6fea:	f43f aedc 	beq.w	d6da6 <__adddf3+0xe6>
   d6fee:	f04f 0203 	mov.w	r2, #3
   d6ff2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6ff6:	bf18      	it	ne
   d6ff8:	3203      	addne	r2, #3
   d6ffa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6ffe:	bf18      	it	ne
   d7000:	3203      	addne	r2, #3
   d7002:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7006:	f1c2 0320 	rsb	r3, r2, #32
   d700a:	fa00 fc03 	lsl.w	ip, r0, r3
   d700e:	fa20 f002 	lsr.w	r0, r0, r2
   d7012:	fa01 fe03 	lsl.w	lr, r1, r3
   d7016:	ea40 000e 	orr.w	r0, r0, lr
   d701a:	fa21 f102 	lsr.w	r1, r1, r2
   d701e:	4414      	add	r4, r2
   d7020:	e6c1      	b.n	d6da6 <__adddf3+0xe6>
   d7022:	bf00      	nop

000d7024 <__aeabi_dmul>:
   d7024:	b570      	push	{r4, r5, r6, lr}
   d7026:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d702a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d702e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7032:	bf1d      	ittte	ne
   d7034:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7038:	ea94 0f0c 	teqne	r4, ip
   d703c:	ea95 0f0c 	teqne	r5, ip
   d7040:	f000 f8de 	bleq	d7200 <__aeabi_dmul+0x1dc>
   d7044:	442c      	add	r4, r5
   d7046:	ea81 0603 	eor.w	r6, r1, r3
   d704a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d704e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7052:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7056:	bf18      	it	ne
   d7058:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d705c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7060:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7064:	d038      	beq.n	d70d8 <__aeabi_dmul+0xb4>
   d7066:	fba0 ce02 	umull	ip, lr, r0, r2
   d706a:	f04f 0500 	mov.w	r5, #0
   d706e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7072:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7076:	fbe0 e503 	umlal	lr, r5, r0, r3
   d707a:	f04f 0600 	mov.w	r6, #0
   d707e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7082:	f09c 0f00 	teq	ip, #0
   d7086:	bf18      	it	ne
   d7088:	f04e 0e01 	orrne.w	lr, lr, #1
   d708c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7090:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7094:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7098:	d204      	bcs.n	d70a4 <__aeabi_dmul+0x80>
   d709a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d709e:	416d      	adcs	r5, r5
   d70a0:	eb46 0606 	adc.w	r6, r6, r6
   d70a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d70a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d70ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d70b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d70b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d70b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d70bc:	bf88      	it	hi
   d70be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d70c2:	d81e      	bhi.n	d7102 <__aeabi_dmul+0xde>
   d70c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d70c8:	bf08      	it	eq
   d70ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d70ce:	f150 0000 	adcs.w	r0, r0, #0
   d70d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d70d6:	bd70      	pop	{r4, r5, r6, pc}
   d70d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d70dc:	ea46 0101 	orr.w	r1, r6, r1
   d70e0:	ea40 0002 	orr.w	r0, r0, r2
   d70e4:	ea81 0103 	eor.w	r1, r1, r3
   d70e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d70ec:	bfc2      	ittt	gt
   d70ee:	ebd4 050c 	rsbsgt	r5, r4, ip
   d70f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d70f6:	bd70      	popgt	{r4, r5, r6, pc}
   d70f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d70fc:	f04f 0e00 	mov.w	lr, #0
   d7100:	3c01      	subs	r4, #1
   d7102:	f300 80ab 	bgt.w	d725c <__aeabi_dmul+0x238>
   d7106:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d710a:	bfde      	ittt	le
   d710c:	2000      	movle	r0, #0
   d710e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7112:	bd70      	pople	{r4, r5, r6, pc}
   d7114:	f1c4 0400 	rsb	r4, r4, #0
   d7118:	3c20      	subs	r4, #32
   d711a:	da35      	bge.n	d7188 <__aeabi_dmul+0x164>
   d711c:	340c      	adds	r4, #12
   d711e:	dc1b      	bgt.n	d7158 <__aeabi_dmul+0x134>
   d7120:	f104 0414 	add.w	r4, r4, #20
   d7124:	f1c4 0520 	rsb	r5, r4, #32
   d7128:	fa00 f305 	lsl.w	r3, r0, r5
   d712c:	fa20 f004 	lsr.w	r0, r0, r4
   d7130:	fa01 f205 	lsl.w	r2, r1, r5
   d7134:	ea40 0002 	orr.w	r0, r0, r2
   d7138:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d713c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7140:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7144:	fa21 f604 	lsr.w	r6, r1, r4
   d7148:	eb42 0106 	adc.w	r1, r2, r6
   d714c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7150:	bf08      	it	eq
   d7152:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7156:	bd70      	pop	{r4, r5, r6, pc}
   d7158:	f1c4 040c 	rsb	r4, r4, #12
   d715c:	f1c4 0520 	rsb	r5, r4, #32
   d7160:	fa00 f304 	lsl.w	r3, r0, r4
   d7164:	fa20 f005 	lsr.w	r0, r0, r5
   d7168:	fa01 f204 	lsl.w	r2, r1, r4
   d716c:	ea40 0002 	orr.w	r0, r0, r2
   d7170:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7174:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7178:	f141 0100 	adc.w	r1, r1, #0
   d717c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7180:	bf08      	it	eq
   d7182:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7186:	bd70      	pop	{r4, r5, r6, pc}
   d7188:	f1c4 0520 	rsb	r5, r4, #32
   d718c:	fa00 f205 	lsl.w	r2, r0, r5
   d7190:	ea4e 0e02 	orr.w	lr, lr, r2
   d7194:	fa20 f304 	lsr.w	r3, r0, r4
   d7198:	fa01 f205 	lsl.w	r2, r1, r5
   d719c:	ea43 0302 	orr.w	r3, r3, r2
   d71a0:	fa21 f004 	lsr.w	r0, r1, r4
   d71a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d71a8:	fa21 f204 	lsr.w	r2, r1, r4
   d71ac:	ea20 0002 	bic.w	r0, r0, r2
   d71b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d71b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d71b8:	bf08      	it	eq
   d71ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d71be:	bd70      	pop	{r4, r5, r6, pc}
   d71c0:	f094 0f00 	teq	r4, #0
   d71c4:	d10f      	bne.n	d71e6 <__aeabi_dmul+0x1c2>
   d71c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d71ca:	0040      	lsls	r0, r0, #1
   d71cc:	eb41 0101 	adc.w	r1, r1, r1
   d71d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d71d4:	bf08      	it	eq
   d71d6:	3c01      	subeq	r4, #1
   d71d8:	d0f7      	beq.n	d71ca <__aeabi_dmul+0x1a6>
   d71da:	ea41 0106 	orr.w	r1, r1, r6
   d71de:	f095 0f00 	teq	r5, #0
   d71e2:	bf18      	it	ne
   d71e4:	4770      	bxne	lr
   d71e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d71ea:	0052      	lsls	r2, r2, #1
   d71ec:	eb43 0303 	adc.w	r3, r3, r3
   d71f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d71f4:	bf08      	it	eq
   d71f6:	3d01      	subeq	r5, #1
   d71f8:	d0f7      	beq.n	d71ea <__aeabi_dmul+0x1c6>
   d71fa:	ea43 0306 	orr.w	r3, r3, r6
   d71fe:	4770      	bx	lr
   d7200:	ea94 0f0c 	teq	r4, ip
   d7204:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7208:	bf18      	it	ne
   d720a:	ea95 0f0c 	teqne	r5, ip
   d720e:	d00c      	beq.n	d722a <__aeabi_dmul+0x206>
   d7210:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7214:	bf18      	it	ne
   d7216:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d721a:	d1d1      	bne.n	d71c0 <__aeabi_dmul+0x19c>
   d721c:	ea81 0103 	eor.w	r1, r1, r3
   d7220:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7224:	f04f 0000 	mov.w	r0, #0
   d7228:	bd70      	pop	{r4, r5, r6, pc}
   d722a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d722e:	bf06      	itte	eq
   d7230:	4610      	moveq	r0, r2
   d7232:	4619      	moveq	r1, r3
   d7234:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7238:	d019      	beq.n	d726e <__aeabi_dmul+0x24a>
   d723a:	ea94 0f0c 	teq	r4, ip
   d723e:	d102      	bne.n	d7246 <__aeabi_dmul+0x222>
   d7240:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7244:	d113      	bne.n	d726e <__aeabi_dmul+0x24a>
   d7246:	ea95 0f0c 	teq	r5, ip
   d724a:	d105      	bne.n	d7258 <__aeabi_dmul+0x234>
   d724c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7250:	bf1c      	itt	ne
   d7252:	4610      	movne	r0, r2
   d7254:	4619      	movne	r1, r3
   d7256:	d10a      	bne.n	d726e <__aeabi_dmul+0x24a>
   d7258:	ea81 0103 	eor.w	r1, r1, r3
   d725c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7260:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7264:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7268:	f04f 0000 	mov.w	r0, #0
   d726c:	bd70      	pop	{r4, r5, r6, pc}
   d726e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7272:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7276:	bd70      	pop	{r4, r5, r6, pc}

000d7278 <__aeabi_ddiv>:
   d7278:	b570      	push	{r4, r5, r6, lr}
   d727a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d727e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7282:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7286:	bf1d      	ittte	ne
   d7288:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d728c:	ea94 0f0c 	teqne	r4, ip
   d7290:	ea95 0f0c 	teqne	r5, ip
   d7294:	f000 f8a7 	bleq	d73e6 <__aeabi_ddiv+0x16e>
   d7298:	eba4 0405 	sub.w	r4, r4, r5
   d729c:	ea81 0e03 	eor.w	lr, r1, r3
   d72a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d72a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d72a8:	f000 8088 	beq.w	d73bc <__aeabi_ddiv+0x144>
   d72ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d72b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d72b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d72b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d72bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d72c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d72c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d72c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d72cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d72d0:	429d      	cmp	r5, r3
   d72d2:	bf08      	it	eq
   d72d4:	4296      	cmpeq	r6, r2
   d72d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d72da:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d72de:	d202      	bcs.n	d72e6 <__aeabi_ddiv+0x6e>
   d72e0:	085b      	lsrs	r3, r3, #1
   d72e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d72e6:	1ab6      	subs	r6, r6, r2
   d72e8:	eb65 0503 	sbc.w	r5, r5, r3
   d72ec:	085b      	lsrs	r3, r3, #1
   d72ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d72f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d72f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d72fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d72fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7302:	bf22      	ittt	cs
   d7304:	1ab6      	subcs	r6, r6, r2
   d7306:	4675      	movcs	r5, lr
   d7308:	ea40 000c 	orrcs.w	r0, r0, ip
   d730c:	085b      	lsrs	r3, r3, #1
   d730e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7312:	ebb6 0e02 	subs.w	lr, r6, r2
   d7316:	eb75 0e03 	sbcs.w	lr, r5, r3
   d731a:	bf22      	ittt	cs
   d731c:	1ab6      	subcs	r6, r6, r2
   d731e:	4675      	movcs	r5, lr
   d7320:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7324:	085b      	lsrs	r3, r3, #1
   d7326:	ea4f 0232 	mov.w	r2, r2, rrx
   d732a:	ebb6 0e02 	subs.w	lr, r6, r2
   d732e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7332:	bf22      	ittt	cs
   d7334:	1ab6      	subcs	r6, r6, r2
   d7336:	4675      	movcs	r5, lr
   d7338:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d733c:	085b      	lsrs	r3, r3, #1
   d733e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7342:	ebb6 0e02 	subs.w	lr, r6, r2
   d7346:	eb75 0e03 	sbcs.w	lr, r5, r3
   d734a:	bf22      	ittt	cs
   d734c:	1ab6      	subcs	r6, r6, r2
   d734e:	4675      	movcs	r5, lr
   d7350:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7354:	ea55 0e06 	orrs.w	lr, r5, r6
   d7358:	d018      	beq.n	d738c <__aeabi_ddiv+0x114>
   d735a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d735e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7362:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7366:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d736a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d736e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7372:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7376:	d1c0      	bne.n	d72fa <__aeabi_ddiv+0x82>
   d7378:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d737c:	d10b      	bne.n	d7396 <__aeabi_ddiv+0x11e>
   d737e:	ea41 0100 	orr.w	r1, r1, r0
   d7382:	f04f 0000 	mov.w	r0, #0
   d7386:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d738a:	e7b6      	b.n	d72fa <__aeabi_ddiv+0x82>
   d738c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7390:	bf04      	itt	eq
   d7392:	4301      	orreq	r1, r0
   d7394:	2000      	moveq	r0, #0
   d7396:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d739a:	bf88      	it	hi
   d739c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d73a0:	f63f aeaf 	bhi.w	d7102 <__aeabi_dmul+0xde>
   d73a4:	ebb5 0c03 	subs.w	ip, r5, r3
   d73a8:	bf04      	itt	eq
   d73aa:	ebb6 0c02 	subseq.w	ip, r6, r2
   d73ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d73b2:	f150 0000 	adcs.w	r0, r0, #0
   d73b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d73ba:	bd70      	pop	{r4, r5, r6, pc}
   d73bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d73c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d73c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d73c8:	bfc2      	ittt	gt
   d73ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   d73ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d73d2:	bd70      	popgt	{r4, r5, r6, pc}
   d73d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d73d8:	f04f 0e00 	mov.w	lr, #0
   d73dc:	3c01      	subs	r4, #1
   d73de:	e690      	b.n	d7102 <__aeabi_dmul+0xde>
   d73e0:	ea45 0e06 	orr.w	lr, r5, r6
   d73e4:	e68d      	b.n	d7102 <__aeabi_dmul+0xde>
   d73e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d73ea:	ea94 0f0c 	teq	r4, ip
   d73ee:	bf08      	it	eq
   d73f0:	ea95 0f0c 	teqeq	r5, ip
   d73f4:	f43f af3b 	beq.w	d726e <__aeabi_dmul+0x24a>
   d73f8:	ea94 0f0c 	teq	r4, ip
   d73fc:	d10a      	bne.n	d7414 <__aeabi_ddiv+0x19c>
   d73fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7402:	f47f af34 	bne.w	d726e <__aeabi_dmul+0x24a>
   d7406:	ea95 0f0c 	teq	r5, ip
   d740a:	f47f af25 	bne.w	d7258 <__aeabi_dmul+0x234>
   d740e:	4610      	mov	r0, r2
   d7410:	4619      	mov	r1, r3
   d7412:	e72c      	b.n	d726e <__aeabi_dmul+0x24a>
   d7414:	ea95 0f0c 	teq	r5, ip
   d7418:	d106      	bne.n	d7428 <__aeabi_ddiv+0x1b0>
   d741a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d741e:	f43f aefd 	beq.w	d721c <__aeabi_dmul+0x1f8>
   d7422:	4610      	mov	r0, r2
   d7424:	4619      	mov	r1, r3
   d7426:	e722      	b.n	d726e <__aeabi_dmul+0x24a>
   d7428:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d742c:	bf18      	it	ne
   d742e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7432:	f47f aec5 	bne.w	d71c0 <__aeabi_dmul+0x19c>
   d7436:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d743a:	f47f af0d 	bne.w	d7258 <__aeabi_dmul+0x234>
   d743e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7442:	f47f aeeb 	bne.w	d721c <__aeabi_dmul+0x1f8>
   d7446:	e712      	b.n	d726e <__aeabi_dmul+0x24a>

000d7448 <__gedf2>:
   d7448:	f04f 3cff 	mov.w	ip, #4294967295
   d744c:	e006      	b.n	d745c <__cmpdf2+0x4>
   d744e:	bf00      	nop

000d7450 <__ledf2>:
   d7450:	f04f 0c01 	mov.w	ip, #1
   d7454:	e002      	b.n	d745c <__cmpdf2+0x4>
   d7456:	bf00      	nop

000d7458 <__cmpdf2>:
   d7458:	f04f 0c01 	mov.w	ip, #1
   d745c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7460:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7464:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7468:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d746c:	bf18      	it	ne
   d746e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7472:	d01b      	beq.n	d74ac <__cmpdf2+0x54>
   d7474:	b001      	add	sp, #4
   d7476:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d747a:	bf0c      	ite	eq
   d747c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7480:	ea91 0f03 	teqne	r1, r3
   d7484:	bf02      	ittt	eq
   d7486:	ea90 0f02 	teqeq	r0, r2
   d748a:	2000      	moveq	r0, #0
   d748c:	4770      	bxeq	lr
   d748e:	f110 0f00 	cmn.w	r0, #0
   d7492:	ea91 0f03 	teq	r1, r3
   d7496:	bf58      	it	pl
   d7498:	4299      	cmppl	r1, r3
   d749a:	bf08      	it	eq
   d749c:	4290      	cmpeq	r0, r2
   d749e:	bf2c      	ite	cs
   d74a0:	17d8      	asrcs	r0, r3, #31
   d74a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d74a6:	f040 0001 	orr.w	r0, r0, #1
   d74aa:	4770      	bx	lr
   d74ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d74b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d74b4:	d102      	bne.n	d74bc <__cmpdf2+0x64>
   d74b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d74ba:	d107      	bne.n	d74cc <__cmpdf2+0x74>
   d74bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d74c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d74c4:	d1d6      	bne.n	d7474 <__cmpdf2+0x1c>
   d74c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d74ca:	d0d3      	beq.n	d7474 <__cmpdf2+0x1c>
   d74cc:	f85d 0b04 	ldr.w	r0, [sp], #4
   d74d0:	4770      	bx	lr
   d74d2:	bf00      	nop

000d74d4 <__aeabi_cdrcmple>:
   d74d4:	4684      	mov	ip, r0
   d74d6:	4610      	mov	r0, r2
   d74d8:	4662      	mov	r2, ip
   d74da:	468c      	mov	ip, r1
   d74dc:	4619      	mov	r1, r3
   d74de:	4663      	mov	r3, ip
   d74e0:	e000      	b.n	d74e4 <__aeabi_cdcmpeq>
   d74e2:	bf00      	nop

000d74e4 <__aeabi_cdcmpeq>:
   d74e4:	b501      	push	{r0, lr}
   d74e6:	f7ff ffb7 	bl	d7458 <__cmpdf2>
   d74ea:	2800      	cmp	r0, #0
   d74ec:	bf48      	it	mi
   d74ee:	f110 0f00 	cmnmi.w	r0, #0
   d74f2:	bd01      	pop	{r0, pc}

000d74f4 <__aeabi_dcmpeq>:
   d74f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d74f8:	f7ff fff4 	bl	d74e4 <__aeabi_cdcmpeq>
   d74fc:	bf0c      	ite	eq
   d74fe:	2001      	moveq	r0, #1
   d7500:	2000      	movne	r0, #0
   d7502:	f85d fb08 	ldr.w	pc, [sp], #8
   d7506:	bf00      	nop

000d7508 <__aeabi_dcmplt>:
   d7508:	f84d ed08 	str.w	lr, [sp, #-8]!
   d750c:	f7ff ffea 	bl	d74e4 <__aeabi_cdcmpeq>
   d7510:	bf34      	ite	cc
   d7512:	2001      	movcc	r0, #1
   d7514:	2000      	movcs	r0, #0
   d7516:	f85d fb08 	ldr.w	pc, [sp], #8
   d751a:	bf00      	nop

000d751c <__aeabi_dcmple>:
   d751c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7520:	f7ff ffe0 	bl	d74e4 <__aeabi_cdcmpeq>
   d7524:	bf94      	ite	ls
   d7526:	2001      	movls	r0, #1
   d7528:	2000      	movhi	r0, #0
   d752a:	f85d fb08 	ldr.w	pc, [sp], #8
   d752e:	bf00      	nop

000d7530 <__aeabi_dcmpge>:
   d7530:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7534:	f7ff ffce 	bl	d74d4 <__aeabi_cdrcmple>
   d7538:	bf94      	ite	ls
   d753a:	2001      	movls	r0, #1
   d753c:	2000      	movhi	r0, #0
   d753e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7542:	bf00      	nop

000d7544 <__aeabi_dcmpgt>:
   d7544:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7548:	f7ff ffc4 	bl	d74d4 <__aeabi_cdrcmple>
   d754c:	bf34      	ite	cc
   d754e:	2001      	movcc	r0, #1
   d7550:	2000      	movcs	r0, #0
   d7552:	f85d fb08 	ldr.w	pc, [sp], #8
   d7556:	bf00      	nop

000d7558 <__aeabi_dcmpun>:
   d7558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d755c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7560:	d102      	bne.n	d7568 <__aeabi_dcmpun+0x10>
   d7562:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7566:	d10a      	bne.n	d757e <__aeabi_dcmpun+0x26>
   d7568:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d756c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7570:	d102      	bne.n	d7578 <__aeabi_dcmpun+0x20>
   d7572:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7576:	d102      	bne.n	d757e <__aeabi_dcmpun+0x26>
   d7578:	f04f 0000 	mov.w	r0, #0
   d757c:	4770      	bx	lr
   d757e:	f04f 0001 	mov.w	r0, #1
   d7582:	4770      	bx	lr

000d7584 <__aeabi_d2iz>:
   d7584:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7588:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d758c:	d215      	bcs.n	d75ba <__aeabi_d2iz+0x36>
   d758e:	d511      	bpl.n	d75b4 <__aeabi_d2iz+0x30>
   d7590:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7594:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7598:	d912      	bls.n	d75c0 <__aeabi_d2iz+0x3c>
   d759a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d759e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d75a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d75a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d75aa:	fa23 f002 	lsr.w	r0, r3, r2
   d75ae:	bf18      	it	ne
   d75b0:	4240      	negne	r0, r0
   d75b2:	4770      	bx	lr
   d75b4:	f04f 0000 	mov.w	r0, #0
   d75b8:	4770      	bx	lr
   d75ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d75be:	d105      	bne.n	d75cc <__aeabi_d2iz+0x48>
   d75c0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d75c4:	bf08      	it	eq
   d75c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d75ca:	4770      	bx	lr
   d75cc:	f04f 0000 	mov.w	r0, #0
   d75d0:	4770      	bx	lr
   d75d2:	bf00      	nop

000d75d4 <__aeabi_d2f>:
   d75d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d75d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d75dc:	bf24      	itt	cs
   d75de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d75e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d75e6:	d90d      	bls.n	d7604 <__aeabi_d2f+0x30>
   d75e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d75ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d75f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d75f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d75f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d75fc:	bf08      	it	eq
   d75fe:	f020 0001 	biceq.w	r0, r0, #1
   d7602:	4770      	bx	lr
   d7604:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7608:	d121      	bne.n	d764e <__aeabi_d2f+0x7a>
   d760a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d760e:	bfbc      	itt	lt
   d7610:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7614:	4770      	bxlt	lr
   d7616:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d761a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d761e:	f1c2 0218 	rsb	r2, r2, #24
   d7622:	f1c2 0c20 	rsb	ip, r2, #32
   d7626:	fa10 f30c 	lsls.w	r3, r0, ip
   d762a:	fa20 f002 	lsr.w	r0, r0, r2
   d762e:	bf18      	it	ne
   d7630:	f040 0001 	orrne.w	r0, r0, #1
   d7634:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7638:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d763c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7640:	ea40 000c 	orr.w	r0, r0, ip
   d7644:	fa23 f302 	lsr.w	r3, r3, r2
   d7648:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d764c:	e7cc      	b.n	d75e8 <__aeabi_d2f+0x14>
   d764e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7652:	d107      	bne.n	d7664 <__aeabi_d2f+0x90>
   d7654:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7658:	bf1e      	ittt	ne
   d765a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d765e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7662:	4770      	bxne	lr
   d7664:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7668:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d766c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7670:	4770      	bx	lr
   d7672:	bf00      	nop

000d7674 <__cxa_atexit>:
   d7674:	b510      	push	{r4, lr}
   d7676:	4c05      	ldr	r4, [pc, #20]	; (d768c <__cxa_atexit+0x18>)
   d7678:	4613      	mov	r3, r2
   d767a:	b12c      	cbz	r4, d7688 <__cxa_atexit+0x14>
   d767c:	460a      	mov	r2, r1
   d767e:	4601      	mov	r1, r0
   d7680:	2002      	movs	r0, #2
   d7682:	f3af 8000 	nop.w
   d7686:	bd10      	pop	{r4, pc}
   d7688:	4620      	mov	r0, r4
   d768a:	bd10      	pop	{r4, pc}
   d768c:	00000000 	.word	0x00000000

000d7690 <memcpy>:
   d7690:	b510      	push	{r4, lr}
   d7692:	1e43      	subs	r3, r0, #1
   d7694:	440a      	add	r2, r1
   d7696:	4291      	cmp	r1, r2
   d7698:	d004      	beq.n	d76a4 <memcpy+0x14>
   d769a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d769e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d76a2:	e7f8      	b.n	d7696 <memcpy+0x6>
   d76a4:	bd10      	pop	{r4, pc}

000d76a6 <memset>:
   d76a6:	4402      	add	r2, r0
   d76a8:	4603      	mov	r3, r0
   d76aa:	4293      	cmp	r3, r2
   d76ac:	d002      	beq.n	d76b4 <memset+0xe>
   d76ae:	f803 1b01 	strb.w	r1, [r3], #1
   d76b2:	e7fa      	b.n	d76aa <memset+0x4>
   d76b4:	4770      	bx	lr
	...

000d76b8 <srand>:
   d76b8:	b538      	push	{r3, r4, r5, lr}
   d76ba:	4b12      	ldr	r3, [pc, #72]	; (d7704 <srand+0x4c>)
   d76bc:	681c      	ldr	r4, [r3, #0]
   d76be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d76c0:	4605      	mov	r5, r0
   d76c2:	b9d3      	cbnz	r3, d76fa <srand+0x42>
   d76c4:	2018      	movs	r0, #24
   d76c6:	f7fd fb79 	bl	d4dbc <malloc>
   d76ca:	f243 330e 	movw	r3, #13070	; 0x330e
   d76ce:	63a0      	str	r0, [r4, #56]	; 0x38
   d76d0:	8003      	strh	r3, [r0, #0]
   d76d2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d76d6:	8043      	strh	r3, [r0, #2]
   d76d8:	f241 2334 	movw	r3, #4660	; 0x1234
   d76dc:	8083      	strh	r3, [r0, #4]
   d76de:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d76e2:	80c3      	strh	r3, [r0, #6]
   d76e4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d76e8:	8103      	strh	r3, [r0, #8]
   d76ea:	2305      	movs	r3, #5
   d76ec:	8143      	strh	r3, [r0, #10]
   d76ee:	230b      	movs	r3, #11
   d76f0:	8183      	strh	r3, [r0, #12]
   d76f2:	2201      	movs	r2, #1
   d76f4:	2300      	movs	r3, #0
   d76f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d76fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d76fc:	2200      	movs	r2, #0
   d76fe:	611d      	str	r5, [r3, #16]
   d7700:	615a      	str	r2, [r3, #20]
   d7702:	bd38      	pop	{r3, r4, r5, pc}
   d7704:	2003e1c4 	.word	0x2003e1c4

000d7708 <strcmp>:
   d7708:	f810 2b01 	ldrb.w	r2, [r0], #1
   d770c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7710:	2a01      	cmp	r2, #1
   d7712:	bf28      	it	cs
   d7714:	429a      	cmpcs	r2, r3
   d7716:	d0f7      	beq.n	d7708 <strcmp>
   d7718:	1ad0      	subs	r0, r2, r3
   d771a:	4770      	bx	lr

000d771c <strdup>:
   d771c:	4b02      	ldr	r3, [pc, #8]	; (d7728 <strdup+0xc>)
   d771e:	4601      	mov	r1, r0
   d7720:	6818      	ldr	r0, [r3, #0]
   d7722:	f000 b803 	b.w	d772c <_strdup_r>
   d7726:	bf00      	nop
   d7728:	2003e1c4 	.word	0x2003e1c4

000d772c <_strdup_r>:
   d772c:	b570      	push	{r4, r5, r6, lr}
   d772e:	4606      	mov	r6, r0
   d7730:	4608      	mov	r0, r1
   d7732:	460c      	mov	r4, r1
   d7734:	f000 f80d 	bl	d7752 <strlen>
   d7738:	1c45      	adds	r5, r0, #1
   d773a:	4629      	mov	r1, r5
   d773c:	4630      	mov	r0, r6
   d773e:	f7fd fb6d 	bl	d4e1c <_malloc_r>
   d7742:	4606      	mov	r6, r0
   d7744:	b118      	cbz	r0, d774e <_strdup_r+0x22>
   d7746:	462a      	mov	r2, r5
   d7748:	4621      	mov	r1, r4
   d774a:	f7ff ffa1 	bl	d7690 <memcpy>
   d774e:	4630      	mov	r0, r6
   d7750:	bd70      	pop	{r4, r5, r6, pc}

000d7752 <strlen>:
   d7752:	4603      	mov	r3, r0
   d7754:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7758:	2a00      	cmp	r2, #0
   d775a:	d1fb      	bne.n	d7754 <strlen+0x2>
   d775c:	1a18      	subs	r0, r3, r0
   d775e:	3801      	subs	r0, #1
   d7760:	4770      	bx	lr

000d7762 <link_code_end>:
	...

000d7764 <dynalib_user>:
   d7764:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7774:	0000 0000                                   ....

000d7778 <_ZL18accelCalibration_1>:
   d7778:	a414 3c06 3d28 3e92 3a77 3e24               ...<(=.>w:$>

000d7784 <_ZL17gyroCalibration_1>:
   d7784:	5fea 4059 cab9 3e5f c748 bf91 6e6f 6f00     ._Y@.._>H...on.o
   d7794:	6666 5400 6172 736e 696d 7373 6f69 206e     ff.Transmission 
   d77a4:	6562 6967 2e6e 2e2e 7700 6972 6974 676e     begin....writing
   d77b4:	2d20 2520 2064 7573 4162 6464 6572 7373      - %d subAddress
   d77c4:	7700 6972 6974 676e 2d20 2520 2064 6164     .writing - %d da
   d77d4:	6174 5400 6172 736e 696d 7373 6f69 206e     ta.Transmission 
   d77e4:	7573 6363 7365 6673 6c75 0021 7254 6e61     successful!.Tran
   d77f4:	6d73 7369 6973 6e6f 6620 6961 656c 2e64     smission failed.
   d7804:	4100 2073 6957 6572 652e 646e 7254 6e61     .As Wire.endTran
   d7814:	6d73 7369 6973 6e6f 7220 7465 7275 736e     smission returns
   d7824:	6120 6e20 6e6f 7a2d 7265 206f 6176 756c      a non-zero valu
   d7834:	2065 2e69 2e65 202c 6425 6300 6e6f 6174     e i.e., %d.conta
   d7844:	6e69 7265 6557 6769 7468 5300 7274 6e69     inerWeight.Strin
   d7854:	5767 6965 6867 0074 7564 706d 7473 7265     gWeight.dumpster
   d7864:	6c2d 616f 6964 676e 6c00 6465 2500 0066     -loading.led.%f.
   d7874:	6e61 6c67 5865 6100 676e 656c 0059 6e61     angleX.angleY.an
   d7884:	6c67 5a65 0000 0000                         gleZ....

000d788c <_ZTVN5spark13EthernetClassE>:
	...
   d7894:	4e9b 000d 4e91 000d 4e87 000d 4e7d 000d     .N...N...N..}N..
   d78a4:	4e71 000d 4e65 000d 4e59 000d 4e51 000d     qN..eN..YN..QN..
   d78b4:	4e47 000d 4e3d 000d 5fa9 000d 6162 6475     GN..=N..._..baud
   d78c4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d78d4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d78e4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d78f4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d7904:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d7914:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d7924:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d7934:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d7944:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d7954:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d7964:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d7974:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d7984:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d7994:	696e 0063 6c61 006c 2b25 3330 3a64 3025     nic.all.%+03d:%0
   d79a4:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d79b4:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d79c4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d79cc:	532d 000d 5333 000d 5377 000d 5341 000d     -S..3S..wS..AS..
   d79dc:	532f 000d                                   /S..

000d79e0 <_ZTV9IPAddress>:
	...
   d79e8:	591d 000d 590d 000d 590f 000d               .Y...Y...Y..

000d79f4 <_ZTV9USBSerial>:
	...
   d79fc:	59f5 000d 5a45 000d 5a53 000d 505d 000d     .Y..EZ..SZ..]P..
   d7a0c:	5a31 000d 59f7 000d 5a0d 000d 5a3f 000d     1Z...Y...Z..?Z..
   d7a1c:	5a23 000d 59f1 000d                         #Z...Y..

000d7a24 <_ZTVN5spark13CellularClassE>:
	...
   d7a2c:	5b5f 000d 5b55 000d 5b4b 000d 5b01 000d     _[..U[..K[...[..
   d7a3c:	5b3f 000d 5b33 000d 5b27 000d 5b1f 000d     ?[..3[..'[...[..
   d7a4c:	5b15 000d 5b0b 000d 5fa9 000d               .[...[..._..

000d7a58 <_ZTV11USARTSerial>:
	...
   d7a60:	5b99 000d 5be9 000d 5bf7 000d 505d 000d     .[...[...[..]P..
   d7a70:	5bad 000d 5bcf 000d 5bbb 000d 5be3 000d     .[...[...[...[..
   d7a80:	5b9b 000d 5b9f 000d                         .[...[..

000d7a88 <_ZTV7TwoWire>:
	...
   d7a90:	5cc5 000d 5d0f 000d 5ce7 000d 5cc7 000d     .\...]...\...\..
   d7aa0:	5cef 000d 5cf7 000d 5cff 000d 5d07 000d     .\...\...\...]..

000d7ab0 <_ZTVN5spark9MeshClassE>:
	...
   d7ab8:	5e25 000d 5e1b 000d 5e11 000d 5e07 000d     %^...^...^...^..
   d7ac8:	5dfb 000d 5def 000d 5de3 000d 5ddb 000d     .]...]...]...]..
   d7ad8:	5dd1 000d 5dc7 000d 5fa9 000d               .]...]..._..

000d7ae4 <_ZTVN5spark12NetworkClassE>:
	...
   d7aec:	5f41 000d 5f4b 000d 5f55 000d 5f5f 000d     A_..K_..U_..__..
   d7afc:	5f69 000d 5f75 000d 5f81 000d 5f8d 000d     i_..u_..._..._..
   d7b0c:	5f95 000d 5f9f 000d 5fa9 000d               ._..._..._..

000d7b18 <_ZSt7nothrow>:
   d7b18:	0000 0000 7173 7472 0000 0000 0000 0000     ....sqrt........

000d7b28 <atanlo>:
   d7b28:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   d7b38:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000d7b48 <atanhi>:
   d7b48:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   d7b58:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000d7b68 <__sf_fake_stdin>:
	...

000d7b88 <__sf_fake_stdout>:
	...

000d7ba8 <__sf_fake_stderr>:
	...
   d7bc8:	0043                                        C.

000d7bca <link_const_variable_data_end>:
	...

000d7bcc <link_constructors_location>:
   d7bcc:	000d4961 	.word	0x000d4961
   d7bd0:	000d4ea5 	.word	0x000d4ea5
   d7bd4:	000d4ed5 	.word	0x000d4ed5
   d7bd8:	000d5035 	.word	0x000d5035
   d7bdc:	000d5199 	.word	0x000d5199
   d7be0:	000d51a9 	.word	0x000d51a9
   d7be4:	000d5201 	.word	0x000d5201
   d7be8:	000d5b69 	.word	0x000d5b69
   d7bec:	000d5ef1 	.word	0x000d5ef1
   d7bf0:	000d6075 	.word	0x000d6075
   d7bf4:	000d6241 	.word	0x000d6241
   d7bf8:	000d62c5 	.word	0x000d62c5
   d7bfc:	000d6389 	.word	0x000d6389
   d7c00:	000d644d 	.word	0x000d644d

000d7c04 <link_constructors_end>:
	...
