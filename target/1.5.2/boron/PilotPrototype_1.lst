
c:/Users/adams/OneDrive/Documents/GitHub/ParticleWorkbench/PilotPrototype_1/target/1.5.2/boron/PilotPrototype_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003cb0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7cd0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003dcf4  000d7cd4  0001dcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a90  2003dd60  2003dd60  0002dd60  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7d40  000d7d40  00027d40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7d68  000d7d68  00027d68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d8d5d  00000000  00000000  00027d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001084a  00000000  00000000  00100ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c8cb  00000000  00000000  00111313  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002288  00000000  00000000  0012dbde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004408  00000000  00000000  0012fe66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003517e  00000000  00000000  0013426e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026e01  00000000  00000000  001693ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010854b  00000000  00000000  001901ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c9dc  00000000  00000000  00298738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fb99 	bl	d7768 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fb9e 	bl	d777e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dcf4 	.word	0x2003dcf4
   d404c:	000d7cd4 	.word	0x000d7cd4
   d4050:	2003dd60 	.word	0x2003dd60
   d4054:	2003dd60 	.word	0x2003dd60
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 f9fb 	bl	d5458 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7ccc 	.word	0x000d7ccc
   d4084:	000d7c94 	.word	0x000d7c94

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bc5e 	b.w	d4948 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fae5 	bl	d465c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 b9a1 	b.w	d53dc <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bfdf 	b.w	d505c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bfe5 	b.w	d506c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bfe3 	b.w	d506c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40b6:	b538      	push	{r3, r4, r5, lr}
   d40b8:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40ba:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40bc:	b128      	cbz	r0, d40ca <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40be:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40c0:	210c      	movs	r1, #12
   d40c2:	f002 f93d 	bl	d6340 <_ZdlPvj>
            wakeupSource = next;
   d40c6:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d40c8:	e7f8      	b.n	d40bc <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d40ca:	4620      	mov	r0, r4
   d40cc:	bd38      	pop	{r3, r4, r5, pc}

000d40ce <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ce:	b510      	push	{r4, lr}
   d40d0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40d2:	6800      	ldr	r0, [r0, #0]
   d40d4:	b108      	cbz	r0, d40da <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40d6:	f000 ffc9 	bl	d506c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}

000d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40de:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40e0:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40e4:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e6:	f88d 3000 	strb.w	r3, [sp]
   d40ea:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40ec:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ee:	f001 fb21 	bl	d5734 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d40f2:	4628      	mov	r0, r5
   d40f4:	b003      	add	sp, #12
   d40f6:	bd30      	pop	{r4, r5, pc}

000d40f8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40f8:	6803      	ldr	r3, [r0, #0]
   d40fa:	b2c9      	uxtb	r1, r1
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4718      	bx	r3

000d4100 <_Z12configSensoriii>:
const int sgPinRo1 = A4;        // Strain Gauge pin for analogRead
const int sgNum = 20;           // Number of values to be held in strain gauge buffer of previous readings
int sumSG = 0;                  // Sum of all values in each strain gauge buffer

/*========== Configure MPU-6050 ==========*/
void configSensor(int slaveAddress, int subAddress, int data){
   d4100:	b570      	push	{r4, r5, r6, lr}
   d4102:	4606      	mov	r6, r0
   d4104:	4614      	mov	r4, r2
   d4106:	460d      	mov	r5, r1
    Wire.beginTransmission(slaveAddress);
   d4108:	f002 f8e6 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d410c:	4631      	mov	r1, r6
   d410e:	f001 fee5 	bl	d5edc <_ZN7TwoWire17beginTransmissionEi>
    Serial.print("Transmission begin...");
   d4112:	f001 fd65 	bl	d5be0 <_Z16_fetch_usbserialv>
   d4116:	4929      	ldr	r1, [pc, #164]	; (d41bc <_Z12configSensoriii+0xbc>)
   d4118:	f001 f888 	bl	d522c <_ZN5Print5printEPKc>
    Serial.println("");
   d411c:	f001 fd60 	bl	d5be0 <_Z16_fetch_usbserialv>
   d4120:	4927      	ldr	r1, [pc, #156]	; (d41c0 <_Z12configSensoriii+0xc0>)
   d4122:	f001 f896 	bl	d5252 <_ZN5Print7printlnEPKc>
    Wire.write(subAddress);
   d4126:	f002 f8d7 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d412a:	4629      	mov	r1, r5
   d412c:	f7ff ffe4 	bl	d40f8 <_ZN7TwoWire5writeEi>
    Serial.printf("writing - %d subAddress", subAddress);
   d4130:	f001 fd56 	bl	d5be0 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4134:	462b      	mov	r3, r5
   d4136:	4a23      	ldr	r2, [pc, #140]	; (d41c4 <_Z12configSensoriii+0xc4>)
   d4138:	2100      	movs	r1, #0
   d413a:	f001 f8b4 	bl	d52a6 <_ZN5Print11printf_implEbPKcz>
    Serial.println("");
   d413e:	f001 fd4f 	bl	d5be0 <_Z16_fetch_usbserialv>
   d4142:	491f      	ldr	r1, [pc, #124]	; (d41c0 <_Z12configSensoriii+0xc0>)
   d4144:	f001 f885 	bl	d5252 <_ZN5Print7printlnEPKc>
    Wire.write(data);
   d4148:	f002 f8c6 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d414c:	4621      	mov	r1, r4
   d414e:	f7ff ffd3 	bl	d40f8 <_ZN7TwoWire5writeEi>
    Serial.printf("writing - %d data", data);
   d4152:	f001 fd45 	bl	d5be0 <_Z16_fetch_usbserialv>
   d4156:	4623      	mov	r3, r4
   d4158:	4a1b      	ldr	r2, [pc, #108]	; (d41c8 <_Z12configSensoriii+0xc8>)
    Serial.println("");
    result = Wire.endTransmission(true);
   d415a:	4c1c      	ldr	r4, [pc, #112]	; (d41cc <_Z12configSensoriii+0xcc>)
   d415c:	2100      	movs	r1, #0
   d415e:	f001 f8a2 	bl	d52a6 <_ZN5Print11printf_implEbPKcz>
    Wire.write(subAddress);
    Serial.printf("writing - %d subAddress", subAddress);
    Serial.println("");
    Wire.write(data);
    Serial.printf("writing - %d data", data);
    Serial.println("");
   d4162:	f001 fd3d 	bl	d5be0 <_Z16_fetch_usbserialv>
   d4166:	4916      	ldr	r1, [pc, #88]	; (d41c0 <_Z12configSensoriii+0xc0>)
   d4168:	f001 f873 	bl	d5252 <_ZN5Print7printlnEPKc>
    result = Wire.endTransmission(true);
   d416c:	f002 f8b4 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d4170:	2101      	movs	r1, #1
   d4172:	f001 feb6 	bl	d5ee2 <_ZN7TwoWire15endTransmissionEh>
   d4176:	6020      	str	r0, [r4, #0]
    if(!result){
   d4178:	b928      	cbnz	r0, d4186 <_Z12configSensoriii+0x86>
        Serial.print("Transmission successful!");
   d417a:	f001 fd31 	bl	d5be0 <_Z16_fetch_usbserialv>
   d417e:	4914      	ldr	r1, [pc, #80]	; (d41d0 <_Z12configSensoriii+0xd0>)
   d4180:	f001 f854 	bl	d522c <_ZN5Print5printEPKc>
   d4184:	e010      	b.n	d41a8 <_Z12configSensoriii+0xa8>
        Serial.println("");
    }
    else{
        Serial.print("Transmission failed.");
   d4186:	f001 fd2b 	bl	d5be0 <_Z16_fetch_usbserialv>
   d418a:	4912      	ldr	r1, [pc, #72]	; (d41d4 <_Z12configSensoriii+0xd4>)
   d418c:	f001 f84e 	bl	d522c <_ZN5Print5printEPKc>
        Serial.println("");
   d4190:	f001 fd26 	bl	d5be0 <_Z16_fetch_usbserialv>
   d4194:	490a      	ldr	r1, [pc, #40]	; (d41c0 <_Z12configSensoriii+0xc0>)
   d4196:	f001 f85c 	bl	d5252 <_ZN5Print7printlnEPKc>
        Serial.printf("As Wire.endTransmission returns a non-zero value i.e., %d", result);
   d419a:	f001 fd21 	bl	d5be0 <_Z16_fetch_usbserialv>
   d419e:	6823      	ldr	r3, [r4, #0]
   d41a0:	4a0d      	ldr	r2, [pc, #52]	; (d41d8 <_Z12configSensoriii+0xd8>)
   d41a2:	2100      	movs	r1, #0
   d41a4:	f001 f87f 	bl	d52a6 <_ZN5Print11printf_implEbPKcz>
        Serial.println("");
   d41a8:	f001 fd1a 	bl	d5be0 <_Z16_fetch_usbserialv>
   d41ac:	4904      	ldr	r1, [pc, #16]	; (d41c0 <_Z12configSensoriii+0xc0>)
   d41ae:	f001 f850 	bl	d5252 <_ZN5Print7printlnEPKc>
    }
    delay(200);
   d41b2:	20c8      	movs	r0, #200	; 0xc8
}
   d41b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Serial.print("Transmission failed.");
        Serial.println("");
        Serial.printf("As Wire.endTransmission returns a non-zero value i.e., %d", result);
        Serial.println("");
    }
    delay(200);
   d41b8:	f001 b8c2 	b.w	d5340 <delay>
   d41bc:	000d7854 	.word	0x000d7854
   d41c0:	000d7a28 	.word	0x000d7a28
   d41c4:	000d786a 	.word	0x000d786a
   d41c8:	000d7882 	.word	0x000d7882
   d41cc:	2003e338 	.word	0x2003e338
   d41d0:	000d7894 	.word	0x000d7894
   d41d4:	000d78ad 	.word	0x000d78ad
   d41d8:	000d78c2 	.word	0x000d78c2

000d41dc <_Z10sensorReadiPfRfS_>:
}

/*========== Perform Accelerometer, Temperature, and Gyroscope data read from MPU-6050 ==========*/
int sensorRead(int slaveAddress, float *accelData, float &temp, float *gyroData){
   d41dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d41e0:	ed2d 8b02 	vpush	{d8}
   d41e4:	4605      	mov	r5, r0
   d41e6:	b083      	sub	sp, #12
   d41e8:	469a      	mov	sl, r3
   d41ea:	460c      	mov	r4, r1
   d41ec:	4693      	mov	fp, r2
    Wire.beginTransmission(slaveAddress);           // Address desired slave device to read from                
   d41ee:	f002 f873 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d41f2:	4629      	mov	r1, r5
   d41f4:	f001 fe72 	bl	d5edc <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(ACCEL_REG_ADDR);                     // Indicate target address for reading in data
   d41f8:	f002 f86e 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d41fc:	213b      	movs	r1, #59	; 0x3b
   d41fe:	f7ff ff7b 	bl	d40f8 <_ZN7TwoWire5writeEi>
    Wire.endTransmission(false);                    // Indicate we will send a restart signal (next line) to read in data
   d4202:	f002 f869 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d4206:	2100      	movs	r1, #0
   d4208:	f001 fe6b 	bl	d5ee2 <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(slaveAddress, 14, true);       // request 14 bytes of data
   d420c:	f002 f864 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d4210:	b2e9      	uxtb	r1, r5
   d4212:	220e      	movs	r2, #14
   d4214:	2301      	movs	r3, #1
   d4216:	f001 fe4b 	bl	d5eb0 <_ZN7TwoWire11requestFromEhjh>

    // Read in MSB, bitshift by eight, switch positions with LSB, and store in temporary variable
    int xAccRaw = (int) Wire.read()<<8 | Wire.read();  
   d421a:	f002 f85d 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d421e:	6803      	ldr	r3, [r0, #0]
   d4220:	695b      	ldr	r3, [r3, #20]
   d4222:	4798      	blx	r3
   d4224:	4680      	mov	r8, r0
   d4226:	f002 f857 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d422a:	6803      	ldr	r3, [r0, #0]
   d422c:	695b      	ldr	r3, [r3, #20]
   d422e:	4798      	blx	r3
   d4230:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
    int yAccRaw = (int) Wire.read()<<8 | Wire.read();
   d4234:	f002 f850 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d4238:	6803      	ldr	r3, [r0, #0]
   d423a:	695b      	ldr	r3, [r3, #20]
   d423c:	4798      	blx	r3
   d423e:	4607      	mov	r7, r0
   d4240:	f002 f84a 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d4244:	6803      	ldr	r3, [r0, #0]
   d4246:	695b      	ldr	r3, [r3, #20]
   d4248:	4798      	blx	r3
   d424a:	ea40 2707 	orr.w	r7, r0, r7, lsl #8
    int zAccRaw = (int) Wire.read()<<8 | Wire.read();
   d424e:	f002 f843 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d4252:	6803      	ldr	r3, [r0, #0]
   d4254:	695b      	ldr	r3, [r3, #20]
   d4256:	4798      	blx	r3
   d4258:	4606      	mov	r6, r0
   d425a:	f002 f83d 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d425e:	6803      	ldr	r3, [r0, #0]
   d4260:	695b      	ldr	r3, [r3, #20]
   d4262:	4798      	blx	r3
   d4264:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
   d4268:	f002 f836 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d426c:	6803      	ldr	r3, [r0, #0]
   d426e:	695b      	ldr	r3, [r3, #20]
   d4270:	4798      	blx	r3
   d4272:	4605      	mov	r5, r0
   d4274:	f002 f830 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d4278:	6803      	ldr	r3, [r0, #0]
   d427a:	695b      	ldr	r3, [r3, #20]
   d427c:	4798      	blx	r3
   d427e:	ea40 2305 	orr.w	r3, r0, r5, lsl #8
   d4282:	ee08 3a10 	vmov	s16, r3
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d4286:	f002 f827 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d428a:	6803      	ldr	r3, [r0, #0]
   d428c:	695b      	ldr	r3, [r3, #20]
   d428e:	4798      	blx	r3
   d4290:	4605      	mov	r5, r0
   d4292:	f002 f821 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d4296:	6803      	ldr	r3, [r0, #0]
   d4298:	695b      	ldr	r3, [r3, #20]
   d429a:	4798      	blx	r3
   d429c:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d42a0:	f002 f81a 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d42a4:	6803      	ldr	r3, [r0, #0]
   d42a6:	695b      	ldr	r3, [r3, #20]
   d42a8:	4798      	blx	r3
   d42aa:	4681      	mov	r9, r0
   d42ac:	f002 f814 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d42b0:	6803      	ldr	r3, [r0, #0]
   d42b2:	695b      	ldr	r3, [r3, #20]
   d42b4:	4798      	blx	r3
   d42b6:	ea40 2209 	orr.w	r2, r0, r9, lsl #8
   d42ba:	9201      	str	r2, [sp, #4]
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d42bc:	f002 f80c 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d42c0:	6803      	ldr	r3, [r0, #0]
   d42c2:	695b      	ldr	r3, [r3, #20]
   d42c4:	4798      	blx	r3
   d42c6:	4681      	mov	r9, r0
   d42c8:	f002 f806 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d42cc:	6803      	ldr	r3, [r0, #0]
   d42ce:	695b      	ldr	r3, [r3, #20]
   d42d0:	4798      	blx	r3
   d42d2:	ea40 2909 	orr.w	r9, r0, r9, lsl #8

    result = Wire.endTransmission(true);
   d42d6:	f001 ffff 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d42da:	2101      	movs	r1, #1
   d42dc:	f001 fe01 	bl	d5ee2 <_ZN7TwoWire15endTransmissionEh>

    // Determine if raw value is intended to be read as positive or negative
    // Accelerometer
    if(xAccRaw < 32768){
   d42e0:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
        xAccRaw = -xAccRaw;
   d42e4:	bfb4      	ite	lt
   d42e6:	f1c8 0800 	rsblt	r8, r8, #0
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
   d42ea:	f5c8 3880 	rsbge	r8, r8, #65536	; 0x10000
        zGyrRaw = -(zGyrRaw - 65536);
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d42ee:	ee07 8a90 	vmov	s15, r8
   d42f2:	eddf 6a4c 	vldr	s13, [pc, #304]	; d4424 <_Z10sensorReadiPfRfS_+0x248>
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();

    result = Wire.endTransmission(true);
   d42f6:	4b4c      	ldr	r3, [pc, #304]	; (d4428 <_Z10sensorReadiPfRfS_+0x24c>)

    // Determine if raw value is intended to be read as positive or negative
    // Accelerometer
    if(xAccRaw < 32768){
   d42f8:	9a01      	ldr	r2, [sp, #4]
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();

    result = Wire.endTransmission(true);
   d42fa:	6018      	str	r0, [r3, #0]
        xAccRaw = -xAccRaw;
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
    }
    if(yAccRaw < 32768){
   d42fc:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
        zGyrRaw = -(zGyrRaw - 65536);
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d4300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
    }
    if(yAccRaw < 32768){
        yAccRaw = -yAccRaw;
   d4304:	bfb4      	ite	lt
   d4306:	427f      	neglt	r7, r7
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
   d4308:	f5c7 3780 	rsbge	r7, r7, #65536	; 0x10000
        zGyrRaw = -(zGyrRaw - 65536);
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d430c:	ee27 7a26 	vmul.f32	s14, s14, s13
        yAccRaw = -yAccRaw;
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
    }
    if(zAccRaw < 32768){
   d4310:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4314:	ee07 7a90 	vmov	s15, r7
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
    }
    if(zAccRaw < 32768){
        zAccRaw = -zAccRaw;
   d4318:	bfb4      	ite	lt
   d431a:	4276      	neglt	r6, r6
    }
    else{
        zAccRaw = -(zAccRaw - 65536);
   d431c:	f5c6 3680 	rsbge	r6, r6, #65536	; 0x10000
        zGyrRaw = -(zGyrRaw - 65536);
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d4320:	ed84 7a00 	vstr	s14, [r4]
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4328:	ee07 6a90 	vmov	s15, r6
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d432c:	ee27 7a26 	vmul.f32	s14, s14, s13
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4334:	ed84 7a01 	vstr	s14, [r4, #4]
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4338:	ee67 7aa6 	vmul.f32	s15, s15, s13
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d433c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; d442c <_Z10sensorReadiPfRfS_+0x250>
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4340:	edc4 7a02 	vstr	s15, [r4, #8]
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4344:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    else{
        zAccRaw = -(zAccRaw - 65536);
    }

    // Gyroscope
    if(xGyrRaw < 32768){
   d4348:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d434c:	eec8 7a07 	vdiv.f32	s15, s16, s14
        zAccRaw = -(zAccRaw - 65536);
    }

    // Gyroscope
    if(xGyrRaw < 32768){
        xGyrRaw = -xGyrRaw;
   d4350:	bfb4      	ite	lt
   d4352:	426d      	neglt	r5, r5
    }
    else{
        xGyrRaw = -(xGyrRaw - 65536);
   d4354:	f5c5 3580 	rsbge	r5, r5, #65536	; 0x10000
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d4358:	426d      	negs	r5, r5
        xGyrRaw = -xGyrRaw;
    }
    else{
        xGyrRaw = -(xGyrRaw - 65536);
    }
    if(yGyrRaw < 32768){
   d435a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        yGyrRaw = -yGyrRaw;
   d435e:	bfb4      	ite	lt
   d4360:	4252      	neglt	r2, r2
    }
    else{
        yGyrRaw = -(yGyrRaw - 65536);
   d4362:	f5c2 3280 	rsbge	r2, r2, #65536	; 0x10000
    }
    if(zGyrRaw < 32768){
   d4366:	f5b9 4f00 	cmp.w	r9, #32768	; 0x8000
        zGyrRaw = -zGyrRaw;
   d436a:	bfb4      	ite	lt
   d436c:	f1c9 0900 	rsblt	r9, r9, #0
    }
    else{
        zGyrRaw = -(zGyrRaw - 65536);
   d4370:	f5c9 3980 	rsbge	r9, r9, #65536	; 0x10000
   d4374:	9301      	str	r3, [sp, #4]
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4376:	ed9f 7a2e 	vldr	s14, [pc, #184]	; d4430 <_Z10sensorReadiPfRfS_+0x254>
   d437a:	ee77 7a87 	vadd.f32	s15, s15, s14
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d437e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; d4434 <_Z10sensorReadiPfRfS_+0x258>
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4382:	edcb 7a00 	vstr	s15, [fp]
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d4386:	ee07 5a90 	vmov	s15, r5
   d438a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d438e:	eec7 6a87 	vdiv.f32	s13, s15, s14
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d4392:	ee07 2a90 	vmov	s15, r2
   d4396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d439a:	edca 6a00 	vstr	s13, [sl]
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d439e:	eec7 6a87 	vdiv.f32	s13, s15, s14
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;
   d43a2:	ee07 9a90 	vmov	s15, r9
   d43a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d43aa:	edca 6a01 	vstr	s13, [sl, #4]
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;
   d43ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d43b2:	edca 6a02 	vstr	s13, [sl, #8]

    // Calibrate Data
    accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
   d43b6:	edd4 7a01 	vldr	s15, [r4, #4]
   d43ba:	edd4 6a00 	vldr	s13, [r4]
   d43be:	ed94 7a02 	vldr	s14, [r4, #8]
   d43c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
   d43c6:	eee6 7aa6 	vfma.f32	s15, s13, s13
   d43ca:	eee7 7a07 	vfma.f32	s15, s14, s14
   d43ce:	ee17 0a90 	vmov	r0, s15
   d43d2:	f002 fe67 	bl	d70a4 <__aeabi_f2d>
   d43d6:	ec41 0b10 	vmov	d0, r0, r1
   d43da:	f002 f911 	bl	d6600 <sqrt>
   d43de:	ec51 0b10 	vmov	r0, r1, d0
   d43e2:	f003 f963 	bl	d76ac <__aeabi_d2f>
   d43e6:	4a14      	ldr	r2, [pc, #80]	; (d4438 <_Z10sensorReadiPfRfS_+0x25c>)
   d43e8:	4914      	ldr	r1, [pc, #80]	; (d443c <_Z10sensorReadiPfRfS_+0x260>)
   d43ea:	6010      	str	r0, [r2, #0]
   d43ec:	9b01      	ldr	r3, [sp, #4]
   d43ee:	4a14      	ldr	r2, [pc, #80]	; (d4440 <_Z10sensorReadiPfRfS_+0x264>)
   d43f0:	f104 000c 	add.w	r0, r4, #12
    for( int i = 0; i < 3; i++){
        accelData[i] = accelData[i] + accelCalibration_1[i];  // Calibrate accelerometer data with offset
   d43f4:	ecb1 7a01 	vldmia	r1!, {s14}
   d43f8:	edd4 7a00 	vldr	s15, [r4]
   d43fc:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4400:	ece4 7a01 	vstmia	r4!, {s15}
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
   d4404:	ecb2 7a01 	vldmia	r2!, {s14}
   d4408:	edda 7a00 	vldr	s15, [sl]
   d440c:	ee77 7a87 	vadd.f32	s15, s15, s14
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;

    // Calibrate Data
    accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
    for( int i = 0; i < 3; i++){
   d4410:	42a0      	cmp	r0, r4
        accelData[i] = accelData[i] + accelCalibration_1[i];  // Calibrate accelerometer data with offset
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
   d4412:	ecea 7a01 	vstmia	sl!, {s15}
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;

    // Calibrate Data
    accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
    for( int i = 0; i < 3; i++){
   d4416:	d1ed      	bne.n	d43f4 <_Z10sensorReadiPfRfS_+0x218>
        accelData[i] = accelData[i] + accelCalibration_1[i];  // Calibrate accelerometer data with offset
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
    }
    return result;
}
   d4418:	6818      	ldr	r0, [r3, #0]
   d441a:	b003      	add	sp, #12
   d441c:	ecbd 8b02 	vpop	{d8}
   d4420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4424:	38800000 	.word	0x38800000
   d4428:	2003e338 	.word	0x2003e338
   d442c:	43aa0000 	.word	0x43aa0000
   d4430:	42121eb8 	.word	0x42121eb8
   d4434:	43030000 	.word	0x43030000
   d4438:	2003e1f4 	.word	0x2003e1f4
   d443c:	000d7848 	.word	0x000d7848
   d4440:	000d783c 	.word	0x000d783c
   d4444:	00000000 	.word	0x00000000

000d4448 <_Z10filterDataPfPA20_fS_S1_RiS2_S_>:

/*========== Filter accelerometer data using gyroscope data ==========*/
// When passing 2D arrays to a function, reference: https://www.tutorialspoint.com/Passing-two-dimensional-array-to-a-Cplusplus-function
void  filterData(float *accData, float accelBuffer[][accNum], float *gyrData, float gyroBuffer[][accNum], int &y, int &startup, float *angles){
   d4448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d444c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d444e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   d4450:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   d4452:	4690      	mov	r8, r2
   d4454:	2500      	movs	r5, #0
    // Store new sensor values in buffers
    for(int i = 0; i < 3; i++){
            accelBuffer[i][y] = accData[i];   // Store newest accelData values in first line of buffer
   d4456:	6822      	ldr	r2, [r4, #0]
   d4458:	f850 cb04 	ldr.w	ip, [r0], #4
   d445c:	eb01 0e05 	add.w	lr, r1, r5
   d4460:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
   d4464:	f8ce c000 	str.w	ip, [lr]
            gyroBuffer[i][y] = gyrData[i];     // Store newest gyroData values in first line of buffer
   d4468:	6822      	ldr	r2, [r4, #0]
   d446a:	f858 cb04 	ldr.w	ip, [r8], #4
   d446e:	eb03 0e05 	add.w	lr, r3, r5
   d4472:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
   d4476:	3550      	adds	r5, #80	; 0x50

/*========== Filter accelerometer data using gyroscope data ==========*/
// When passing 2D arrays to a function, reference: https://www.tutorialspoint.com/Passing-two-dimensional-array-to-a-Cplusplus-function
void  filterData(float *accData, float accelBuffer[][accNum], float *gyrData, float gyroBuffer[][accNum], int &y, int &startup, float *angles){
    // Store new sensor values in buffers
    for(int i = 0; i < 3; i++){
   d4478:	2df0      	cmp	r5, #240	; 0xf0
            accelBuffer[i][y] = accData[i];   // Store newest accelData values in first line of buffer
            gyroBuffer[i][y] = gyrData[i];     // Store newest gyroData values in first line of buffer
   d447a:	f8ce c000 	str.w	ip, [lr]

/*========== Filter accelerometer data using gyroscope data ==========*/
// When passing 2D arrays to a function, reference: https://www.tutorialspoint.com/Passing-two-dimensional-array-to-a-Cplusplus-function
void  filterData(float *accData, float accelBuffer[][accNum], float *gyrData, float gyroBuffer[][accNum], int &y, int &startup, float *angles){
    // Store new sensor values in buffers
    for(int i = 0; i < 3; i++){
   d447e:	d1ea      	bne.n	d4456 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0xe>
            accelBuffer[i][y] = accData[i];   // Store newest accelData values in first line of buffer
            gyroBuffer[i][y] = gyrData[i];     // Store newest gyroData values in first line of buffer
        }
   
    // If this is the first time running the filter, there is no old data, so our best estimate is based on our current data
    if(startup == 0){
   d4480:	683a      	ldr	r2, [r7, #0]
   d4482:	4d53      	ldr	r5, [pc, #332]	; (d45d0 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x188>)
   d4484:	2a00      	cmp	r2, #0
   d4486:	f000 8084 	beq.w	d4592 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x14a>
   d448a:	4f52      	ldr	r7, [pc, #328]	; (d45d4 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x18c>)
   d448c:	4852      	ldr	r0, [pc, #328]	; (d45d8 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x190>)
   d448e:	f8df 9150 	ldr.w	r9, [pc, #336]	; d45e0 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x198>
   d4492:	f8df 8150 	ldr.w	r8, [pc, #336]	; d45e4 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x19c>
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
            // Reset sum buffers
            sumAccel[i] = 0;    
   d4496:	eddf 5a51 	vldr	s11, [pc, #324]	; d45dc <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x194>
   d449a:	46ac      	mov	ip, r5
            accelBuffer[i][y] = accData[i];   // Store newest accelData values in first line of buffer
            gyroBuffer[i][y] = gyrData[i];     // Store newest gyroData values in first line of buffer
        }
   
    // If this is the first time running the filter, there is no old data, so our best estimate is based on our current data
    if(startup == 0){
   d449c:	2200      	movs	r2, #0
            sumAccel[i] += accelBuffer[i][x];
            sumGyro[i] += gyroBuffer[i][x];
            }

            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) accNum);
   d449e:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
   d44a2:	eb01 0e02 	add.w	lr, r1, r2
   d44a6:	eb03 0a02 	add.w	sl, r3, r2
   d44aa:	3250      	adds	r2, #80	; 0x50
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
            // Reset sum buffers
            sumAccel[i] = 0;    
   d44ac:	ece7 5a01 	vstmia	r7!, {s11}
            sumGyro[i] = 0;
   d44b0:	ece0 5a01 	vstmia	r0!, {s11}
   d44b4:	eb01 0b02 	add.w	fp, r1, r2

            // Sum all values in each column
            for(int x = 0; x < accNum; x++){
            sumAccel[i] += accelBuffer[i][x];
   d44b8:	ecfe 7a01 	vldmia	lr!, {s15}
   d44bc:	ed17 7a01 	vldr	s14, [r7, #-4]
            sumGyro[i] += gyroBuffer[i][x];
   d44c0:	ed50 6a01 	vldr	s13, [r0, #-4]
            sumAccel[i] = 0;    
            sumGyro[i] = 0;

            // Sum all values in each column
            for(int x = 0; x < accNum; x++){
            sumAccel[i] += accelBuffer[i][x];
   d44c4:	ee37 7a87 	vadd.f32	s14, s15, s14
            // Reset sum buffers
            sumAccel[i] = 0;    
            sumGyro[i] = 0;

            // Sum all values in each column
            for(int x = 0; x < accNum; x++){
   d44c8:	45de      	cmp	lr, fp
            sumAccel[i] += accelBuffer[i][x];
   d44ca:	ed07 7a01 	vstr	s14, [r7, #-4]
            sumGyro[i] += gyroBuffer[i][x];
   d44ce:	ecfa 7a01 	vldmia	sl!, {s15}
   d44d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d44d6:	ed40 7a01 	vstr	s15, [r0, #-4]
            // Reset sum buffers
            sumAccel[i] = 0;    
            sumGyro[i] = 0;

            // Sum all values in each column
            for(int x = 0; x < accNum; x++){
   d44da:	d1ed      	bne.n	d44b8 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x70>
            sumAccel[i] += accelBuffer[i][x];
            sumGyro[i] += gyroBuffer[i][x];
            }

            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) accNum);
   d44dc:	eec7 6a06 	vdiv.f32	s13, s14, s12
        startup = 1;    // Set to 1 so this section is not repeated
    }
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
   d44e0:	2af0      	cmp	r2, #240	; 0xf0
            sumGyro[i] += gyroBuffer[i][x];
            }

            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) accNum);
            avgGyro[i] = sumGyro[i]/((float) accNum);
   d44e2:	ee87 7a86 	vdiv.f32	s14, s15, s12
            sumAccel[i] += accelBuffer[i][x];
            sumGyro[i] += gyroBuffer[i][x];
            }

            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) accNum);
   d44e6:	ece9 6a01 	vstmia	r9!, {s13}
            avgGyro[i] = sumGyro[i]/((float) accNum);
   d44ea:	eca8 7a01 	vstmia	r8!, {s14}

            // Take a weighted average of accelerometer and gyroscope values to account for drift and random variances
            //estimates[i] = (avgAccel[i]*0.98) + (avgGyro[i]*(timestep/1000))*0.02; 
            estimates[i] = avgAccel[i];
   d44ee:	ecec 6a01 	vstmia	ip!, {s13}
        startup = 1;    // Set to 1 so this section is not repeated
    }
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
   d44f2:	d1d6      	bne.n	d44a2 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x5a>
            //estimates[i] = (avgAccel[i]*0.98) + (avgGyro[i]*(timestep/1000))*0.02; 
            estimates[i] = avgAccel[i];
        }

        // Calculate angles based on estimate
        angles[0] = atan2(estimates[1], estimates[2]) * (180/3.14);     // Angle about x-axis
   d44f4:	68a8      	ldr	r0, [r5, #8]
   d44f6:	f002 fdd5 	bl	d70a4 <__aeabi_f2d>
   d44fa:	e9cd 0100 	strd	r0, r1, [sp]
   d44fe:	6868      	ldr	r0, [r5, #4]
   d4500:	f002 fdd0 	bl	d70a4 <__aeabi_f2d>
   d4504:	ed9d 1b00 	vldr	d1, [sp]
   d4508:	ec41 0b10 	vmov	d0, r0, r1
   d450c:	f002 f876 	bl	d65fc <atan2>
   d4510:	a32d      	add	r3, pc, #180	; (adr r3, d45c8 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x180>)
   d4512:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4516:	ec51 0b10 	vmov	r0, r1, d0
   d451a:	f002 fe17 	bl	d714c <__aeabi_dmul>
   d451e:	f003 f8c5 	bl	d76ac <__aeabi_d2f>
   d4522:	6030      	str	r0, [r6, #0]
        angles[1] = atan2(estimates[0], estimates[2]) * (180/3.14);     // Angle about y-axis
   d4524:	68a8      	ldr	r0, [r5, #8]
   d4526:	f002 fdbd 	bl	d70a4 <__aeabi_f2d>
   d452a:	e9cd 0100 	strd	r0, r1, [sp]
   d452e:	6828      	ldr	r0, [r5, #0]
   d4530:	f002 fdb8 	bl	d70a4 <__aeabi_f2d>
   d4534:	ed9d 1b00 	vldr	d1, [sp]
   d4538:	ec41 0b10 	vmov	d0, r0, r1
   d453c:	f002 f85e 	bl	d65fc <atan2>
   d4540:	a321      	add	r3, pc, #132	; (adr r3, d45c8 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x180>)
   d4542:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4546:	ec51 0b10 	vmov	r0, r1, d0
   d454a:	f002 fdff 	bl	d714c <__aeabi_dmul>
   d454e:	f003 f8ad 	bl	d76ac <__aeabi_d2f>
   d4552:	6070      	str	r0, [r6, #4]
        angles[2] = atan2(estimates[1], estimates[0]) * (180/3.14);     // Angle about z-axis
   d4554:	6828      	ldr	r0, [r5, #0]
   d4556:	f002 fda5 	bl	d70a4 <__aeabi_f2d>
   d455a:	e9cd 0100 	strd	r0, r1, [sp]
   d455e:	6868      	ldr	r0, [r5, #4]
   d4560:	f002 fda0 	bl	d70a4 <__aeabi_f2d>
   d4564:	ed9d 1b00 	vldr	d1, [sp]
   d4568:	ec41 0b10 	vmov	d0, r0, r1
   d456c:	f002 f846 	bl	d65fc <atan2>
   d4570:	a315      	add	r3, pc, #84	; (adr r3, d45c8 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x180>)
   d4572:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4576:	ec51 0b10 	vmov	r0, r1, d0
   d457a:	f002 fde7 	bl	d714c <__aeabi_dmul>
   d457e:	f003 f895 	bl	d76ac <__aeabi_d2f>
   d4582:	60b0      	str	r0, [r6, #8]

        y++;    // Increment row in accelBuffer and gyroBuffer to prepare for next iteration
   d4584:	6823      	ldr	r3, [r4, #0]
   d4586:	3301      	adds	r3, #1
        
        // If we reach the end of the buffers, reset to 0
        if(y >= accNum){
   d4588:	2b13      	cmp	r3, #19
            y = 0;
   d458a:	bfc8      	it	gt
   d458c:	2300      	movgt	r3, #0
   d458e:	6023      	str	r3, [r4, #0]
   d4590:	e014      	b.n	d45bc <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x174>
   
    // If this is the first time running the filter, there is no old data, so our best estimate is based on our current data
    if(startup == 0){
        // Store new accelBuffer values in estimate
        for(int i = 0; i < 3; i++){
            estimates[i] = accelBuffer[i][y];  // Use current accelerometer data to get current estimate
   d4592:	6823      	ldr	r3, [r4, #0]
   d4594:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	602b      	str	r3, [r5, #0]
   d459c:	6823      	ldr	r3, [r4, #0]
   d459e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d45a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d45a4:	606b      	str	r3, [r5, #4]
   d45a6:	6823      	ldr	r3, [r4, #0]
   d45a8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   d45ac:	f8d1 30a0 	ldr.w	r3, [r1, #160]	; 0xa0
   d45b0:	60ab      	str	r3, [r5, #8]
        }
        y++;            // Increment row in buffers
   d45b2:	6823      	ldr	r3, [r4, #0]
   d45b4:	3301      	adds	r3, #1
   d45b6:	6023      	str	r3, [r4, #0]
        startup = 1;    // Set to 1 so this section is not repeated
   d45b8:	2301      	movs	r3, #1
   d45ba:	603b      	str	r3, [r7, #0]
        // If we reach the end of the buffers, reset to 0
        if(y >= accNum){
            y = 0;
        }
    }
}
   d45bc:	b003      	add	sp, #12
   d45be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d45c2:	bf00      	nop
   d45c4:	f3af 8000 	nop.w
   d45c8:	61d59ae7 	.word	0x61d59ae7
   d45cc:	404ca994 	.word	0x404ca994
   d45d0:	2003e060 	.word	0x2003e060
   d45d4:	2003e39c 	.word	0x2003e39c
   d45d8:	2003e32c 	.word	0x2003e32c
   d45dc:	00000000 	.word	0x00000000
   d45e0:	2003e0cc 	.word	0x2003e0cc
   d45e4:	2003ded8 	.word	0x2003ded8

000d45e8 <_Z15strainGaugeReadiPiRiS0_>:

/*========== Read in and average values from strain gauges ==========*/
void strainGaugeRead(int sgPin, int *sgBuff, int &sgX, int &sgVal){
   d45e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sgBuff[sgX] = analogRead(sgPin);    // Place new reading at current index in buffer for averaging
   d45ea:	b280      	uxth	r0, r0
        }
    }
}

/*========== Read in and average values from strain gauges ==========*/
void strainGaugeRead(int sgPin, int *sgBuff, int &sgX, int &sgVal){
   d45ec:	460c      	mov	r4, r1
    sgBuff[sgX] = analogRead(sgPin);    // Place new reading at current index in buffer for averaging
   d45ee:	6817      	ldr	r7, [r2, #0]
        }
    }
}

/*========== Read in and average values from strain gauges ==========*/
void strainGaugeRead(int sgPin, int *sgBuff, int &sgX, int &sgVal){
   d45f0:	4615      	mov	r5, r2
   d45f2:	461e      	mov	r6, r3
    sgBuff[sgX] = analogRead(sgPin);    // Place new reading at current index in buffer for averaging
   d45f4:	f001 fe3e 	bl	d6274 <analogRead>
   d45f8:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
    sumSG = 0;                            // Reset sum value
   d45fc:	480b      	ldr	r0, [pc, #44]	; (d462c <_Z15strainGaugeReadiPiRiS0_+0x44>)
   d45fe:	2300      	movs	r3, #0
   d4600:	1f22      	subs	r2, r4, #4
   d4602:	6003      	str	r3, [r0, #0]
   d4604:	344c      	adds	r4, #76	; 0x4c
    // For the entire buffer, iterate through and sum all values
    for(int i = 0; i < sgNum; i++){
        sumSG = sumSG + sgBuff[i];
   d4606:	f852 1f04 	ldr.w	r1, [r2, #4]!
   d460a:	6803      	ldr	r3, [r0, #0]
/*========== Read in and average values from strain gauges ==========*/
void strainGaugeRead(int sgPin, int *sgBuff, int &sgX, int &sgVal){
    sgBuff[sgX] = analogRead(sgPin);    // Place new reading at current index in buffer for averaging
    sumSG = 0;                            // Reset sum value
    // For the entire buffer, iterate through and sum all values
    for(int i = 0; i < sgNum; i++){
   d460c:	42a2      	cmp	r2, r4
        sumSG = sumSG + sgBuff[i];
   d460e:	440b      	add	r3, r1
   d4610:	6003      	str	r3, [r0, #0]
/*========== Read in and average values from strain gauges ==========*/
void strainGaugeRead(int sgPin, int *sgBuff, int &sgX, int &sgVal){
    sgBuff[sgX] = analogRead(sgPin);    // Place new reading at current index in buffer for averaging
    sumSG = 0;                            // Reset sum value
    // For the entire buffer, iterate through and sum all values
    for(int i = 0; i < sgNum; i++){
   d4612:	d1f8      	bne.n	d4606 <_Z15strainGaugeReadiPiRiS0_+0x1e>
        sumSG = sumSG + sgBuff[i];
    }
    sgX = sgX + 1;      // Increment index in buffer for next value saving
   d4614:	6829      	ldr	r1, [r5, #0]
   d4616:	3101      	adds	r1, #1
    // If we reach the end of the buffer, reset the value to the beginning
    if(sgX >= sgNum){
        sgX = 0;
   d4618:	2914      	cmp	r1, #20
   d461a:	bfa8      	it	ge
   d461c:	2100      	movge	r1, #0
   d461e:	6029      	str	r1, [r5, #0]
    }
    sgVal = sumSG/sgNum;  // Divide sum by number of values in buffer to calculate average
   d4620:	6802      	ldr	r2, [r0, #0]
   d4622:	2314      	movs	r3, #20
   d4624:	fb92 f2f3 	sdiv	r2, r2, r3
   d4628:	6032      	str	r2, [r6, #0]
   d462a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d462c:	2003dd6c 	.word	0x2003dd6c

000d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4630:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4632:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4634:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4636:	b17c      	cbz	r4, d4658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4638:	6863      	ldr	r3, [r4, #4]
   d463a:	3b01      	subs	r3, #1
   d463c:	6063      	str	r3, [r4, #4]
   d463e:	b95b      	cbnz	r3, d4658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4640:	6823      	ldr	r3, [r4, #0]
   d4642:	4620      	mov	r0, r4
   d4644:	689b      	ldr	r3, [r3, #8]
   d4646:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4648:	68a3      	ldr	r3, [r4, #8]
   d464a:	3b01      	subs	r3, #1
   d464c:	60a3      	str	r3, [r4, #8]
   d464e:	b91b      	cbnz	r3, d4658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4650:	6823      	ldr	r3, [r4, #0]
   d4652:	4620      	mov	r0, r4
   d4654:	68db      	ldr	r3, [r3, #12]
   d4656:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4658:	4628      	mov	r0, r5
   d465a:	bd38      	pop	{r3, r4, r5, pc}

000d465c <loop>:
  Particle.publish("angleStr1", angleStr1, PRIVATE);
  Particle.publish("angleStr2", angleStr2, PRIVATE);
}

/*========== Main Loop ===========*/
void loop(){
   d465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4660:	2414      	movs	r4, #20
   d4662:	b087      	sub	sp, #28
  // Get 20 readings at a time; average and filter data
  for(int i = 0; i < 20; i++){
    // Analog read and conversion
    strainGaugeRead(sgPinLi1, sgBuffLi1, sgXLi1, sgValLi1);
   d4664:	f8df b2c8 	ldr.w	fp, [pc, #712]	; d4930 <loop+0x2d4>
    strainGaugeRead(sgPinLi2, sgBuffLi2, sgXLi2, sgValLi2);
   d4668:	f8df a2c8 	ldr.w	sl, [pc, #712]	; d4934 <loop+0x2d8>
/*========== Main Loop ===========*/
void loop(){
  // Get 20 readings at a time; average and filter data
  for(int i = 0; i < 20; i++){
    // Analog read and conversion
    strainGaugeRead(sgPinLi1, sgBuffLi1, sgXLi1, sgValLi1);
   d466c:	4a7f      	ldr	r2, [pc, #508]	; (d486c <loop+0x210>)
   d466e:	4980      	ldr	r1, [pc, #512]	; (d4870 <loop+0x214>)
    strainGaugeRead(sgPinLi2, sgBuffLi2, sgXLi2, sgValLi2);
    strainGaugeRead(sgPinLo1, sgBuffLo1, sgXLo1, sgValLo1);
   d4670:	f8df 92c4 	ldr.w	r9, [pc, #708]	; d4938 <loop+0x2dc>
    strainGaugeRead(sgPinRi1, sgBuffRi1, sgXRi1, sgValRi1);
   d4674:	f8df 82c4 	ldr.w	r8, [pc, #708]	; d493c <loop+0x2e0>
    strainGaugeRead(sgPinRi2, sgBuffRi2, sgXRi2, sgValRi2);
   d4678:	4f7e      	ldr	r7, [pc, #504]	; (d4874 <loop+0x218>)
    strainGaugeRead(sgPinRo1, sgBuffRo1, sgXRo1, sgValRo1);  
    
    // Read in data from MPU-6050's
    result = sensorRead(MPU_SLAVE_ADDR_1, accelData1, temp_C1, gyroData1);
   d467a:	4d7f      	ldr	r5, [pc, #508]	; (d4878 <loop+0x21c>)
    result = sensorRead(MPU_SLAVE_ADDR_2, accelData2, temp_C2, gyroData2);

    // Filter data and determine global angular orientation
    filterData(accelData1, accelBuffer1, gyroData1, gyroBuffer2, x1, startup1, angles1); 
   d467c:	4e7f      	ldr	r6, [pc, #508]	; (d487c <loop+0x220>)
/*========== Main Loop ===========*/
void loop(){
  // Get 20 readings at a time; average and filter data
  for(int i = 0; i < 20; i++){
    // Analog read and conversion
    strainGaugeRead(sgPinLi1, sgBuffLi1, sgXLi1, sgValLi1);
   d467e:	465b      	mov	r3, fp
   d4680:	2011      	movs	r0, #17
   d4682:	f7ff ffb1 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    strainGaugeRead(sgPinLi2, sgBuffLi2, sgXLi2, sgValLi2);
   d4686:	4653      	mov	r3, sl
   d4688:	4a7d      	ldr	r2, [pc, #500]	; (d4880 <loop+0x224>)
   d468a:	497e      	ldr	r1, [pc, #504]	; (d4884 <loop+0x228>)
   d468c:	2013      	movs	r0, #19
   d468e:	f7ff ffab 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    strainGaugeRead(sgPinLo1, sgBuffLo1, sgXLo1, sgValLo1);
   d4692:	464b      	mov	r3, r9
   d4694:	4a7c      	ldr	r2, [pc, #496]	; (d4888 <loop+0x22c>)
   d4696:	497d      	ldr	r1, [pc, #500]	; (d488c <loop+0x230>)
   d4698:	2012      	movs	r0, #18
   d469a:	f7ff ffa5 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    strainGaugeRead(sgPinRi1, sgBuffRi1, sgXRi1, sgValRi1);
   d469e:	4643      	mov	r3, r8
   d46a0:	4a7b      	ldr	r2, [pc, #492]	; (d4890 <loop+0x234>)
   d46a2:	497c      	ldr	r1, [pc, #496]	; (d4894 <loop+0x238>)
   d46a4:	2010      	movs	r0, #16
   d46a6:	f7ff ff9f 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    strainGaugeRead(sgPinRi2, sgBuffRi2, sgXRi2, sgValRi2);
   d46aa:	463b      	mov	r3, r7
   d46ac:	4a7a      	ldr	r2, [pc, #488]	; (d4898 <loop+0x23c>)
   d46ae:	497b      	ldr	r1, [pc, #492]	; (d489c <loop+0x240>)
   d46b0:	200e      	movs	r0, #14
   d46b2:	f7ff ff99 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    strainGaugeRead(sgPinRo1, sgBuffRo1, sgXRo1, sgValRo1);  
   d46b6:	4b7a      	ldr	r3, [pc, #488]	; (d48a0 <loop+0x244>)
   d46b8:	4a7a      	ldr	r2, [pc, #488]	; (d48a4 <loop+0x248>)
   d46ba:	497b      	ldr	r1, [pc, #492]	; (d48a8 <loop+0x24c>)
   d46bc:	200f      	movs	r0, #15
   d46be:	f7ff ff93 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    
    // Read in data from MPU-6050's
    result = sensorRead(MPU_SLAVE_ADDR_1, accelData1, temp_C1, gyroData1);
   d46c2:	4b7a      	ldr	r3, [pc, #488]	; (d48ac <loop+0x250>)
   d46c4:	4a7a      	ldr	r2, [pc, #488]	; (d48b0 <loop+0x254>)
   d46c6:	497b      	ldr	r1, [pc, #492]	; (d48b4 <loop+0x258>)
   d46c8:	2068      	movs	r0, #104	; 0x68
   d46ca:	f7ff fd87 	bl	d41dc <_Z10sensorReadiPfRfS_>
    result = sensorRead(MPU_SLAVE_ADDR_2, accelData2, temp_C2, gyroData2);
   d46ce:	4b7a      	ldr	r3, [pc, #488]	; (d48b8 <loop+0x25c>)
    strainGaugeRead(sgPinRi1, sgBuffRi1, sgXRi1, sgValRi1);
    strainGaugeRead(sgPinRi2, sgBuffRi2, sgXRi2, sgValRi2);
    strainGaugeRead(sgPinRo1, sgBuffRo1, sgXRo1, sgValRo1);  
    
    // Read in data from MPU-6050's
    result = sensorRead(MPU_SLAVE_ADDR_1, accelData1, temp_C1, gyroData1);
   d46d0:	6028      	str	r0, [r5, #0]
    result = sensorRead(MPU_SLAVE_ADDR_2, accelData2, temp_C2, gyroData2);
   d46d2:	4a7a      	ldr	r2, [pc, #488]	; (d48bc <loop+0x260>)
   d46d4:	497a      	ldr	r1, [pc, #488]	; (d48c0 <loop+0x264>)
   d46d6:	2069      	movs	r0, #105	; 0x69
   d46d8:	f7ff fd80 	bl	d41dc <_Z10sensorReadiPfRfS_>

    // Filter data and determine global angular orientation
    filterData(accelData1, accelBuffer1, gyroData1, gyroBuffer2, x1, startup1, angles1); 
   d46dc:	4b79      	ldr	r3, [pc, #484]	; (d48c4 <loop+0x268>)
    strainGaugeRead(sgPinRi2, sgBuffRi2, sgXRi2, sgValRi2);
    strainGaugeRead(sgPinRo1, sgBuffRo1, sgXRo1, sgValRo1);  
    
    // Read in data from MPU-6050's
    result = sensorRead(MPU_SLAVE_ADDR_1, accelData1, temp_C1, gyroData1);
    result = sensorRead(MPU_SLAVE_ADDR_2, accelData2, temp_C2, gyroData2);
   d46de:	6028      	str	r0, [r5, #0]

    // Filter data and determine global angular orientation
    filterData(accelData1, accelBuffer1, gyroData1, gyroBuffer2, x1, startup1, angles1); 
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	4b79      	ldr	r3, [pc, #484]	; (d48c8 <loop+0x26c>)
   d46e4:	9300      	str	r3, [sp, #0]
   d46e6:	4a71      	ldr	r2, [pc, #452]	; (d48ac <loop+0x250>)
   d46e8:	4b78      	ldr	r3, [pc, #480]	; (d48cc <loop+0x270>)
   d46ea:	4979      	ldr	r1, [pc, #484]	; (d48d0 <loop+0x274>)
   d46ec:	4871      	ldr	r0, [pc, #452]	; (d48b4 <loop+0x258>)
   d46ee:	9602      	str	r6, [sp, #8]
   d46f0:	f7ff feaa 	bl	d4448 <_Z10filterDataPfPA20_fS_S1_RiS2_S_>
    filterData(accelData2, accelBuffer2, gyroData2, gyroBuffer2, x2, startup2, angles2);
   d46f4:	4b77      	ldr	r3, [pc, #476]	; (d48d4 <loop+0x278>)
   d46f6:	9301      	str	r3, [sp, #4]
   d46f8:	4d77      	ldr	r5, [pc, #476]	; (d48d8 <loop+0x27c>)
   d46fa:	4b78      	ldr	r3, [pc, #480]	; (d48dc <loop+0x280>)
   d46fc:	9300      	str	r3, [sp, #0]
   d46fe:	9502      	str	r5, [sp, #8]
   d4700:	4b72      	ldr	r3, [pc, #456]	; (d48cc <loop+0x270>)
   d4702:	4a6d      	ldr	r2, [pc, #436]	; (d48b8 <loop+0x25c>)
   d4704:	4976      	ldr	r1, [pc, #472]	; (d48e0 <loop+0x284>)
   d4706:	486e      	ldr	r0, [pc, #440]	; (d48c0 <loop+0x264>)
   d4708:	f7ff fe9e 	bl	d4448 <_Z10filterDataPfPA20_fS_S1_RiS2_S_>
}

/*========== Main Loop ===========*/
void loop(){
  // Get 20 readings at a time; average and filter data
  for(int i = 0; i < 20; i++){
   d470c:	3c01      	subs	r4, #1
   d470e:	d1a9      	bne.n	d4664 <loop+0x8>
    filterData(accelData2, accelBuffer2, gyroData2, gyroBuffer2, x2, startup2, angles2);
  }

  // Particle Event Publishing
  // Update strain gauge variables
  sprintf(sgLi1, "%d", sgValLi1);
   d4710:	f8db 2000 	ldr.w	r2, [fp]
   d4714:	4973      	ldr	r1, [pc, #460]	; (d48e4 <loop+0x288>)
   d4716:	4874      	ldr	r0, [pc, #464]	; (d48e8 <loop+0x28c>)
   d4718:	f000 fcb0 	bl	d507c <sprintf>
  sprintf(sgLi2, "%d", sgValLi2);
   d471c:	f8da 2000 	ldr.w	r2, [sl]
   d4720:	4970      	ldr	r1, [pc, #448]	; (d48e4 <loop+0x288>)
   d4722:	4872      	ldr	r0, [pc, #456]	; (d48ec <loop+0x290>)
   d4724:	f000 fcaa 	bl	d507c <sprintf>
  sprintf(sgLo1, "%d", sgValLo1);
   d4728:	f8d9 2000 	ldr.w	r2, [r9]
   d472c:	496d      	ldr	r1, [pc, #436]	; (d48e4 <loop+0x288>)
   d472e:	4870      	ldr	r0, [pc, #448]	; (d48f0 <loop+0x294>)
   d4730:	f000 fca4 	bl	d507c <sprintf>
  sprintf(sgRi1, "%d", sgValRi1);
   d4734:	f8d8 2000 	ldr.w	r2, [r8]
   d4738:	496a      	ldr	r1, [pc, #424]	; (d48e4 <loop+0x288>)
   d473a:	486e      	ldr	r0, [pc, #440]	; (d48f4 <loop+0x298>)
   d473c:	f000 fc9e 	bl	d507c <sprintf>
  sprintf(sgRi2, "%d", sgValRi2);
   d4740:	683a      	ldr	r2, [r7, #0]
   d4742:	4968      	ldr	r1, [pc, #416]	; (d48e4 <loop+0x288>)
   d4744:	486c      	ldr	r0, [pc, #432]	; (d48f8 <loop+0x29c>)
   d4746:	4f6d      	ldr	r7, [pc, #436]	; (d48fc <loop+0x2a0>)
   d4748:	f000 fc98 	bl	d507c <sprintf>
  sprintf(sgRo1, "%d", sgValRo1);
   d474c:	4b54      	ldr	r3, [pc, #336]	; (d48a0 <loop+0x244>)
   d474e:	4965      	ldr	r1, [pc, #404]	; (d48e4 <loop+0x288>)
   d4750:	681a      	ldr	r2, [r3, #0]
   d4752:	486b      	ldr	r0, [pc, #428]	; (d4900 <loop+0x2a4>)
   d4754:	f000 fc92 	bl	d507c <sprintf>
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4758:	783b      	ldrb	r3, [r7, #0]
  Particle.publish("sgLi1", sgLi1, PRIVATE);
   d475a:	4a63      	ldr	r2, [pc, #396]	; (d48e8 <loop+0x28c>)
   d475c:	4969      	ldr	r1, [pc, #420]	; (d4904 <loop+0x2a8>)
   d475e:	f88d 4000 	strb.w	r4, [sp]
   d4762:	a804      	add	r0, sp, #16
   d4764:	f7ff fcbb 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4768:	a805      	add	r0, sp, #20
   d476a:	f7ff ff61 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d476e:	783b      	ldrb	r3, [r7, #0]
  Particle.publish("sgLi2", sgLi2, PRIVATE);
   d4770:	4a5e      	ldr	r2, [pc, #376]	; (d48ec <loop+0x290>)
   d4772:	4965      	ldr	r1, [pc, #404]	; (d4908 <loop+0x2ac>)
   d4774:	f88d 4000 	strb.w	r4, [sp]
   d4778:	a804      	add	r0, sp, #16
   d477a:	f7ff fcb0 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d477e:	a805      	add	r0, sp, #20
   d4780:	f7ff ff56 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4784:	783b      	ldrb	r3, [r7, #0]
  Particle.publish("sgLo1", sgLo1, PRIVATE);
   d4786:	4a5a      	ldr	r2, [pc, #360]	; (d48f0 <loop+0x294>)
   d4788:	4960      	ldr	r1, [pc, #384]	; (d490c <loop+0x2b0>)
   d478a:	f88d 4000 	strb.w	r4, [sp]
   d478e:	a804      	add	r0, sp, #16
   d4790:	f7ff fca5 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4794:	a805      	add	r0, sp, #20
   d4796:	f7ff ff4b 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d479a:	783b      	ldrb	r3, [r7, #0]
  Particle.publish("sgRi1", sgRi1, PRIVATE);
   d479c:	4a55      	ldr	r2, [pc, #340]	; (d48f4 <loop+0x298>)
   d479e:	495c      	ldr	r1, [pc, #368]	; (d4910 <loop+0x2b4>)
   d47a0:	f88d 4000 	strb.w	r4, [sp]
   d47a4:	a804      	add	r0, sp, #16
   d47a6:	f7ff fc9a 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d47aa:	a805      	add	r0, sp, #20
   d47ac:	f7ff ff40 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47b0:	783b      	ldrb	r3, [r7, #0]
  Particle.publish("sgRi2", sgRi2, PRIVATE);
   d47b2:	4a51      	ldr	r2, [pc, #324]	; (d48f8 <loop+0x29c>)
   d47b4:	4957      	ldr	r1, [pc, #348]	; (d4914 <loop+0x2b8>)
   d47b6:	f88d 4000 	strb.w	r4, [sp]
   d47ba:	a804      	add	r0, sp, #16
   d47bc:	f7ff fc8f 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d47c0:	a805      	add	r0, sp, #20
   d47c2:	f7ff ff35 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47c6:	783b      	ldrb	r3, [r7, #0]
  Particle.publish("sgRo1", sgRo1, PRIVATE);
   d47c8:	4a4d      	ldr	r2, [pc, #308]	; (d4900 <loop+0x2a4>)
   d47ca:	4953      	ldr	r1, [pc, #332]	; (d4918 <loop+0x2bc>)
   d47cc:	f88d 4000 	strb.w	r4, [sp]
   d47d0:	a804      	add	r0, sp, #16
   d47d2:	f7ff fc84 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d47d6:	a805      	add	r0, sp, #20
   d47d8:	f7ff ff2a 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  
  // Update angle variables
  sprintf(angleStr1, "%f, %f, %f", angles1[0], angles1[1], angles1[2]);
   d47dc:	6830      	ldr	r0, [r6, #0]
   d47de:	f002 fc61 	bl	d70a4 <__aeabi_f2d>
   d47e2:	4680      	mov	r8, r0
   d47e4:	68b0      	ldr	r0, [r6, #8]
   d47e6:	4689      	mov	r9, r1
   d47e8:	f002 fc5c 	bl	d70a4 <__aeabi_f2d>
   d47ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d47f0:	6870      	ldr	r0, [r6, #4]
   d47f2:	f002 fc57 	bl	d70a4 <__aeabi_f2d>
   d47f6:	4642      	mov	r2, r8
   d47f8:	464b      	mov	r3, r9
   d47fa:	e9cd 0100 	strd	r0, r1, [sp]
   d47fe:	4947      	ldr	r1, [pc, #284]	; (d491c <loop+0x2c0>)
   d4800:	4847      	ldr	r0, [pc, #284]	; (d4920 <loop+0x2c4>)
   d4802:	f000 fc3b 	bl	d507c <sprintf>
  sprintf(angleStr2, "%f, %f, %f", angles2[0], angles2[1], angles2[2]);
   d4806:	6828      	ldr	r0, [r5, #0]
   d4808:	f002 fc4c 	bl	d70a4 <__aeabi_f2d>
   d480c:	4680      	mov	r8, r0
   d480e:	68a8      	ldr	r0, [r5, #8]
   d4810:	4689      	mov	r9, r1
   d4812:	f002 fc47 	bl	d70a4 <__aeabi_f2d>
   d4816:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d481a:	6868      	ldr	r0, [r5, #4]
   d481c:	f002 fc42 	bl	d70a4 <__aeabi_f2d>
   d4820:	4642      	mov	r2, r8
   d4822:	e9cd 0100 	strd	r0, r1, [sp]
   d4826:	464b      	mov	r3, r9
   d4828:	493c      	ldr	r1, [pc, #240]	; (d491c <loop+0x2c0>)
   d482a:	483e      	ldr	r0, [pc, #248]	; (d4924 <loop+0x2c8>)
   d482c:	f000 fc26 	bl	d507c <sprintf>
   d4830:	783b      	ldrb	r3, [r7, #0]
  Particle.publish("angleStr1", angleStr1, PRIVATE);
   d4832:	4a3b      	ldr	r2, [pc, #236]	; (d4920 <loop+0x2c4>)
   d4834:	493c      	ldr	r1, [pc, #240]	; (d4928 <loop+0x2cc>)
   d4836:	f88d 4000 	strb.w	r4, [sp]
   d483a:	a804      	add	r0, sp, #16
   d483c:	f7ff fc4f 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4840:	a805      	add	r0, sp, #20
   d4842:	f7ff fef5 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4846:	783b      	ldrb	r3, [r7, #0]
  Particle.publish("angleStr2", angleStr2, PRIVATE); 
   d4848:	4a36      	ldr	r2, [pc, #216]	; (d4924 <loop+0x2c8>)
   d484a:	4938      	ldr	r1, [pc, #224]	; (d492c <loop+0x2d0>)
   d484c:	f88d 4000 	strb.w	r4, [sp]
   d4850:	a804      	add	r0, sp, #16
   d4852:	f7ff fc44 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4856:	a805      	add	r0, sp, #20
   d4858:	f7ff feea 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  delay(timestep);  // Wait ten seconds
   d485c:	f242 7010 	movw	r0, #10000	; 0x2710
   d4860:	f000 fd6e 	bl	d5340 <delay>
        .gpio(D3, RISING)
        .duration(300s)
        .network(NETWORK_INTERFACE_CELLULAR);
  SystemSleepResult result = System.sleep(config);
  */
   d4864:	b007      	add	sp, #28
   d4866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d486a:	bf00      	nop
   d486c:	2003e0c4 	.word	0x2003e0c4
   d4870:	2003e0ec 	.word	0x2003e0ec
   d4874:	2003dd68 	.word	0x2003dd68
   d4878:	2003e338 	.word	0x2003e338
   d487c:	2003e390 	.word	0x2003e390
   d4880:	2003e0c8 	.word	0x2003e0c8
   d4884:	2003e13c 	.word	0x2003e13c
   d4888:	2003e198 	.word	0x2003e198
   d488c:	2003e010 	.word	0x2003e010
   d4890:	2003e0e4 	.word	0x2003e0e4
   d4894:	2003e1a4 	.word	0x2003e1a4
   d4898:	2003dffc 	.word	0x2003dffc
   d489c:	2003e074 	.word	0x2003e074
   d48a0:	2003ded4 	.word	0x2003ded4
   d48a4:	2003e22c 	.word	0x2003e22c
   d48a8:	2003e340 	.word	0x2003e340
   d48ac:	2003dfdc 	.word	0x2003dfdc
   d48b0:	2003e000 	.word	0x2003e000
   d48b4:	2003e230 	.word	0x2003e230
   d48b8:	2003dfe8 	.word	0x2003dfe8
   d48bc:	2003e004 	.word	0x2003e004
   d48c0:	2003de74 	.word	0x2003de74
   d48c4:	2003e06c 	.word	0x2003e06c
   d48c8:	2003e008 	.word	0x2003e008
   d48cc:	2003e23c 	.word	0x2003e23c
   d48d0:	2003dd84 	.word	0x2003dd84
   d48d4:	2003e070 	.word	0x2003e070
   d48d8:	2003e18c 	.word	0x2003e18c
   d48dc:	2003e00c 	.word	0x2003e00c
   d48e0:	2003dee4 	.word	0x2003dee4
   d48e4:	000d78f9 	.word	0x000d78f9
   d48e8:	2003dd70 	.word	0x2003dd70
   d48ec:	2003dd75 	.word	0x2003dd75
   d48f0:	2003dfd4 	.word	0x2003dfd4
   d48f4:	2003e19c 	.word	0x2003e19c
   d48f8:	2003de80 	.word	0x2003de80
   d48fc:	2003dd80 	.word	0x2003dd80
   d4900:	2003dff4 	.word	0x2003dff4
   d4904:	000d78fc 	.word	0x000d78fc
   d4908:	000d7902 	.word	0x000d7902
   d490c:	000d7908 	.word	0x000d7908
   d4910:	000d790e 	.word	0x000d790e
   d4914:	000d7914 	.word	0x000d7914
   d4918:	000d791a 	.word	0x000d791a
   d491c:	000d7920 	.word	0x000d7920
   d4920:	2003dea0 	.word	0x2003dea0
   d4924:	2003e1f8 	.word	0x2003e1f8
   d4928:	000d792b 	.word	0x000d792b
   d492c:	000d7935 	.word	0x000d7935
   d4930:	2003e33c 	.word	0x2003e33c
   d4934:	2003e0e8 	.word	0x2003e0e8
   d4938:	2003dd7c 	.word	0x2003dd7c
   d493c:	2003dd64 	.word	0x2003dd64

000d4940 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4940:	2300      	movs	r3, #0
   d4942:	2202      	movs	r2, #2
   d4944:	f000 bb6a 	b.w	d501c <spark_variable>

000d4948 <setup>:
// State variable to determine if first time running through filter
int startup1 = 0;
int startup2 = 0;

/*========== Setup ==========*/
void setup() {
   d4948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d494c:	b087      	sub	sp, #28
  Serial.begin(9600); // Initiate serial communication at 9600 BAUD
   d494e:	f001 f947 	bl	d5be0 <_Z16_fetch_usbserialv>
   d4952:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4956:	f001 f937 	bl	d5bc8 <_ZN9USBSerial5beginEl>
  Wire.begin();       // Initiate Wire library
   d495a:	f001 fcbd 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d495e:	f001 fa85 	bl	d5e6c <_ZN7TwoWire5beginEv>
  delay(100);         // delay 100 milliseconds for startup
   d4962:	2064      	movs	r0, #100	; 0x64
   d4964:	f000 fcec 	bl	d5340 <delay>
  
  // Configure MPU-6050's with default settings
  configSensor(MPU_SLAVE_ADDR_1, PWR_MGMT_1, NRML_PWR);
   d4968:	2200      	movs	r2, #0
   d496a:	216b      	movs	r1, #107	; 0x6b
   d496c:	2068      	movs	r0, #104	; 0x68
   d496e:	f7ff fbc7 	bl	d4100 <_Z12configSensoriii>
  configSensor(MPU_SLAVE_ADDR_2, PWR_MGMT_1, NRML_PWR);
   d4972:	2200      	movs	r2, #0
   d4974:	216b      	movs	r1, #107	; 0x6b
   d4976:	2069      	movs	r0, #105	; 0x69
   d4978:	f7ff fbc2 	bl	d4100 <_Z12configSensoriii>

  // Set up GPIO
  pinMode(Power, OUTPUT);   // Power pin for strain gauges
   d497c:	2101      	movs	r1, #1
   d497e:	2002      	movs	r0, #2
   d4980:	f001 fc4e 	bl	d6220 <pinMode>
  // Note: reading from analog pins does not require pinMode()
  digitalWrite(Power, HIGH);
   d4984:	2101      	movs	r1, #1
   d4986:	2002      	movs	r0, #2
   d4988:	f001 fc5b 	bl	d6242 <digitalWrite>
  
  // Particle Cloud Variables, Functions, and Publishing  
  // Update strain gauge variables
  sprintf(sgLi1, "%d", sgValLi1);
   d498c:	4c77      	ldr	r4, [pc, #476]	; (d4b6c <setup+0x224>)
   d498e:	f8df a228 	ldr.w	sl, [pc, #552]	; d4bb8 <setup+0x270>
   d4992:	4b77      	ldr	r3, [pc, #476]	; (d4b70 <setup+0x228>)
  sprintf(sgLi2, "%d", sgValLi2);
   d4994:	f8df 9224 	ldr.w	r9, [pc, #548]	; d4bbc <setup+0x274>
  // Note: reading from analog pins does not require pinMode()
  digitalWrite(Power, HIGH);
  
  // Particle Cloud Variables, Functions, and Publishing  
  // Update strain gauge variables
  sprintf(sgLi1, "%d", sgValLi1);
   d4998:	681a      	ldr	r2, [r3, #0]
  sprintf(sgLi2, "%d", sgValLi2);
  sprintf(sgLo1, "%d", sgValLo1);
   d499a:	f8df 8224 	ldr.w	r8, [pc, #548]	; d4bc0 <setup+0x278>
  sprintf(sgRi1, "%d", sgValRi1);
   d499e:	4f75      	ldr	r7, [pc, #468]	; (d4b74 <setup+0x22c>)
  sprintf(sgRi2, "%d", sgValRi2);
   d49a0:	4e75      	ldr	r6, [pc, #468]	; (d4b78 <setup+0x230>)
  sprintf(sgRo1, "%d", sgValRo1);
   d49a2:	f8df b220 	ldr.w	fp, [pc, #544]	; d4bc4 <setup+0x27c>
   d49a6:	4d75      	ldr	r5, [pc, #468]	; (d4b7c <setup+0x234>)
  // Note: reading from analog pins does not require pinMode()
  digitalWrite(Power, HIGH);
  
  // Particle Cloud Variables, Functions, and Publishing  
  // Update strain gauge variables
  sprintf(sgLi1, "%d", sgValLi1);
   d49a8:	4621      	mov	r1, r4
   d49aa:	4650      	mov	r0, sl
   d49ac:	f000 fb66 	bl	d507c <sprintf>
  sprintf(sgLi2, "%d", sgValLi2);
   d49b0:	4b73      	ldr	r3, [pc, #460]	; (d4b80 <setup+0x238>)
   d49b2:	4621      	mov	r1, r4
   d49b4:	681a      	ldr	r2, [r3, #0]
   d49b6:	4648      	mov	r0, r9
   d49b8:	f000 fb60 	bl	d507c <sprintf>
  sprintf(sgLo1, "%d", sgValLo1);
   d49bc:	4b71      	ldr	r3, [pc, #452]	; (d4b84 <setup+0x23c>)
   d49be:	4621      	mov	r1, r4
   d49c0:	681a      	ldr	r2, [r3, #0]
   d49c2:	4640      	mov	r0, r8
   d49c4:	f000 fb5a 	bl	d507c <sprintf>
  sprintf(sgRi1, "%d", sgValRi1);
   d49c8:	4b6f      	ldr	r3, [pc, #444]	; (d4b88 <setup+0x240>)
   d49ca:	4621      	mov	r1, r4
   d49cc:	681a      	ldr	r2, [r3, #0]
   d49ce:	4638      	mov	r0, r7
   d49d0:	f000 fb54 	bl	d507c <sprintf>
  sprintf(sgRi2, "%d", sgValRi2);
   d49d4:	4b6d      	ldr	r3, [pc, #436]	; (d4b8c <setup+0x244>)
   d49d6:	4621      	mov	r1, r4
   d49d8:	681a      	ldr	r2, [r3, #0]
   d49da:	4630      	mov	r0, r6
   d49dc:	f000 fb4e 	bl	d507c <sprintf>
  sprintf(sgRo1, "%d", sgValRo1);
   d49e0:	4b6b      	ldr	r3, [pc, #428]	; (d4b90 <setup+0x248>)
   d49e2:	4621      	mov	r1, r4
   d49e4:	681a      	ldr	r2, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d49e6:	2400      	movs	r4, #0
   d49e8:	4658      	mov	r0, fp
   d49ea:	f000 fb47 	bl	d507c <sprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d49ee:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgLi1", sgLi1, PRIVATE);
   d49f0:	4968      	ldr	r1, [pc, #416]	; (d4b94 <setup+0x24c>)
   d49f2:	f88d 4000 	strb.w	r4, [sp]
   d49f6:	4652      	mov	r2, sl
   d49f8:	a804      	add	r0, sp, #16
  Particle.publish("sgLi2", sgLi2, PRIVATE);
   d49fa:	f8df a1cc 	ldr.w	sl, [pc, #460]	; d4bc8 <setup+0x280>
  sprintf(sgLi2, "%d", sgValLi2);
  sprintf(sgLo1, "%d", sgValLo1);
  sprintf(sgRi1, "%d", sgValRi1);
  sprintf(sgRi2, "%d", sgValRi2);
  sprintf(sgRo1, "%d", sgValRo1);
  Particle.publish("sgLi1", sgLi1, PRIVATE);
   d49fe:	f7ff fb6e 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4a02:	a805      	add	r0, sp, #20
   d4a04:	f7ff fe14 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a08:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgLi2", sgLi2, PRIVATE);
   d4a0a:	f88d 4000 	strb.w	r4, [sp]
   d4a0e:	464a      	mov	r2, r9
   d4a10:	4651      	mov	r1, sl
   d4a12:	a804      	add	r0, sp, #16
  Particle.publish("sgLo1", sgLo1, PRIVATE);
   d4a14:	f8df 91b4 	ldr.w	r9, [pc, #436]	; d4bcc <setup+0x284>
  sprintf(sgLo1, "%d", sgValLo1);
  sprintf(sgRi1, "%d", sgValRi1);
  sprintf(sgRi2, "%d", sgValRi2);
  sprintf(sgRo1, "%d", sgValRo1);
  Particle.publish("sgLi1", sgLi1, PRIVATE);
  Particle.publish("sgLi2", sgLi2, PRIVATE);
   d4a18:	f7ff fb61 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4a1c:	a805      	add	r0, sp, #20
   d4a1e:	f7ff fe07 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a22:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgLo1", sgLo1, PRIVATE);
   d4a24:	f88d 4000 	strb.w	r4, [sp]
   d4a28:	4642      	mov	r2, r8
   d4a2a:	4649      	mov	r1, r9
   d4a2c:	a804      	add	r0, sp, #16
  Particle.publish("sgRi1", sgRi1, PRIVATE);
   d4a2e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d4bd0 <setup+0x288>
  sprintf(sgRi1, "%d", sgValRi1);
  sprintf(sgRi2, "%d", sgValRi2);
  sprintf(sgRo1, "%d", sgValRo1);
  Particle.publish("sgLi1", sgLi1, PRIVATE);
  Particle.publish("sgLi2", sgLi2, PRIVATE);
  Particle.publish("sgLo1", sgLo1, PRIVATE);
   d4a32:	f7ff fb54 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4a36:	a805      	add	r0, sp, #20
   d4a38:	f7ff fdfa 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a3c:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgRi1", sgRi1, PRIVATE);
   d4a3e:	f88d 4000 	strb.w	r4, [sp]
   d4a42:	463a      	mov	r2, r7
   d4a44:	4641      	mov	r1, r8
   d4a46:	a804      	add	r0, sp, #16
  Particle.publish("sgRi2", sgRi2, PRIVATE);
   d4a48:	4f53      	ldr	r7, [pc, #332]	; (d4b98 <setup+0x250>)
  sprintf(sgRi2, "%d", sgValRi2);
  sprintf(sgRo1, "%d", sgValRo1);
  Particle.publish("sgLi1", sgLi1, PRIVATE);
  Particle.publish("sgLi2", sgLi2, PRIVATE);
  Particle.publish("sgLo1", sgLo1, PRIVATE);
  Particle.publish("sgRi1", sgRi1, PRIVATE);
   d4a4a:	f7ff fb48 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4a4e:	a805      	add	r0, sp, #20
   d4a50:	f7ff fdee 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a54:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgRi2", sgRi2, PRIVATE);
   d4a56:	f88d 4000 	strb.w	r4, [sp]
   d4a5a:	4632      	mov	r2, r6
   d4a5c:	4639      	mov	r1, r7
   d4a5e:	a804      	add	r0, sp, #16
  Particle.publish("sgRo1", sgRo1, PRIVATE); 
   d4a60:	4e4e      	ldr	r6, [pc, #312]	; (d4b9c <setup+0x254>)
  sprintf(sgRo1, "%d", sgValRo1);
  Particle.publish("sgLi1", sgLi1, PRIVATE);
  Particle.publish("sgLi2", sgLi2, PRIVATE);
  Particle.publish("sgLo1", sgLo1, PRIVATE);
  Particle.publish("sgRi1", sgRi1, PRIVATE);
  Particle.publish("sgRi2", sgRi2, PRIVATE);
   d4a62:	f7ff fb3c 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4a66:	a805      	add	r0, sp, #20
   d4a68:	f7ff fde2 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a6c:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgRo1", sgRo1, PRIVATE); 
   d4a6e:	f88d 4000 	strb.w	r4, [sp]
   d4a72:	465a      	mov	r2, fp
   d4a74:	4631      	mov	r1, r6
   d4a76:	a804      	add	r0, sp, #16
   d4a78:	f7ff fb31 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4a7c:	a805      	add	r0, sp, #20
   d4a7e:	f7ff fdd7 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.variable("sgLi1", sgValLi1); 
   d4a82:	493b      	ldr	r1, [pc, #236]	; (d4b70 <setup+0x228>)
   d4a84:	4843      	ldr	r0, [pc, #268]	; (d4b94 <setup+0x24c>)
  Particle.variable("sgRi2", sgValRi2); 
  Particle.variable("sgRo1", sgValRo1); 

  // Update angle variables
  sprintf(angleStr1, "%f, %f, %f", angles1[0], angles1[1], angles1[2]);
  sprintf(angleStr2, "%f, %f, %f", angles2[0], angles2[1], angles2[2]);
   d4a86:	f8df b14c 	ldr.w	fp, [pc, #332]	; d4bd4 <setup+0x28c>
  Particle.publish("sgLi2", sgLi2, PRIVATE);
  Particle.publish("sgLo1", sgLo1, PRIVATE);
  Particle.publish("sgRi1", sgRi1, PRIVATE);
  Particle.publish("sgRi2", sgRi2, PRIVATE);
  Particle.publish("sgRo1", sgRo1, PRIVATE); 
  Particle.variable("sgLi1", sgValLi1); 
   d4a8a:	f7ff ff59 	bl	d4940 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>
  Particle.variable("sgLi2", sgValLi2); 
   d4a8e:	493c      	ldr	r1, [pc, #240]	; (d4b80 <setup+0x238>)
   d4a90:	4650      	mov	r0, sl
   d4a92:	f7ff ff55 	bl	d4940 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>
  Particle.variable("sgLo1", sgValLo1); 
   d4a96:	493b      	ldr	r1, [pc, #236]	; (d4b84 <setup+0x23c>)
  Particle.variable("sgRi1", sgValRi1); 
  Particle.variable("sgRi2", sgValRi2); 
  Particle.variable("sgRo1", sgValRo1); 

  // Update angle variables
  sprintf(angleStr1, "%f, %f, %f", angles1[0], angles1[1], angles1[2]);
   d4a98:	f8df a13c 	ldr.w	sl, [pc, #316]	; d4bd8 <setup+0x290>
  Particle.publish("sgRi1", sgRi1, PRIVATE);
  Particle.publish("sgRi2", sgRi2, PRIVATE);
  Particle.publish("sgRo1", sgRo1, PRIVATE); 
  Particle.variable("sgLi1", sgValLi1); 
  Particle.variable("sgLi2", sgValLi2); 
  Particle.variable("sgLo1", sgValLo1); 
   d4a9c:	4648      	mov	r0, r9
   d4a9e:	f7ff ff4f 	bl	d4940 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>
  Particle.variable("sgRi1", sgValRi1); 
   d4aa2:	4939      	ldr	r1, [pc, #228]	; (d4b88 <setup+0x240>)
   d4aa4:	4640      	mov	r0, r8
   d4aa6:	f7ff ff4b 	bl	d4940 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>
  Particle.variable("sgRi2", sgValRi2); 
   d4aaa:	4938      	ldr	r1, [pc, #224]	; (d4b8c <setup+0x244>)
   d4aac:	4638      	mov	r0, r7
   d4aae:	f7ff ff47 	bl	d4940 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>
  Particle.variable("sgRo1", sgValRo1); 
   d4ab2:	4937      	ldr	r1, [pc, #220]	; (d4b90 <setup+0x248>)

  // Update angle variables
  sprintf(angleStr1, "%f, %f, %f", angles1[0], angles1[1], angles1[2]);
   d4ab4:	4f3a      	ldr	r7, [pc, #232]	; (d4ba0 <setup+0x258>)
  Particle.variable("sgLi1", sgValLi1); 
  Particle.variable("sgLi2", sgValLi2); 
  Particle.variable("sgLo1", sgValLo1); 
  Particle.variable("sgRi1", sgValRi1); 
  Particle.variable("sgRi2", sgValRi2); 
  Particle.variable("sgRo1", sgValRo1); 
   d4ab6:	4630      	mov	r0, r6
   d4ab8:	f7ff ff42 	bl	d4940 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>

  // Update angle variables
  sprintf(angleStr1, "%f, %f, %f", angles1[0], angles1[1], angles1[2]);
   d4abc:	f8da 0000 	ldr.w	r0, [sl]
   d4ac0:	4e38      	ldr	r6, [pc, #224]	; (d4ba4 <setup+0x25c>)
   d4ac2:	f002 faef 	bl	d70a4 <__aeabi_f2d>
   d4ac6:	4680      	mov	r8, r0
   d4ac8:	f8da 0008 	ldr.w	r0, [sl, #8]
   d4acc:	4689      	mov	r9, r1
   d4ace:	f002 fae9 	bl	d70a4 <__aeabi_f2d>
   d4ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4ad6:	f8da 0004 	ldr.w	r0, [sl, #4]
  sprintf(angleStr2, "%f, %f, %f", angles2[0], angles2[1], angles2[2]);
   d4ada:	f8df a100 	ldr.w	sl, [pc, #256]	; d4bdc <setup+0x294>
  Particle.variable("sgRi1", sgValRi1); 
  Particle.variable("sgRi2", sgValRi2); 
  Particle.variable("sgRo1", sgValRo1); 

  // Update angle variables
  sprintf(angleStr1, "%f, %f, %f", angles1[0], angles1[1], angles1[2]);
   d4ade:	f002 fae1 	bl	d70a4 <__aeabi_f2d>
   d4ae2:	4642      	mov	r2, r8
   d4ae4:	464b      	mov	r3, r9
   d4ae6:	e9cd 0100 	strd	r0, r1, [sp]
   d4aea:	4639      	mov	r1, r7
   d4aec:	4630      	mov	r0, r6
   d4aee:	f000 fac5 	bl	d507c <sprintf>
  sprintf(angleStr2, "%f, %f, %f", angles2[0], angles2[1], angles2[2]);
   d4af2:	f8db 0000 	ldr.w	r0, [fp]
   d4af6:	f002 fad5 	bl	d70a4 <__aeabi_f2d>
   d4afa:	4680      	mov	r8, r0
   d4afc:	f8db 0008 	ldr.w	r0, [fp, #8]
   d4b00:	4689      	mov	r9, r1
   d4b02:	f002 facf 	bl	d70a4 <__aeabi_f2d>
   d4b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4b0a:	f8db 0004 	ldr.w	r0, [fp, #4]
   d4b0e:	f002 fac9 	bl	d70a4 <__aeabi_f2d>
   d4b12:	4642      	mov	r2, r8
   d4b14:	e9cd 0100 	strd	r0, r1, [sp]
   d4b18:	464b      	mov	r3, r9
   d4b1a:	4639      	mov	r1, r7
   d4b1c:	4650      	mov	r0, sl
   d4b1e:	f000 faad 	bl	d507c <sprintf>
   d4b22:	4623      	mov	r3, r4
   d4b24:	4631      	mov	r1, r6
   d4b26:	2204      	movs	r2, #4
   d4b28:	481f      	ldr	r0, [pc, #124]	; (d4ba8 <setup+0x260>)
   d4b2a:	f000 fa77 	bl	d501c <spark_variable>
   d4b2e:	4623      	mov	r3, r4
   d4b30:	4651      	mov	r1, sl
   d4b32:	2204      	movs	r2, #4
   d4b34:	481d      	ldr	r0, [pc, #116]	; (d4bac <setup+0x264>)
   d4b36:	f000 fa71 	bl	d501c <spark_variable>
   d4b3a:	782b      	ldrb	r3, [r5, #0]
  Particle.variable("angles1", angleStr1);
  Particle.variable("angles2", angleStr2);
  Particle.publish("angleStr1", angleStr1, PRIVATE);
   d4b3c:	491c      	ldr	r1, [pc, #112]	; (d4bb0 <setup+0x268>)
   d4b3e:	f88d 4000 	strb.w	r4, [sp]
   d4b42:	4632      	mov	r2, r6
   d4b44:	a804      	add	r0, sp, #16
   d4b46:	f7ff faca 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4b4a:	a805      	add	r0, sp, #20
   d4b4c:	f7ff fd70 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b50:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("angleStr2", angleStr2, PRIVATE);
   d4b52:	4918      	ldr	r1, [pc, #96]	; (d4bb4 <setup+0x26c>)
   d4b54:	f88d 4000 	strb.w	r4, [sp]
   d4b58:	4652      	mov	r2, sl
   d4b5a:	a804      	add	r0, sp, #16
   d4b5c:	f7ff fabf 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4b60:	a805      	add	r0, sp, #20
   d4b62:	f7ff fd65 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4b66:	b007      	add	sp, #28
   d4b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b6c:	000d78f9 	.word	0x000d78f9
   d4b70:	2003e33c 	.word	0x2003e33c
   d4b74:	2003e19c 	.word	0x2003e19c
   d4b78:	2003de80 	.word	0x2003de80
   d4b7c:	2003dd80 	.word	0x2003dd80
   d4b80:	2003e0e8 	.word	0x2003e0e8
   d4b84:	2003dd7c 	.word	0x2003dd7c
   d4b88:	2003dd64 	.word	0x2003dd64
   d4b8c:	2003dd68 	.word	0x2003dd68
   d4b90:	2003ded4 	.word	0x2003ded4
   d4b94:	000d78fc 	.word	0x000d78fc
   d4b98:	000d7914 	.word	0x000d7914
   d4b9c:	000d791a 	.word	0x000d791a
   d4ba0:	000d7920 	.word	0x000d7920
   d4ba4:	2003dea0 	.word	0x2003dea0
   d4ba8:	000d793f 	.word	0x000d793f
   d4bac:	000d7947 	.word	0x000d7947
   d4bb0:	000d792b 	.word	0x000d792b
   d4bb4:	000d7935 	.word	0x000d7935
   d4bb8:	2003dd70 	.word	0x2003dd70
   d4bbc:	2003dd75 	.word	0x2003dd75
   d4bc0:	2003dfd4 	.word	0x2003dfd4
   d4bc4:	2003dff4 	.word	0x2003dff4
   d4bc8:	000d7902 	.word	0x000d7902
   d4bcc:	000d7908 	.word	0x000d7908
   d4bd0:	000d790e 	.word	0x000d790e
   d4bd4:	2003e18c 	.word	0x2003e18c
   d4bd8:	2003e390 	.word	0x2003e390
   d4bdc:	2003e1f8 	.word	0x2003e1f8

000d4be0 <_GLOBAL__sub_I_result>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4be0:	4b16      	ldr	r3, [pc, #88]	; (d4c3c <_GLOBAL__sub_I_result+0x5c>)
        .gpio(D3, RISING)
        .duration(300s)
        .network(NETWORK_INTERFACE_CELLULAR);
  SystemSleepResult result = System.sleep(config);
  */
   d4be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4be6:	4c16      	ldr	r4, [pc, #88]	; (d4c40 <_GLOBAL__sub_I_result+0x60>)
#include "Wire.h"                 // This library allows I2C communication
#include "PeripheralFunctions.h"  // Holds all peripheral functions for reading in data from MPU-6050, etc.

/*========== Device System Settings ==========*/
//SYSTEM_MODE(SEMI_AUTOMATIC);  // Uncomment this line when attempting to test locally 
SYSTEM_MODE(AUTOMATIC);       // Comment out this line when attempting to test locally
   d4be8:	4f16      	ldr	r7, [pc, #88]	; (d4c44 <_GLOBAL__sub_I_result+0x64>)
   d4bea:	2601      	movs	r6, #1
   d4bec:	2500      	movs	r5, #0
   d4bee:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4bf0:	f000 f840 	bl	d4c74 <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4bf8:	8163      	strh	r3, [r4, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4bfa:	6025      	str	r5, [r4, #0]
   d4bfc:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4bfe:	71a5      	strb	r5, [r4, #6]
   d4c00:	8125      	strh	r5, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c02:	4630      	mov	r0, r6
   d4c04:	f000 f986 	bl	d4f14 <set_system_mode>
   d4c08:	4620      	mov	r0, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4c0a:	4c0f      	ldr	r4, [pc, #60]	; (d4c48 <_GLOBAL__sub_I_result+0x68>)
   d4c0c:	490f      	ldr	r1, [pc, #60]	; (d4c4c <_GLOBAL__sub_I_result+0x6c>)
   d4c0e:	463a      	mov	r2, r7
   d4c10:	f001 fb88 	bl	d6324 <__aeabi_atexit>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4c14:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4c18:	1d20      	adds	r0, r4, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4c1a:	4642      	mov	r2, r8
   d4c1c:	4629      	mov	r1, r5
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4c1e:	6020      	str	r0, [r4, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4c20:	f002 fdad 	bl	d777e <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d4c24:	2302      	movs	r3, #2
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4c26:	7526      	strb	r6, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d4c28:	f8a4 8004 	strh.w	r8, [r4, #4]
        config_.version = HAL_SLEEP_VERSION;
   d4c2c:	80e3      	strh	r3, [r4, #6]
SystemSleepConfiguration config;    // Create instantiation of sleep configuration for use when making calls to sleep
   d4c2e:	463a      	mov	r2, r7
   d4c30:	4620      	mov	r0, r4
   d4c32:	4907      	ldr	r1, [pc, #28]	; (d4c50 <_GLOBAL__sub_I_result+0x70>)
        .gpio(D3, RISING)
        .duration(300s)
        .network(NETWORK_INTERFACE_CELLULAR);
  SystemSleepResult result = System.sleep(config);
  */
   d4c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#include "PeripheralFunctions.h"  // Holds all peripheral functions for reading in data from MPU-6050, etc.

/*========== Device System Settings ==========*/
//SYSTEM_MODE(SEMI_AUTOMATIC);  // Uncomment this line when attempting to test locally 
SYSTEM_MODE(AUTOMATIC);       // Comment out this line when attempting to test locally
SystemSleepConfiguration config;    // Create instantiation of sleep configuration for use when making calls to sleep
   d4c38:	f001 bb74 	b.w	d6324 <__aeabi_atexit>
   d4c3c:	2003dd80 	.word	0x2003dd80
   d4c40:	2003e0d8 	.word	0x2003e0d8
   d4c44:	2003dd60 	.word	0x2003dd60
   d4c48:	2003de88 	.word	0x2003de88
   d4c4c:	000d40cf 	.word	0x000d40cf
   d4c50:	000d40b7 	.word	0x000d40b7

000d4c54 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <netdb_freeaddrinfo+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	689b      	ldr	r3, [r3, #8]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	00030268 	.word	0x00030268

000d4c64 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <netdb_getaddrinfo+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	68db      	ldr	r3, [r3, #12]
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	00030268 	.word	0x00030268

000d4c74 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <HAL_Pin_Map+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	681b      	ldr	r3, [r3, #0]
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	0003022c 	.word	0x0003022c

000d4c84 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <HAL_Validate_Pin_Function+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	685b      	ldr	r3, [r3, #4]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	0003022c 	.word	0x0003022c

000d4c94 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <HAL_Pin_Mode+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	689b      	ldr	r3, [r3, #8]
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	0003022c 	.word	0x0003022c

000d4ca4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <HAL_Get_Pin_Mode+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	68db      	ldr	r3, [r3, #12]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	0003022c 	.word	0x0003022c

000d4cb4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <HAL_GPIO_Write+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	691b      	ldr	r3, [r3, #16]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	0003022c 	.word	0x0003022c

000d4cc4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <HAL_ADC_Read+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	0003022c 	.word	0x0003022c

000d4cd4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <HAL_SPI_Init+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	69db      	ldr	r3, [r3, #28]
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030230 	.word	0x00030230

000d4ce4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <HAL_SPI_Is_Enabled+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	6a1b      	ldr	r3, [r3, #32]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030230 	.word	0x00030230

000d4cf4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <HAL_RNG_GetRandomNumber+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	685b      	ldr	r3, [r3, #4]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030218 	.word	0x00030218

000d4d04 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	695b      	ldr	r3, [r3, #20]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030218 	.word	0x00030218

000d4d14 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <os_thread_is_current+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	689b      	ldr	r3, [r3, #8]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030248 	.word	0x00030248

000d4d24 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <os_thread_join+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	691b      	ldr	r3, [r3, #16]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030248 	.word	0x00030248

000d4d34 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <os_thread_cleanup+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	695b      	ldr	r3, [r3, #20]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030248 	.word	0x00030248

000d4d44 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <os_mutex_recursive_create+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030248 	.word	0x00030248

000d4d54 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <os_mutex_recursive_destroy+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030248 	.word	0x00030248

000d4d64 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <inet_inet_ntop+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	695b      	ldr	r3, [r3, #20]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030264 	.word	0x00030264

000d4d74 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <HAL_USART_Init+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	681b      	ldr	r3, [r3, #0]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	0003023c 	.word	0x0003023c

000d4d84 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <HAL_USART_Write_Data+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	68db      	ldr	r3, [r3, #12]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003023c 	.word	0x0003023c

000d4d94 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <HAL_USART_Available_Data+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	691b      	ldr	r3, [r3, #16]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003023c 	.word	0x0003023c

000d4da4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <HAL_USART_Read_Data+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	695b      	ldr	r3, [r3, #20]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	0003023c 	.word	0x0003023c

000d4db4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <HAL_USART_Peek_Data+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	699b      	ldr	r3, [r3, #24]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	0003023c 	.word	0x0003023c

000d4dc4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <HAL_USART_Flush_Data+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	69db      	ldr	r3, [r3, #28]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	0003023c 	.word	0x0003023c

000d4dd4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <HAL_USART_Is_Enabled+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6a1b      	ldr	r3, [r3, #32]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	0003023c 	.word	0x0003023c

000d4de4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <HAL_USART_Available_Data_For_Write+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	0003023c 	.word	0x0003023c

000d4df4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <HAL_I2C_Begin+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	68db      	ldr	r3, [r3, #12]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030228 	.word	0x00030228

000d4e04 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <HAL_I2C_Begin_Transmission+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	699b      	ldr	r3, [r3, #24]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030228 	.word	0x00030228

000d4e14 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_I2C_End_Transmission+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	69db      	ldr	r3, [r3, #28]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030228 	.word	0x00030228

000d4e24 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_I2C_Write_Data+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	6a1b      	ldr	r3, [r3, #32]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030228 	.word	0x00030228

000d4e34 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_I2C_Available_Data+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030228 	.word	0x00030228

000d4e44 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_I2C_Read_Data+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030228 	.word	0x00030228

000d4e54 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_I2C_Peek_Data+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030228 	.word	0x00030228

000d4e64 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_I2C_Flush_Data+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030228 	.word	0x00030228

000d4e74 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <HAL_I2C_Is_Enabled+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030228 	.word	0x00030228

000d4e84 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_I2C_Init+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030228 	.word	0x00030228

000d4e94 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <HAL_I2C_Request_Data_Ex+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030228 	.word	0x00030228

000d4ea4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_USB_USART_Init+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	681b      	ldr	r3, [r3, #0]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	0003024c 	.word	0x0003024c

000d4eb4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <HAL_USB_USART_Begin+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	685b      	ldr	r3, [r3, #4]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	0003024c 	.word	0x0003024c

000d4ec4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <HAL_USB_USART_Available_Data+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	691b      	ldr	r3, [r3, #16]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	0003024c 	.word	0x0003024c

000d4ed4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	695b      	ldr	r3, [r3, #20]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	0003024c 	.word	0x0003024c

000d4ee4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <HAL_USB_USART_Receive_Data+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	699b      	ldr	r3, [r3, #24]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	0003024c 	.word	0x0003024c

000d4ef4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <HAL_USB_USART_Send_Data+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	69db      	ldr	r3, [r3, #28]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	0003024c 	.word	0x0003024c

000d4f04 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <HAL_USB_USART_Flush_Data+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6a1b      	ldr	r3, [r3, #32]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	0003024c 	.word	0x0003024c

000d4f14 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <set_system_mode+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	685b      	ldr	r3, [r3, #4]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030220 	.word	0x00030220

000d4f24 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <system_delay_ms+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	695b      	ldr	r3, [r3, #20]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030220 	.word	0x00030220

000d4f34 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <application_thread_current+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030220 	.word	0x00030220

000d4f44 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <application_thread_invoke+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030220 	.word	0x00030220

000d4f54 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b03      	ldr	r3, [pc, #12]	; (d4f64 <system_ctrl_set_app_request_handler+0x10>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4f5e:	9301      	str	r3, [sp, #4]
   d4f60:	bd08      	pop	{r3, pc}
   d4f62:	0000      	.short	0x0000
   d4f64:	00030220 	.word	0x00030220

000d4f68 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f68:	b508      	push	{r3, lr}
   d4f6a:	4b03      	ldr	r3, [pc, #12]	; (d4f78 <system_ctrl_set_result+0x10>)
   d4f6c:	681b      	ldr	r3, [r3, #0]
   d4f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f72:	9301      	str	r3, [sp, #4]
   d4f74:	bd08      	pop	{r3, pc}
   d4f76:	0000      	.short	0x0000
   d4f78:	00030220 	.word	0x00030220

000d4f7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <network_connect+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	685b      	ldr	r3, [r3, #4]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030240 	.word	0x00030240

000d4f8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <network_connecting+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	689b      	ldr	r3, [r3, #8]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030240 	.word	0x00030240

000d4f9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <network_disconnect+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	68db      	ldr	r3, [r3, #12]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030240 	.word	0x00030240

000d4fac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <network_ready+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	691b      	ldr	r3, [r3, #16]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030240 	.word	0x00030240

000d4fbc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <network_on+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	695b      	ldr	r3, [r3, #20]
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030240 	.word	0x00030240

000d4fcc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <network_off+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	699b      	ldr	r3, [r3, #24]
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	00030240 	.word	0x00030240

000d4fdc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <network_listen+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	69db      	ldr	r3, [r3, #28]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030240 	.word	0x00030240

000d4fec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <network_listening+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	6a1b      	ldr	r3, [r3, #32]
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030240 	.word	0x00030240

000d4ffc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <network_set_listen_timeout+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030240 	.word	0x00030240

000d500c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <network_get_listen_timeout+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030240 	.word	0x00030240

000d501c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <spark_variable+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	681b      	ldr	r3, [r3, #0]
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030244 	.word	0x00030244

000d502c <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <spark_cloud_flag_connected+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	695b      	ldr	r3, [r3, #20]
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030244 	.word	0x00030244

000d503c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <spark_send_event+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	6a1b      	ldr	r3, [r3, #32]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030244 	.word	0x00030244

000d504c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030244 	.word	0x00030244

000d505c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <malloc+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	681b      	ldr	r3, [r3, #0]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	0003021c 	.word	0x0003021c

000d506c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <free+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	685b      	ldr	r3, [r3, #4]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	0003021c 	.word	0x0003021c

000d507c <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <sprintf+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	68db      	ldr	r3, [r3, #12]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	0003021c 	.word	0x0003021c

000d508c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <vsnprintf+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	0003021c 	.word	0x0003021c

000d509c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <abort+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	0003021c 	.word	0x0003021c

000d50ac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <_malloc_r+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	0003021c 	.word	0x0003021c

000d50bc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <__errno+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	0003021c 	.word	0x0003021c

000d50cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50cc:	2200      	movs	r2, #0
   d50ce:	4611      	mov	r1, r2
   d50d0:	6840      	ldr	r0, [r0, #4]
   d50d2:	f7ff bf8b 	b.w	d4fec <network_listening>

000d50d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d50d6:	2200      	movs	r2, #0
   d50d8:	4611      	mov	r1, r2
   d50da:	6840      	ldr	r0, [r0, #4]
   d50dc:	f7ff bf96 	b.w	d500c <network_get_listen_timeout>

000d50e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d50e0:	2200      	movs	r2, #0
   d50e2:	6840      	ldr	r0, [r0, #4]
   d50e4:	f7ff bf8a 	b.w	d4ffc <network_set_listen_timeout>

000d50e8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d50e8:	2200      	movs	r2, #0
   d50ea:	f081 0101 	eor.w	r1, r1, #1
   d50ee:	6840      	ldr	r0, [r0, #4]
   d50f0:	f7ff bf74 	b.w	d4fdc <network_listen>

000d50f4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d50f4:	2300      	movs	r3, #0
   d50f6:	461a      	mov	r2, r3
   d50f8:	4619      	mov	r1, r3
   d50fa:	6840      	ldr	r0, [r0, #4]
   d50fc:	f7ff bf66 	b.w	d4fcc <network_off>

000d5100 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5100:	2300      	movs	r3, #0
   d5102:	461a      	mov	r2, r3
   d5104:	4619      	mov	r1, r3
   d5106:	6840      	ldr	r0, [r0, #4]
   d5108:	f7ff bf58 	b.w	d4fbc <network_on>

000d510c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d510c:	2200      	movs	r2, #0
   d510e:	4611      	mov	r1, r2
   d5110:	6840      	ldr	r0, [r0, #4]
   d5112:	f7ff bf4b 	b.w	d4fac <network_ready>

000d5116 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5116:	2200      	movs	r2, #0
   d5118:	4611      	mov	r1, r2
   d511a:	6840      	ldr	r0, [r0, #4]
   d511c:	f7ff bf36 	b.w	d4f8c <network_connecting>

000d5120 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5120:	2200      	movs	r2, #0
   d5122:	2102      	movs	r1, #2
   d5124:	6840      	ldr	r0, [r0, #4]
   d5126:	f7ff bf39 	b.w	d4f9c <network_disconnect>

000d512a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d512a:	2300      	movs	r3, #0
   d512c:	461a      	mov	r2, r3
   d512e:	6840      	ldr	r0, [r0, #4]
   d5130:	f7ff bf24 	b.w	d4f7c <network_connect>

000d5134 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5134:	4b02      	ldr	r3, [pc, #8]	; (d5140 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5136:	2203      	movs	r2, #3
   d5138:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d513a:	4a02      	ldr	r2, [pc, #8]	; (d5144 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d513c:	601a      	str	r2, [r3, #0]
   d513e:	4770      	bx	lr
   d5140:	2003e3a8 	.word	0x2003e3a8
   d5144:	000d7958 	.word	0x000d7958

000d5148 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5148:	b510      	push	{r4, lr}
   d514a:	4604      	mov	r4, r0
{
    _spi = spi;
   d514c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d514e:	4608      	mov	r0, r1
   d5150:	f7ff fdc0 	bl	d4cd4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5154:	2300      	movs	r3, #0
   d5156:	6063      	str	r3, [r4, #4]
}
   d5158:	4620      	mov	r0, r4
   d515a:	bd10      	pop	{r4, pc}

000d515c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d515c:	7800      	ldrb	r0, [r0, #0]
   d515e:	f7ff bdc1 	b.w	d4ce4 <HAL_SPI_Is_Enabled>
	...

000d5164 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5164:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5166:	4c09      	ldr	r4, [pc, #36]	; (d518c <_GLOBAL__sub_I_System+0x28>)
   d5168:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d516a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d516e:	6020      	str	r0, [r4, #0]
   d5170:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5172:	71a0      	strb	r0, [r4, #6]
   d5174:	8120      	strh	r0, [r4, #8]
   d5176:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5178:	f7ff fecc 	bl	d4f14 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d517c:	4620      	mov	r0, r4
   d517e:	4a04      	ldr	r2, [pc, #16]	; (d5190 <_GLOBAL__sub_I_System+0x2c>)
   d5180:	4904      	ldr	r1, [pc, #16]	; (d5194 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5186:	f001 b8cd 	b.w	d6324 <__aeabi_atexit>
   d518a:	bf00      	nop
   d518c:	2003e3b0 	.word	0x2003e3b0
   d5190:	2003dd60 	.word	0x2003dd60
   d5194:	000d40cf 	.word	0x000d40cf

000d5198 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5198:	b510      	push	{r4, lr}
   d519a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d519c:	6800      	ldr	r0, [r0, #0]
   d519e:	b108      	cbz	r0, d51a4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d51a0:	f7ff fdd8 	bl	d4d54 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d51a4:	4620      	mov	r0, r4
   d51a6:	bd10      	pop	{r4, pc}

000d51a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d51a8:	680b      	ldr	r3, [r1, #0]
   d51aa:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d51ac:	b113      	cbz	r3, d51b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d51ae:	685a      	ldr	r2, [r3, #4]
   d51b0:	3201      	adds	r2, #1
   d51b2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d51b4:	4770      	bx	lr
	...

000d51b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d51b8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d51ba:	4c06      	ldr	r4, [pc, #24]	; (d51d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d51bc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d51be:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d51c0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d51c2:	f7ff fdbf 	bl	d4d44 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d51c6:	4620      	mov	r0, r4
   d51c8:	4a03      	ldr	r2, [pc, #12]	; (d51d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d51ca:	4904      	ldr	r1, [pc, #16]	; (d51dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d51cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d51d0:	f001 b8a8 	b.w	d6324 <__aeabi_atexit>
   d51d4:	2003e3bc 	.word	0x2003e3bc
   d51d8:	2003dd60 	.word	0x2003dd60
   d51dc:	000d5199 	.word	0x000d5199

000d51e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d51e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51e2:	4606      	mov	r6, r0
   d51e4:	460d      	mov	r5, r1
   d51e6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d51e8:	2400      	movs	r4, #0
  while (size--) {
   d51ea:	42bd      	cmp	r5, r7
   d51ec:	d00c      	beq.n	d5208 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d51ee:	6833      	ldr	r3, [r6, #0]
   d51f0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d51f4:	689b      	ldr	r3, [r3, #8]
   d51f6:	4630      	mov	r0, r6
   d51f8:	4798      	blx	r3
     if (chunk>=0)
   d51fa:	2800      	cmp	r0, #0
   d51fc:	db01      	blt.n	d5202 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d51fe:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5200:	e7f3      	b.n	d51ea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5202:	2c00      	cmp	r4, #0
   d5204:	bf08      	it	eq
   d5206:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5208:	4620      	mov	r0, r4
   d520a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d520c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d520c:	b570      	push	{r4, r5, r6, lr}
   d520e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5210:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5212:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5214:	b149      	cbz	r1, d522a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5216:	f002 fafe 	bl	d7816 <strlen>
   d521a:	682b      	ldr	r3, [r5, #0]
   d521c:	4602      	mov	r2, r0
   d521e:	4621      	mov	r1, r4
   d5220:	4628      	mov	r0, r5
   d5222:	68db      	ldr	r3, [r3, #12]
    }
   d5224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5228:	4718      	bx	r3
    }
   d522a:	bd70      	pop	{r4, r5, r6, pc}

000d522c <_ZN5Print5printEPKc>:
   d522c:	b508      	push	{r3, lr}
   d522e:	f7ff ffed 	bl	d520c <_ZN5Print5writeEPKc>
   d5232:	bd08      	pop	{r3, pc}

000d5234 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5234:	6803      	ldr	r3, [r0, #0]
   d5236:	689b      	ldr	r3, [r3, #8]
   d5238:	4718      	bx	r3

000d523a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d523a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d523c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d523e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5240:	f7ff fff8 	bl	d5234 <_ZN5Print5printEc>
  n += print('\n');
   d5244:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5246:	4604      	mov	r4, r0
  n += print('\n');
   d5248:	4628      	mov	r0, r5
   d524a:	f7ff fff3 	bl	d5234 <_ZN5Print5printEc>
  return n;
}
   d524e:	4420      	add	r0, r4
   d5250:	bd38      	pop	{r3, r4, r5, pc}

000d5252 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5252:	b538      	push	{r3, r4, r5, lr}
   d5254:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5256:	f7ff ffd9 	bl	d520c <_ZN5Print5writeEPKc>
   d525a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d525c:	4628      	mov	r0, r5
   d525e:	f7ff ffec 	bl	d523a <_ZN5Print7printlnEv>
  return n;
}
   d5262:	4420      	add	r0, r4
   d5264:	bd38      	pop	{r3, r4, r5, pc}

000d5266 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5266:	b530      	push	{r4, r5, lr}
   d5268:	b08b      	sub	sp, #44	; 0x2c
   d526a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d526c:	2100      	movs	r1, #0
   d526e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5272:	2a01      	cmp	r2, #1
   d5274:	bf98      	it	ls
   d5276:	220a      	movls	r2, #10
   d5278:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d527c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5280:	fb05 3312 	mls	r3, r5, r2, r3
   d5284:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5288:	2b09      	cmp	r3, #9
   d528a:	bf94      	ite	ls
   d528c:	3330      	addls	r3, #48	; 0x30
   d528e:	3337      	addhi	r3, #55	; 0x37
   d5290:	b2db      	uxtb	r3, r3
   d5292:	4621      	mov	r1, r4
   d5294:	f804 3901 	strb.w	r3, [r4], #-1
   d5298:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d529a:	2d00      	cmp	r5, #0
   d529c:	d1ee      	bne.n	d527c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d529e:	f7ff ffb5 	bl	d520c <_ZN5Print5writeEPKc>
}
   d52a2:	b00b      	add	sp, #44	; 0x2c
   d52a4:	bd30      	pop	{r4, r5, pc}

000d52a6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d52a6:	b40c      	push	{r2, r3}
   d52a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d52ac:	b087      	sub	sp, #28
   d52ae:	af00      	add	r7, sp, #0
   d52b0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d52b4:	4605      	mov	r5, r0
   d52b6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d52ba:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d52bc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d52be:	4623      	mov	r3, r4
   d52c0:	464a      	mov	r2, r9
   d52c2:	2114      	movs	r1, #20
   d52c4:	1d38      	adds	r0, r7, #4
   d52c6:	f7ff fee1 	bl	d508c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d52ca:	2813      	cmp	r0, #19
   d52cc:	d805      	bhi.n	d52da <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d52ce:	1d39      	adds	r1, r7, #4
   d52d0:	4628      	mov	r0, r5
   d52d2:	f7ff ff9b 	bl	d520c <_ZN5Print5writeEPKc>
   d52d6:	4604      	mov	r4, r0
   d52d8:	e013      	b.n	d5302 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d52da:	f100 0308 	add.w	r3, r0, #8
   d52de:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d52e2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d52e4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d52e8:	1c41      	adds	r1, r0, #1
   d52ea:	4623      	mov	r3, r4
   d52ec:	464a      	mov	r2, r9
   d52ee:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d52f0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d52f2:	f7ff fecb 	bl	d508c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d52f6:	4669      	mov	r1, sp
   d52f8:	4628      	mov	r0, r5
   d52fa:	f7ff ff87 	bl	d520c <_ZN5Print5writeEPKc>
   d52fe:	4604      	mov	r4, r0
   d5300:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5302:	b11e      	cbz	r6, d530c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5304:	4628      	mov	r0, r5
   d5306:	f7ff ff98 	bl	d523a <_ZN5Print7printlnEv>
   d530a:	4404      	add	r4, r0
    return n;
}
   d530c:	4620      	mov	r0, r4
   d530e:	371c      	adds	r7, #28
   d5310:	46bd      	mov	sp, r7
   d5312:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5316:	b002      	add	sp, #8
   d5318:	4770      	bx	lr
	...

000d531c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d531c:	4b01      	ldr	r3, [pc, #4]	; (d5324 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d531e:	4a02      	ldr	r2, [pc, #8]	; (d5328 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5320:	601a      	str	r2, [r3, #0]
   d5322:	4770      	bx	lr
   d5324:	2003e3c0 	.word	0x2003e3c0
   d5328:	000d79f7 	.word	0x000d79f7

000d532c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d532c:	4b02      	ldr	r3, [pc, #8]	; (d5338 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d532e:	681a      	ldr	r2, [r3, #0]
   d5330:	4b02      	ldr	r3, [pc, #8]	; (d533c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5332:	601a      	str	r2, [r3, #0]
   d5334:	4770      	bx	lr
   d5336:	bf00      	nop
   d5338:	2003dcf4 	.word	0x2003dcf4
   d533c:	2003e3c4 	.word	0x2003e3c4

000d5340 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5340:	2100      	movs	r1, #0
   d5342:	f7ff bdef 	b.w	d4f24 <system_delay_ms>

000d5346 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5346:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5348:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d534a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d534c:	b113      	cbz	r3, d5354 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d534e:	2203      	movs	r2, #3
   d5350:	4601      	mov	r1, r0
   d5352:	4798      	blx	r3
    }
   d5354:	4620      	mov	r0, r4
   d5356:	bd10      	pop	{r4, pc}

000d5358 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5358:	b510      	push	{r4, lr}
   d535a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d535c:	f7ff fff3 	bl	d5346 <_ZNSt14_Function_baseD1Ev>
   d5360:	4620      	mov	r0, r4
   d5362:	bd10      	pop	{r4, pc}

000d5364 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5364:	b513      	push	{r0, r1, r4, lr}
   d5366:	460b      	mov	r3, r1
   d5368:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d536a:	c803      	ldmia	r0, {r0, r1}
   d536c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5370:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5374:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5378:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d537c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5380:	b002      	add	sp, #8
   d5382:	bd10      	pop	{r4, pc}

000d5384 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5384:	4803      	ldr	r0, [pc, #12]	; (d5394 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5386:	4a04      	ldr	r2, [pc, #16]	; (d5398 <_GLOBAL__sub_I_RGB+0x14>)
   d5388:	4904      	ldr	r1, [pc, #16]	; (d539c <_GLOBAL__sub_I_RGB+0x18>)
   d538a:	2300      	movs	r3, #0
   d538c:	6083      	str	r3, [r0, #8]
   d538e:	f000 bfc9 	b.w	d6324 <__aeabi_atexit>
   d5392:	bf00      	nop
   d5394:	2003e3c8 	.word	0x2003e3c8
   d5398:	2003dd60 	.word	0x2003dd60
   d539c:	000d5359 	.word	0x000d5359

000d53a0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d53a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d53a2:	4b0c      	ldr	r3, [pc, #48]	; (d53d4 <serialEventRun+0x34>)
   d53a4:	b133      	cbz	r3, d53b4 <serialEventRun+0x14>
   d53a6:	f000 fc1b 	bl	d5be0 <_Z16_fetch_usbserialv>
   d53aa:	6803      	ldr	r3, [r0, #0]
   d53ac:	691b      	ldr	r3, [r3, #16]
   d53ae:	4798      	blx	r3
   d53b0:	2800      	cmp	r0, #0
   d53b2:	dc09      	bgt.n	d53c8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d53b4:	4b08      	ldr	r3, [pc, #32]	; (d53d8 <serialEventRun+0x38>)
   d53b6:	b163      	cbz	r3, d53d2 <serialEventRun+0x32>
   d53b8:	f000 fce0 	bl	d5d7c <_Z22__fetch_global_Serial1v>
   d53bc:	6803      	ldr	r3, [r0, #0]
   d53be:	691b      	ldr	r3, [r3, #16]
   d53c0:	4798      	blx	r3
   d53c2:	2800      	cmp	r0, #0
   d53c4:	dc03      	bgt.n	d53ce <serialEventRun+0x2e>
   d53c6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d53c8:	f3af 8000 	nop.w
   d53cc:	e7f2      	b.n	d53b4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d53ce:	f3af 8000 	nop.w
   d53d2:	bd08      	pop	{r3, pc}
	...

000d53dc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d53dc:	b508      	push	{r3, lr}
	serialEventRun();
   d53de:	f7ff ffdf 	bl	d53a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d53e2:	f7ff fc8f 	bl	d4d04 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d53e6:	4b01      	ldr	r3, [pc, #4]	; (d53ec <_post_loop+0x10>)
   d53e8:	6018      	str	r0, [r3, #0]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	2003e730 	.word	0x2003e730

000d53f0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d53f0:	4802      	ldr	r0, [pc, #8]	; (d53fc <_Z33system_initialize_user_backup_ramv+0xc>)
   d53f2:	4a03      	ldr	r2, [pc, #12]	; (d5400 <_Z33system_initialize_user_backup_ramv+0x10>)
   d53f4:	4903      	ldr	r1, [pc, #12]	; (d5404 <_Z33system_initialize_user_backup_ramv+0x14>)
   d53f6:	1a12      	subs	r2, r2, r0
   d53f8:	f002 b9b6 	b.w	d7768 <memcpy>
   d53fc:	2003f400 	.word	0x2003f400
   d5400:	2003f404 	.word	0x2003f404
   d5404:	000d7cd0 	.word	0x000d7cd0

000d5408 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5408:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d540a:	2300      	movs	r3, #0
   d540c:	9300      	str	r3, [sp, #0]
   d540e:	461a      	mov	r2, r3
   d5410:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5414:	f7ff fda8 	bl	d4f68 <system_ctrl_set_result>
}
   d5418:	b003      	add	sp, #12
   d541a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5420 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5420:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5422:	8843      	ldrh	r3, [r0, #2]
   d5424:	2b0a      	cmp	r3, #10
   d5426:	d008      	beq.n	d543a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5428:	2b50      	cmp	r3, #80	; 0x50
   d542a:	d109      	bne.n	d5440 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d542c:	4b09      	ldr	r3, [pc, #36]	; (d5454 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d542e:	681b      	ldr	r3, [r3, #0]
   d5430:	b13b      	cbz	r3, d5442 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5432:	b003      	add	sp, #12
   d5434:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5438:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d543a:	f7ff ffe5 	bl	d5408 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d543e:	e006      	b.n	d544e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5440:	2300      	movs	r3, #0
   d5442:	9300      	str	r3, [sp, #0]
   d5444:	461a      	mov	r2, r3
   d5446:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d544a:	f7ff fd8d 	bl	d4f68 <system_ctrl_set_result>
        break;
    }
}
   d544e:	b003      	add	sp, #12
   d5450:	f85d fb04 	ldr.w	pc, [sp], #4
   d5454:	2003e3d8 	.word	0x2003e3d8

000d5458 <module_user_init_hook>:

void module_user_init_hook()
{
   d5458:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d545a:	4c10      	ldr	r4, [pc, #64]	; (d549c <module_user_init_hook+0x44>)
   d545c:	4d10      	ldr	r5, [pc, #64]	; (d54a0 <module_user_init_hook+0x48>)
   d545e:	6823      	ldr	r3, [r4, #0]
   d5460:	42ab      	cmp	r3, r5
   d5462:	4b10      	ldr	r3, [pc, #64]	; (d54a4 <module_user_init_hook+0x4c>)
   d5464:	bf0c      	ite	eq
   d5466:	2201      	moveq	r2, #1
   d5468:	2200      	movne	r2, #0
   d546a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d546c:	d002      	beq.n	d5474 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d546e:	f7ff ffbf 	bl	d53f0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5472:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5474:	f7ff fc3e 	bl	d4cf4 <HAL_RNG_GetRandomNumber>
   d5478:	4604      	mov	r4, r0
    srand(seed);
   d547a:	f002 f989 	bl	d7790 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d547e:	4b0a      	ldr	r3, [pc, #40]	; (d54a8 <module_user_init_hook+0x50>)
   d5480:	b113      	cbz	r3, d5488 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5482:	4620      	mov	r0, r4
   d5484:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5488:	2100      	movs	r1, #0
   d548a:	4807      	ldr	r0, [pc, #28]	; (d54a8 <module_user_init_hook+0x50>)
   d548c:	f7ff fdde 	bl	d504c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5490:	2100      	movs	r1, #0
   d5492:	4806      	ldr	r0, [pc, #24]	; (d54ac <module_user_init_hook+0x54>)
}
   d5494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5498:	f7ff bd5c 	b.w	d4f54 <system_ctrl_set_app_request_handler>
   d549c:	2003f400 	.word	0x2003f400
   d54a0:	9a271c1e 	.word	0x9a271c1e
   d54a4:	2003e3dc 	.word	0x2003e3dc
   d54a8:	00000000 	.word	0x00000000
   d54ac:	000d5421 	.word	0x000d5421

000d54b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d54b0:	4770      	bx	lr

000d54b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d54b2:	2000      	movs	r0, #0
   d54b4:	4770      	bx	lr

000d54b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d54b6:	b510      	push	{r4, lr}
   d54b8:	2110      	movs	r1, #16
   d54ba:	4604      	mov	r4, r0
   d54bc:	f000 ff40 	bl	d6340 <_ZdlPvj>
   d54c0:	4620      	mov	r0, r4
   d54c2:	bd10      	pop	{r4, pc}

000d54c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d54c4:	b508      	push	{r3, lr}
      { delete this; }
   d54c6:	b108      	cbz	r0, d54cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d54c8:	f7ff fff5 	bl	d54b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d54cc:	bd08      	pop	{r3, pc}

000d54ce <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d54ce:	2200      	movs	r2, #0
   d54d0:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d54d2:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d54d4:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d54d8:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d54da:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d54de:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d54e0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54e2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d54e4:	680c      	ldr	r4, [r1, #0]
   d54e6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d54e8:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d54ea:	bd10      	pop	{r4, pc}

000d54ec <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d54ec:	b510      	push	{r4, lr}
   d54ee:	4604      	mov	r4, r0
    free((void*)msg_);
   d54f0:	6800      	ldr	r0, [r0, #0]
   d54f2:	f7ff fdbb 	bl	d506c <free>
}
   d54f6:	4620      	mov	r0, r4
   d54f8:	bd10      	pop	{r4, pc}

000d54fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d54fa:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d54fc:	68c4      	ldr	r4, [r0, #12]
   d54fe:	b1f4      	cbz	r4, d553e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5500:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5502:	2b02      	cmp	r3, #2
   d5504:	d103      	bne.n	d550e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5506:	f104 000c 	add.w	r0, r4, #12
   d550a:	f7ff ffef 	bl	d54ec <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d550e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5510:	b135      	cbz	r5, d5520 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5512:	4628      	mov	r0, r5
   d5514:	f7ff ff17 	bl	d5346 <_ZNSt14_Function_baseD1Ev>
   d5518:	2110      	movs	r1, #16
   d551a:	4628      	mov	r0, r5
   d551c:	f000 ff10 	bl	d6340 <_ZdlPvj>
   d5520:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5522:	b135      	cbz	r5, d5532 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5524:	4628      	mov	r0, r5
   d5526:	f7ff ff0e 	bl	d5346 <_ZNSt14_Function_baseD1Ev>
   d552a:	2110      	movs	r1, #16
   d552c:	4628      	mov	r0, r5
   d552e:	f000 ff07 	bl	d6340 <_ZdlPvj>
   d5532:	4620      	mov	r0, r4
   d5534:	2114      	movs	r1, #20
   d5536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d553a:	f000 bf01 	b.w	d6340 <_ZdlPvj>
   d553e:	bd38      	pop	{r3, r4, r5, pc}

000d5540 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5540:	b513      	push	{r0, r1, r4, lr}
   d5542:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5544:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5548:	2300      	movs	r3, #0
   d554a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d554c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d554e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5550:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5552:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5554:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5556:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5558:	f7ff f86a 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d555c:	4620      	mov	r0, r4
   d555e:	b002      	add	sp, #8
   d5560:	bd10      	pop	{r4, pc}

000d5562 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5564:	460c      	mov	r4, r1
   d5566:	ad02      	add	r5, sp, #8
   d5568:	f854 3b04 	ldr.w	r3, [r4], #4
   d556c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5570:	4606      	mov	r6, r0
   d5572:	460f      	mov	r7, r1
   d5574:	a801      	add	r0, sp, #4
   d5576:	4621      	mov	r1, r4
   d5578:	f7ff fe16 	bl	d51a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d557c:	4629      	mov	r1, r5
   d557e:	4630      	mov	r0, r6
   d5580:	f7ff ffde 	bl	d5540 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5584:	a801      	add	r0, sp, #4
   d5586:	f7ff f853 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d558a:	4620      	mov	r0, r4
   d558c:	f7ff f850 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5590:	4638      	mov	r0, r7
   d5592:	2108      	movs	r1, #8
   d5594:	f000 fed4 	bl	d6340 <_ZdlPvj>
        return p;
    }
   d5598:	4630      	mov	r0, r6
   d559a:	b003      	add	sp, #12
   d559c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d55a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d55a0:	b538      	push	{r3, r4, r5, lr}
   d55a2:	2300      	movs	r3, #0
   d55a4:	4604      	mov	r4, r0
   d55a6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d55a8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d55aa:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d55ac:	f7fe fd75 	bl	d409a <_Znwj>
   d55b0:	b128      	cbz	r0, d55be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d55b2:	2301      	movs	r3, #1
   d55b4:	6043      	str	r3, [r0, #4]
   d55b6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d55b8:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d55ba:	6003      	str	r3, [r0, #0]
   d55bc:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d55be:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d55c0:	4620      	mov	r0, r4
   d55c2:	bd38      	pop	{r3, r4, r5, pc}
   d55c4:	000d7a94 	.word	0x000d7a94

000d55c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55c8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d55ca:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55cc:	b90a      	cbnz	r2, d55d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d55ce:	f000 feca 	bl	d6366 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55d2:	68c3      	ldr	r3, [r0, #12]
    }
   d55d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55d8:	4718      	bx	r3

000d55da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d55da:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d55dc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d55de:	f100 0110 	add.w	r1, r0, #16
   d55e2:	f7ff fff1 	bl	d55c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d55e6:	bd08      	pop	{r3, pc}

000d55e8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55e8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d55ea:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55ec:	b90a      	cbnz	r2, d55f2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d55ee:	f000 feba 	bl	d6366 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55f2:	68c3      	ldr	r3, [r0, #12]
    }
   d55f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55f8:	4718      	bx	r3

000d55fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d55fa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d55fc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d55fe:	f100 0110 	add.w	r1, r0, #16
   d5602:	f7ff fff1 	bl	d55e8 <_ZNKSt8functionIFvRKbEEclES1_>
   d5606:	bd08      	pop	{r3, pc}

000d5608 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5608:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d560a:	2300      	movs	r3, #0
   d560c:	6083      	str	r3, [r0, #8]
   d560e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5610:	4604      	mov	r4, r0
   d5612:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5614:	b12b      	cbz	r3, d5622 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5616:	2202      	movs	r2, #2
   d5618:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d561a:	68eb      	ldr	r3, [r5, #12]
   d561c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d561e:	68ab      	ldr	r3, [r5, #8]
   d5620:	60a3      	str	r3, [r4, #8]
	}
    }
   d5622:	4620      	mov	r0, r4
   d5624:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5628 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5628:	b5f0      	push	{r4, r5, r6, r7, lr}
   d562a:	b089      	sub	sp, #36	; 0x24
   d562c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d562e:	4668      	mov	r0, sp
   d5630:	f7ff ff4d 	bl	d54ce <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5634:	2300      	movs	r3, #0
   d5636:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d563a:	f04f 0202 	mov.w	r2, #2
   d563e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5642:	2b00      	cmp	r3, #0
   d5644:	d103      	bne.n	d564e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5646:	e8c4 2f41 	strexb	r1, r2, [r4]
   d564a:	2900      	cmp	r1, #0
   d564c:	d1f7      	bne.n	d563e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d564e:	d002      	beq.n	d5656 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5650:	f88d 3008 	strb.w	r3, [sp, #8]
   d5654:	e063      	b.n	d571e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5656:	f114 050c 	adds.w	r5, r4, #12
   d565a:	d003      	beq.n	d5664 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d565c:	4669      	mov	r1, sp
   d565e:	4628      	mov	r0, r5
   d5660:	f7ff ff35 	bl	d54ce <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5664:	f3bf 8f5f 	dmb	sy
   d5668:	2301      	movs	r3, #1
   d566a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d566c:	2000      	movs	r0, #0
   d566e:	f104 0308 	add.w	r3, r4, #8
   d5672:	f3bf 8f5f 	dmb	sy
   d5676:	e853 6f00 	ldrex	r6, [r3]
   d567a:	e843 0200 	strex	r2, r0, [r3]
   d567e:	2a00      	cmp	r2, #0
   d5680:	d1f9      	bne.n	d5676 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5682:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5686:	2e00      	cmp	r6, #0
   d5688:	d049      	beq.n	d571e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d568a:	f7ff fc53 	bl	d4f34 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d568e:	b120      	cbz	r0, d569a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5690:	4629      	mov	r1, r5
   d5692:	4630      	mov	r0, r6
   d5694:	f7ff ff98 	bl	d55c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5698:	e03a      	b.n	d5710 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d569a:	4631      	mov	r1, r6
   d569c:	a802      	add	r0, sp, #8
   d569e:	f7ff ffb3 	bl	d5608 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d56a2:	68e0      	ldr	r0, [r4, #12]
   d56a4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d56a8:	b108      	cbz	r0, d56ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d56aa:	f002 f899 	bl	d77e0 <strdup>
   d56ae:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d56b0:	2010      	movs	r0, #16
   d56b2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d56b6:	f7fe fcf0 	bl	d409a <_Znwj>
   d56ba:	4605      	mov	r5, r0
   d56bc:	b1e8      	cbz	r0, d56fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56be:	2700      	movs	r7, #0
   d56c0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56c2:	2018      	movs	r0, #24
   d56c4:	f7fe fce9 	bl	d409a <_Znwj>
   d56c8:	4604      	mov	r4, r0
   d56ca:	b188      	cbz	r0, d56f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d56cc:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56ce:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d56d0:	a802      	add	r0, sp, #8
   d56d2:	f7ff fe47 	bl	d5364 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56d6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d56d8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d56da:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56dc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d56de:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d56e0:	a906      	add	r1, sp, #24
   d56e2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d56e4:	60e3      	str	r3, [r4, #12]
   d56e6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d56ea:	9205      	str	r2, [sp, #20]
   d56ec:	f7ff feef 	bl	d54ce <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d56f0:	4b0d      	ldr	r3, [pc, #52]	; (d5728 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d56f2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d56f4:	4b0d      	ldr	r3, [pc, #52]	; (d572c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56f6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d56f8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d56fa:	a806      	add	r0, sp, #24
   d56fc:	f7ff fef6 	bl	d54ec <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5700:	a802      	add	r0, sp, #8
   d5702:	f7ff fe20 	bl	d5346 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5706:	2200      	movs	r2, #0
   d5708:	4629      	mov	r1, r5
   d570a:	4809      	ldr	r0, [pc, #36]	; (d5730 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d570c:	f7ff fc1a 	bl	d4f44 <application_thread_invoke>
   d5710:	4630      	mov	r0, r6
   d5712:	f7ff fe18 	bl	d5346 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5716:	2110      	movs	r1, #16
   d5718:	4630      	mov	r0, r6
   d571a:	f000 fe11 	bl	d6340 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d571e:	4668      	mov	r0, sp
   d5720:	f7ff fee4 	bl	d54ec <_ZN8particle5ErrorD1Ev>
    }
   d5724:	b009      	add	sp, #36	; 0x24
   d5726:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5728:	000d55db 	.word	0x000d55db
   d572c:	000d5851 	.word	0x000d5851
   d5730:	000d5dc9 	.word	0x000d5dc9

000d5734 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5738:	b08b      	sub	sp, #44	; 0x2c
   d573a:	4606      	mov	r6, r0
   d573c:	460f      	mov	r7, r1
   d573e:	4690      	mov	r8, r2
   d5740:	4699      	mov	r9, r3
   d5742:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5746:	f7ff fc71 	bl	d502c <spark_cloud_flag_connected>
   d574a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d574c:	4683      	mov	fp, r0
   d574e:	bb30      	cbnz	r0, d579e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5750:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5754:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5756:	a905      	add	r1, sp, #20
   d5758:	4628      	mov	r0, r5
   d575a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d575e:	f7ff feb6 	bl	d54ce <_ZN8particle5ErrorC1EOS0_>
   d5762:	2014      	movs	r0, #20
   d5764:	f7fe fc99 	bl	d409a <_Znwj>
   d5768:	4604      	mov	r4, r0
   d576a:	b158      	cbz	r0, d5784 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d576c:	2302      	movs	r3, #2
   d576e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5770:	2301      	movs	r3, #1
   d5772:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5774:	f8c0 b004 	str.w	fp, [r0, #4]
   d5778:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d577c:	4629      	mov	r1, r5
   d577e:	300c      	adds	r0, #12
   d5780:	f7ff fea5 	bl	d54ce <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5784:	4630      	mov	r0, r6
   d5786:	4621      	mov	r1, r4
   d5788:	f840 4b04 	str.w	r4, [r0], #4
   d578c:	f7ff ff08 	bl	d55a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5790:	4628      	mov	r0, r5
   d5792:	f7ff feab 	bl	d54ec <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5796:	a805      	add	r0, sp, #20
   d5798:	f7ff fea8 	bl	d54ec <_ZN8particle5ErrorD1Ev>
   d579c:	e052      	b.n	d5844 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d579e:	2400      	movs	r4, #0
   d57a0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d57a2:	2014      	movs	r0, #20
   d57a4:	606c      	str	r4, [r5, #4]
   d57a6:	60ac      	str	r4, [r5, #8]
   d57a8:	9307      	str	r3, [sp, #28]
   d57aa:	f7fe fc76 	bl	d409a <_Znwj>
   d57ae:	4601      	mov	r1, r0
   d57b0:	b118      	cbz	r0, d57ba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d57b2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d57b4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d57b6:	6044      	str	r4, [r0, #4]
   d57b8:	6084      	str	r4, [r0, #8]
   d57ba:	a804      	add	r0, sp, #16
   d57bc:	9103      	str	r1, [sp, #12]
   d57be:	f7ff feef 	bl	d55a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d57c2:	4b22      	ldr	r3, [pc, #136]	; (d584c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d57c4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d57c6:	2008      	movs	r0, #8
   d57c8:	f7fe fc67 	bl	d409a <_Znwj>
   d57cc:	4604      	mov	r4, r0
   d57ce:	b128      	cbz	r0, d57dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d57d0:	9b03      	ldr	r3, [sp, #12]
   d57d2:	f840 3b04 	str.w	r3, [r0], #4
   d57d6:	a904      	add	r1, sp, #16
   d57d8:	f7ff fce6 	bl	d51a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d57dc:	9500      	str	r5, [sp, #0]
   d57de:	fa5f f38a 	uxtb.w	r3, sl
   d57e2:	464a      	mov	r2, r9
   d57e4:	4641      	mov	r1, r8
   d57e6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d57e8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d57ea:	f7ff fc27 	bl	d503c <spark_send_event>
   d57ee:	b920      	cbnz	r0, d57fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d57f0:	9b03      	ldr	r3, [sp, #12]
   d57f2:	785b      	ldrb	r3, [r3, #1]
   d57f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d57f8:	b183      	cbz	r3, d581c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d57fa:	9b03      	ldr	r3, [sp, #12]
   d57fc:	9305      	str	r3, [sp, #20]
   d57fe:	a904      	add	r1, sp, #16
   d5800:	a806      	add	r0, sp, #24
   d5802:	f7ff fcd1 	bl	d51a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5806:	a905      	add	r1, sp, #20
   d5808:	4630      	mov	r0, r6
   d580a:	f7ff fe99 	bl	d5540 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d580e:	a806      	add	r0, sp, #24
   d5810:	f7fe ff0e 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5814:	a804      	add	r0, sp, #16
   d5816:	f7fe ff0b 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d581a:	e013      	b.n	d5844 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d581c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5820:	a905      	add	r1, sp, #20
   d5822:	a803      	add	r0, sp, #12
   d5824:	9205      	str	r2, [sp, #20]
   d5826:	f8ad 3018 	strh.w	r3, [sp, #24]
   d582a:	f7ff fefd 	bl	d5628 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d582e:	a805      	add	r0, sp, #20
   d5830:	f7ff fe5c 	bl	d54ec <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5834:	a805      	add	r0, sp, #20
   d5836:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5838:	f7ff fe93 	bl	d5562 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d583c:	a806      	add	r0, sp, #24
   d583e:	f7fe fef7 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5842:	e7da      	b.n	d57fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5844:	4630      	mov	r0, r6
   d5846:	b00b      	add	sp, #44	; 0x2c
   d5848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d584c:	000d59c1 	.word	0x000d59c1

000d5850 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5850:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5854:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5856:	d006      	beq.n	d5866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5858:	2a03      	cmp	r2, #3
   d585a:	d017      	beq.n	d588c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d585c:	2a01      	cmp	r2, #1
   d585e:	d122      	bne.n	d58a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5860:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5862:	6003      	str	r3, [r0, #0]
	      break;
   d5864:	e01f      	b.n	d58a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5866:	2018      	movs	r0, #24
   d5868:	680e      	ldr	r6, [r1, #0]
   d586a:	f7fe fc16 	bl	d409a <_Znwj>
   d586e:	4605      	mov	r5, r0
   d5870:	b150      	cbz	r0, d5888 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5872:	4631      	mov	r1, r6
   d5874:	f7ff fec8 	bl	d5608 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5878:	6930      	ldr	r0, [r6, #16]
   d587a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d587e:	b108      	cbz	r0, d5884 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5880:	f001 ffae 	bl	d77e0 <strdup>
   d5884:	6128      	str	r0, [r5, #16]
   d5886:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5888:	6025      	str	r5, [r4, #0]
   d588a:	e00c      	b.n	d58a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d588c:	6804      	ldr	r4, [r0, #0]
   d588e:	b154      	cbz	r4, d58a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5890:	f104 0010 	add.w	r0, r4, #16
   d5894:	f7ff fe2a 	bl	d54ec <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5898:	4620      	mov	r0, r4
   d589a:	f7ff fd54 	bl	d5346 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d589e:	2118      	movs	r1, #24
   d58a0:	4620      	mov	r0, r4
   d58a2:	f000 fd4d 	bl	d6340 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d58a6:	2000      	movs	r0, #0
   d58a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58aa <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d58aa:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d58ac:	2300      	movs	r3, #0
   d58ae:	6083      	str	r3, [r0, #8]
   d58b0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d58b2:	4604      	mov	r4, r0
   d58b4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d58b6:	b12b      	cbz	r3, d58c4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d58b8:	2202      	movs	r2, #2
   d58ba:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d58bc:	68eb      	ldr	r3, [r5, #12]
   d58be:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d58c0:	68ab      	ldr	r3, [r5, #8]
   d58c2:	60a3      	str	r3, [r4, #8]
	}
    }
   d58c4:	4620      	mov	r0, r4
   d58c6:	bd38      	pop	{r3, r4, r5, pc}

000d58c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d58c8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d58ca:	b570      	push	{r4, r5, r6, lr}
   d58cc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d58ce:	d006      	beq.n	d58de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d58d0:	2a03      	cmp	r2, #3
   d58d2:	d011      	beq.n	d58f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d58d4:	2a01      	cmp	r2, #1
   d58d6:	d118      	bne.n	d590a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d58d8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d58da:	6003      	str	r3, [r0, #0]
	      break;
   d58dc:	e015      	b.n	d590a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d58de:	2014      	movs	r0, #20
   d58e0:	680e      	ldr	r6, [r1, #0]
   d58e2:	f7fe fbda 	bl	d409a <_Znwj>
   d58e6:	4605      	mov	r5, r0
   d58e8:	b120      	cbz	r0, d58f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d58ea:	4631      	mov	r1, r6
   d58ec:	f7ff ffdd 	bl	d58aa <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d58f0:	7c33      	ldrb	r3, [r6, #16]
   d58f2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d58f4:	6025      	str	r5, [r4, #0]
   d58f6:	e008      	b.n	d590a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d58f8:	6804      	ldr	r4, [r0, #0]
   d58fa:	b134      	cbz	r4, d590a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d58fc:	4620      	mov	r0, r4
   d58fe:	f7ff fd22 	bl	d5346 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5902:	2114      	movs	r1, #20
   d5904:	4620      	mov	r0, r4
   d5906:	f000 fd1b 	bl	d6340 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d590a:	2000      	movs	r0, #0
   d590c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5910 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5910:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5912:	2300      	movs	r3, #0
   d5914:	b087      	sub	sp, #28
   d5916:	460c      	mov	r4, r1
   d5918:	f3bf 8f5f 	dmb	sy
   d591c:	e850 6f00 	ldrex	r6, [r0]
   d5920:	e840 3200 	strex	r2, r3, [r0]
   d5924:	2a00      	cmp	r2, #0
   d5926:	d1f9      	bne.n	d591c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5928:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d592c:	2e00      	cmp	r6, #0
   d592e:	d03f      	beq.n	d59b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5930:	4618      	mov	r0, r3
   d5932:	f7ff faff 	bl	d4f34 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5936:	4607      	mov	r7, r0
   d5938:	b120      	cbz	r0, d5944 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d593a:	4621      	mov	r1, r4
   d593c:	4630      	mov	r0, r6
   d593e:	f7ff fe53 	bl	d55e8 <_ZNKSt8functionIFvRKbEEclES1_>
   d5942:	e02e      	b.n	d59a2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5944:	4631      	mov	r1, r6
   d5946:	a801      	add	r0, sp, #4
   d5948:	f7ff ffaf 	bl	d58aa <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d594c:	7823      	ldrb	r3, [r4, #0]
   d594e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5952:	2010      	movs	r0, #16
   d5954:	f7fe fba1 	bl	d409a <_Znwj>
   d5958:	4605      	mov	r5, r0
   d595a:	b1d0      	cbz	r0, d5992 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d595c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d595e:	2014      	movs	r0, #20
   d5960:	f7fe fb9b 	bl	d409a <_Znwj>
   d5964:	4604      	mov	r4, r0
   d5966:	b178      	cbz	r0, d5988 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5968:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d596a:	4601      	mov	r1, r0
   d596c:	a801      	add	r0, sp, #4
   d596e:	f7ff fcf9 	bl	d5364 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5972:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5974:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5976:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5978:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d597a:	9203      	str	r2, [sp, #12]
   d597c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d597e:	60e3      	str	r3, [r4, #12]
   d5980:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5984:	9204      	str	r2, [sp, #16]
   d5986:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5988:	4b0a      	ldr	r3, [pc, #40]	; (d59b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d598a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d598c:	4b0a      	ldr	r3, [pc, #40]	; (d59b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d598e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5990:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5992:	a801      	add	r0, sp, #4
   d5994:	f7ff fcd7 	bl	d5346 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5998:	2200      	movs	r2, #0
   d599a:	4629      	mov	r1, r5
   d599c:	4807      	ldr	r0, [pc, #28]	; (d59bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d599e:	f7ff fad1 	bl	d4f44 <application_thread_invoke>
   d59a2:	4630      	mov	r0, r6
   d59a4:	f7ff fccf 	bl	d5346 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d59a8:	2110      	movs	r1, #16
   d59aa:	4630      	mov	r0, r6
   d59ac:	f000 fcc8 	bl	d6340 <_ZdlPvj>
        }
    }
   d59b0:	b007      	add	sp, #28
   d59b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d59b4:	000d55fb 	.word	0x000d55fb
   d59b8:	000d58c9 	.word	0x000d58c9
   d59bc:	000d5dc9 	.word	0x000d5dc9

000d59c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d59c0:	b530      	push	{r4, r5, lr}
   d59c2:	b085      	sub	sp, #20
   d59c4:	4604      	mov	r4, r0
   d59c6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d59c8:	4668      	mov	r0, sp
   d59ca:	4611      	mov	r1, r2
   d59cc:	f7ff fdc9 	bl	d5562 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d59d0:	b17c      	cbz	r4, d59f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d59d2:	b224      	sxth	r4, r4
   d59d4:	4628      	mov	r0, r5
   d59d6:	b10d      	cbz	r5, d59dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d59d8:	f001 ff02 	bl	d77e0 <strdup>
   d59dc:	9002      	str	r0, [sp, #8]
   d59de:	a902      	add	r1, sp, #8
   d59e0:	4668      	mov	r0, sp
   d59e2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d59e6:	f7ff fe1f 	bl	d5628 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d59ea:	a802      	add	r0, sp, #8
   d59ec:	f7ff fd7e 	bl	d54ec <_ZN8particle5ErrorD1Ev>
   d59f0:	e01d      	b.n	d5a2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d59f2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d59f4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d59f8:	f04f 0201 	mov.w	r2, #1
   d59fc:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5a00:	42a3      	cmp	r3, r4
   d5a02:	d103      	bne.n	d5a0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5a04:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5a08:	2900      	cmp	r1, #0
   d5a0a:	d1f7      	bne.n	d59fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5a0c:	d002      	beq.n	d5a14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5a0e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a12:	e00c      	b.n	d5a2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5a14:	f110 010c 	adds.w	r1, r0, #12
   d5a18:	f04f 0301 	mov.w	r3, #1
   d5a1c:	bf18      	it	ne
   d5a1e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5a20:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5a24:	3004      	adds	r0, #4
   d5a26:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5a2a:	f7ff ff71 	bl	d5910 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5a2e:	a801      	add	r0, sp, #4
   d5a30:	f7fe fdfe 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5a34:	b005      	add	sp, #20
   d5a36:	bd30      	pop	{r4, r5, pc}

000d5a38 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5a38:	4770      	bx	lr

000d5a3a <_ZN9IPAddressD0Ev>:
   d5a3a:	b510      	push	{r4, lr}
   d5a3c:	2118      	movs	r1, #24
   d5a3e:	4604      	mov	r4, r0
   d5a40:	f000 fc7e 	bl	d6340 <_ZdlPvj>
   d5a44:	4620      	mov	r0, r4
   d5a46:	bd10      	pop	{r4, pc}

000d5a48 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5a48:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5a4a:	7d03      	ldrb	r3, [r0, #20]
   d5a4c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5a4e:	b08d      	sub	sp, #52	; 0x34
   d5a50:	460e      	mov	r6, r1
   d5a52:	f100 0704 	add.w	r7, r0, #4
   d5a56:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5a5a:	d002      	beq.n	d5a62 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5a5c:	f100 0508 	add.w	r5, r0, #8
   d5a60:	e018      	b.n	d5a94 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5a62:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a64:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5a66:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a6a:	232f      	movs	r3, #47	; 0x2f
   d5a6c:	462a      	mov	r2, r5
   d5a6e:	200a      	movs	r0, #10
   d5a70:	f7ff f978 	bl	d4d64 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5a74:	4628      	mov	r0, r5
   d5a76:	f001 fece 	bl	d7816 <strlen>
   d5a7a:	6833      	ldr	r3, [r6, #0]
   d5a7c:	4602      	mov	r2, r0
   d5a7e:	68db      	ldr	r3, [r3, #12]
   d5a80:	4629      	mov	r1, r5
   d5a82:	4630      	mov	r0, r6
   d5a84:	4798      	blx	r3
   d5a86:	e00f      	b.n	d5aa8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5a88:	b124      	cbz	r4, d5a94 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5a8a:	212e      	movs	r1, #46	; 0x2e
   d5a8c:	4630      	mov	r0, r6
   d5a8e:	f7ff fbd1 	bl	d5234 <_ZN5Print5printEc>
   d5a92:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5a94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5a98:	220a      	movs	r2, #10
   d5a9a:	4630      	mov	r0, r6
   d5a9c:	f7ff fbe3 	bl	d5266 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5aa0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5aa2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5aa4:	d1f0      	bne.n	d5a88 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5aa6:	4620      	mov	r0, r4
    }
    return n;
}
   d5aa8:	b00d      	add	sp, #52	; 0x34
   d5aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5aac <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5aac:	b510      	push	{r4, lr}
   d5aae:	4b05      	ldr	r3, [pc, #20]	; (d5ac4 <_ZN9IPAddressC1Ev+0x18>)
   d5ab0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5ab2:	2211      	movs	r2, #17
   d5ab4:	f840 3b04 	str.w	r3, [r0], #4
   d5ab8:	2100      	movs	r1, #0
   d5aba:	f001 fe60 	bl	d777e <memset>
{
    clear();
}
   d5abe:	4620      	mov	r0, r4
   d5ac0:	bd10      	pop	{r4, pc}
   d5ac2:	bf00      	nop
   d5ac4:	000d7ab0 	.word	0x000d7ab0

000d5ac8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5ac8:	4603      	mov	r3, r0
   d5aca:	4a07      	ldr	r2, [pc, #28]	; (d5ae8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5acc:	b510      	push	{r4, lr}
   d5ace:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5ad2:	f101 0210 	add.w	r2, r1, #16
   d5ad6:	f851 4b04 	ldr.w	r4, [r1], #4
   d5ada:	f843 4b04 	str.w	r4, [r3], #4
   d5ade:	4291      	cmp	r1, r2
   d5ae0:	d1f9      	bne.n	d5ad6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5ae2:	780a      	ldrb	r2, [r1, #0]
   d5ae4:	701a      	strb	r2, [r3, #0]
}
   d5ae6:	bd10      	pop	{r4, pc}
   d5ae8:	000d7ab0 	.word	0x000d7ab0

000d5aec <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5aec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5aee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5af2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5af6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5afa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5afe:	2304      	movs	r3, #4
   d5b00:	6041      	str	r1, [r0, #4]
   d5b02:	7503      	strb	r3, [r0, #20]
   d5b04:	bd10      	pop	{r4, pc}

000d5b06 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5b06:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5b08:	780d      	ldrb	r5, [r1, #0]
   d5b0a:	788b      	ldrb	r3, [r1, #2]
   d5b0c:	784a      	ldrb	r2, [r1, #1]
   d5b0e:	78c9      	ldrb	r1, [r1, #3]
   d5b10:	9100      	str	r1, [sp, #0]
   d5b12:	4629      	mov	r1, r5
   d5b14:	f7ff ffea 	bl	d5aec <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5b18:	b003      	add	sp, #12
   d5b1a:	bd30      	pop	{r4, r5, pc}

000d5b1c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b1c:	7441      	strb	r1, [r0, #17]
   d5b1e:	4770      	bx	lr

000d5b20 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5b20:	4770      	bx	lr

000d5b22 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5b22:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5b24:	2100      	movs	r1, #0
   d5b26:	7c00      	ldrb	r0, [r0, #16]
   d5b28:	f7ff f9dc 	bl	d4ee4 <HAL_USB_USART_Receive_Data>
}
   d5b2c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b30:	bf28      	it	cs
   d5b32:	f04f 30ff 	movcs.w	r0, #4294967295
   d5b36:	bd08      	pop	{r3, pc}

000d5b38 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5b38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5b3a:	2101      	movs	r1, #1
   d5b3c:	7c00      	ldrb	r0, [r0, #16]
   d5b3e:	f7ff f9d1 	bl	d4ee4 <HAL_USB_USART_Receive_Data>
}
   d5b42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b46:	bf28      	it	cs
   d5b48:	f04f 30ff 	movcs.w	r0, #4294967295
   d5b4c:	bd08      	pop	{r3, pc}

000d5b4e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5b4e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5b50:	7c00      	ldrb	r0, [r0, #16]
   d5b52:	f7ff f9bf 	bl	d4ed4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5b56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b5a:	bd08      	pop	{r3, pc}

000d5b5c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5b5c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5b5e:	7c00      	ldrb	r0, [r0, #16]
   d5b60:	f7ff f9b0 	bl	d4ec4 <HAL_USB_USART_Available_Data>
}
   d5b64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b68:	bd08      	pop	{r3, pc}

000d5b6a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5b6a:	7c00      	ldrb	r0, [r0, #16]
   d5b6c:	f7ff b9ca 	b.w	d4f04 <HAL_USB_USART_Flush_Data>

000d5b70 <_ZN9USBSerialD0Ev>:
   d5b70:	b510      	push	{r4, lr}
   d5b72:	2114      	movs	r1, #20
   d5b74:	4604      	mov	r4, r0
   d5b76:	f000 fbe3 	bl	d6340 <_ZdlPvj>
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	bd10      	pop	{r4, pc}

000d5b7e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5b7e:	b538      	push	{r3, r4, r5, lr}
   d5b80:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b82:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5b84:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b86:	f7ff f9a5 	bl	d4ed4 <HAL_USB_USART_Available_Data_For_Write>
   d5b8a:	2800      	cmp	r0, #0
   d5b8c:	dc01      	bgt.n	d5b92 <_ZN9USBSerial5writeEh+0x14>
   d5b8e:	7c60      	ldrb	r0, [r4, #17]
   d5b90:	b128      	cbz	r0, d5b9e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5b92:	4629      	mov	r1, r5
   d5b94:	7c20      	ldrb	r0, [r4, #16]
   d5b96:	f7ff f9ad 	bl	d4ef4 <HAL_USB_USART_Send_Data>
   d5b9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5b9e:	bd38      	pop	{r3, r4, r5, pc}

000d5ba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ba0:	b510      	push	{r4, lr}
   d5ba2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5ba4:	2300      	movs	r3, #0
   d5ba6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5bac:	60a3      	str	r3, [r4, #8]
   d5bae:	4b05      	ldr	r3, [pc, #20]	; (d5bc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5bb0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5bb2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5bb4:	4608      	mov	r0, r1
{
  _serial = serial;
   d5bb6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5bb8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5bba:	4611      	mov	r1, r2
   d5bbc:	f7ff f972 	bl	d4ea4 <HAL_USB_USART_Init>
}
   d5bc0:	4620      	mov	r0, r4
   d5bc2:	bd10      	pop	{r4, pc}
   d5bc4:	000d7ac4 	.word	0x000d7ac4

000d5bc8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5bc8:	2200      	movs	r2, #0
   d5bca:	7c00      	ldrb	r0, [r0, #16]
   d5bcc:	f7ff b972 	b.w	d4eb4 <HAL_USB_USART_Begin>

000d5bd0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5bd0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5bd2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5bd4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5bd6:	2100      	movs	r1, #0
   d5bd8:	f001 fdd1 	bl	d777e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5bdc:	4620      	mov	r0, r4
   d5bde:	bd10      	pop	{r4, pc}

000d5be0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5be0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5be2:	4d0e      	ldr	r5, [pc, #56]	; (d5c1c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5be4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5be6:	a801      	add	r0, sp, #4
   d5be8:	f7ff fff2 	bl	d5bd0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5bec:	6829      	ldr	r1, [r5, #0]
   d5bee:	f011 0401 	ands.w	r4, r1, #1
   d5bf2:	d110      	bne.n	d5c16 <_Z16_fetch_usbserialv+0x36>
   d5bf4:	4628      	mov	r0, r5
   d5bf6:	f7fe fa56 	bl	d40a6 <__cxa_guard_acquire>
   d5bfa:	b160      	cbz	r0, d5c16 <_Z16_fetch_usbserialv+0x36>
   d5bfc:	aa01      	add	r2, sp, #4
   d5bfe:	4621      	mov	r1, r4
   d5c00:	4807      	ldr	r0, [pc, #28]	; (d5c20 <_Z16_fetch_usbserialv+0x40>)
   d5c02:	f7ff ffcd 	bl	d5ba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c06:	4628      	mov	r0, r5
   d5c08:	f7fe fa52 	bl	d40b0 <__cxa_guard_release>
   d5c0c:	4a05      	ldr	r2, [pc, #20]	; (d5c24 <_Z16_fetch_usbserialv+0x44>)
   d5c0e:	4906      	ldr	r1, [pc, #24]	; (d5c28 <_Z16_fetch_usbserialv+0x48>)
   d5c10:	4803      	ldr	r0, [pc, #12]	; (d5c20 <_Z16_fetch_usbserialv+0x40>)
   d5c12:	f000 fb87 	bl	d6324 <__aeabi_atexit>
	return _usbserial;
}
   d5c16:	4802      	ldr	r0, [pc, #8]	; (d5c20 <_Z16_fetch_usbserialv+0x40>)
   d5c18:	b007      	add	sp, #28
   d5c1a:	bd30      	pop	{r4, r5, pc}
   d5c1c:	2003e3e0 	.word	0x2003e3e0
   d5c20:	2003e3e4 	.word	0x2003e3e4
   d5c24:	2003dd60 	.word	0x2003dd60
   d5c28:	000d5b21 	.word	0x000d5b21

000d5c2c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5c2c:	2200      	movs	r2, #0
   d5c2e:	4611      	mov	r1, r2
   d5c30:	6840      	ldr	r0, [r0, #4]
   d5c32:	f7ff b9bb 	b.w	d4fac <network_ready>

000d5c36 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c36:	2200      	movs	r2, #0
   d5c38:	4611      	mov	r1, r2
   d5c3a:	6840      	ldr	r0, [r0, #4]
   d5c3c:	f7ff b9d6 	b.w	d4fec <network_listening>

000d5c40 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c40:	2200      	movs	r2, #0
   d5c42:	4611      	mov	r1, r2
   d5c44:	6840      	ldr	r0, [r0, #4]
   d5c46:	f7ff b9e1 	b.w	d500c <network_get_listen_timeout>

000d5c4a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c4a:	2200      	movs	r2, #0
   d5c4c:	6840      	ldr	r0, [r0, #4]
   d5c4e:	f7ff b9d5 	b.w	d4ffc <network_set_listen_timeout>

000d5c52 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c52:	2200      	movs	r2, #0
   d5c54:	f081 0101 	eor.w	r1, r1, #1
   d5c58:	6840      	ldr	r0, [r0, #4]
   d5c5a:	f7ff b9bf 	b.w	d4fdc <network_listen>

000d5c5e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5c5e:	2300      	movs	r3, #0
   d5c60:	461a      	mov	r2, r3
   d5c62:	4619      	mov	r1, r3
   d5c64:	6840      	ldr	r0, [r0, #4]
   d5c66:	f7ff b9b1 	b.w	d4fcc <network_off>

000d5c6a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5c6a:	2300      	movs	r3, #0
   d5c6c:	461a      	mov	r2, r3
   d5c6e:	4619      	mov	r1, r3
   d5c70:	6840      	ldr	r0, [r0, #4]
   d5c72:	f7ff b9a3 	b.w	d4fbc <network_on>

000d5c76 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5c76:	2200      	movs	r2, #0
   d5c78:	4611      	mov	r1, r2
   d5c7a:	6840      	ldr	r0, [r0, #4]
   d5c7c:	f7ff b986 	b.w	d4f8c <network_connecting>

000d5c80 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c80:	2200      	movs	r2, #0
   d5c82:	2102      	movs	r1, #2
   d5c84:	6840      	ldr	r0, [r0, #4]
   d5c86:	f7ff b989 	b.w	d4f9c <network_disconnect>

000d5c8a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c8a:	2300      	movs	r3, #0
   d5c8c:	461a      	mov	r2, r3
   d5c8e:	6840      	ldr	r0, [r0, #4]
   d5c90:	f7ff b974 	b.w	d4f7c <network_connect>

000d5c94 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5c94:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5c96:	4c08      	ldr	r4, [pc, #32]	; (d5cb8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5c98:	2528      	movs	r5, #40	; 0x28
   d5c9a:	462a      	mov	r2, r5
   d5c9c:	2100      	movs	r1, #0
   d5c9e:	4620      	mov	r0, r4
   d5ca0:	f001 fd6d 	bl	d777e <memset>
        cid = -1;
   d5ca4:	f04f 33ff 	mov.w	r3, #4294967295
   d5ca8:	6063      	str	r3, [r4, #4]
   d5caa:	4b04      	ldr	r3, [pc, #16]	; (d5cbc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5cac:	8025      	strh	r5, [r4, #0]
   d5cae:	2204      	movs	r2, #4
   d5cb0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5cb2:	4a03      	ldr	r2, [pc, #12]	; (d5cc0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5cb4:	601a      	str	r2, [r3, #0]
   d5cb6:	bd38      	pop	{r3, r4, r5, pc}
   d5cb8:	2003e400 	.word	0x2003e400
   d5cbc:	2003e3f8 	.word	0x2003e3f8
   d5cc0:	000d7af4 	.word	0x000d7af4

000d5cc4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5cc4:	4770      	bx	lr

000d5cc6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5cc6:	7441      	strb	r1, [r0, #17]
   d5cc8:	4770      	bx	lr

000d5cca <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5cca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5ccc:	7c00      	ldrb	r0, [r0, #16]
   d5cce:	f7ff f889 	bl	d4de4 <HAL_USART_Available_Data_For_Write>
}
   d5cd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cd6:	bd08      	pop	{r3, pc}

000d5cd8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5cd8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5cda:	7c00      	ldrb	r0, [r0, #16]
   d5cdc:	f7ff f85a 	bl	d4d94 <HAL_USART_Available_Data>
}
   d5ce0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ce4:	bd08      	pop	{r3, pc}

000d5ce6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5ce6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5ce8:	7c00      	ldrb	r0, [r0, #16]
   d5cea:	f7ff f863 	bl	d4db4 <HAL_USART_Peek_Data>
}
   d5cee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cf2:	bf28      	it	cs
   d5cf4:	f04f 30ff 	movcs.w	r0, #4294967295
   d5cf8:	bd08      	pop	{r3, pc}

000d5cfa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5cfa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5cfc:	7c00      	ldrb	r0, [r0, #16]
   d5cfe:	f7ff f851 	bl	d4da4 <HAL_USART_Read_Data>
}
   d5d02:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d06:	bf28      	it	cs
   d5d08:	f04f 30ff 	movcs.w	r0, #4294967295
   d5d0c:	bd08      	pop	{r3, pc}

000d5d0e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5d0e:	7c00      	ldrb	r0, [r0, #16]
   d5d10:	f7ff b858 	b.w	d4dc4 <HAL_USART_Flush_Data>

000d5d14 <_ZN11USARTSerialD0Ev>:
   d5d14:	b510      	push	{r4, lr}
   d5d16:	2114      	movs	r1, #20
   d5d18:	4604      	mov	r4, r0
   d5d1a:	f000 fb11 	bl	d6340 <_ZdlPvj>
   d5d1e:	4620      	mov	r0, r4
   d5d20:	bd10      	pop	{r4, pc}

000d5d22 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5d22:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d24:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5d26:	4604      	mov	r4, r0
   d5d28:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d2a:	b925      	cbnz	r5, d5d36 <_ZN11USARTSerial5writeEh+0x14>
   d5d2c:	7c00      	ldrb	r0, [r0, #16]
   d5d2e:	f7ff f859 	bl	d4de4 <HAL_USART_Available_Data_For_Write>
   d5d32:	2800      	cmp	r0, #0
   d5d34:	dd05      	ble.n	d5d42 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d36:	4631      	mov	r1, r6
   d5d38:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d3e:	f7ff b821 	b.w	d4d84 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5d42:	4628      	mov	r0, r5
   d5d44:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5d48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5d48:	b510      	push	{r4, lr}
   d5d4a:	4604      	mov	r4, r0
   d5d4c:	4608      	mov	r0, r1
   d5d4e:	4611      	mov	r1, r2
   d5d50:	2200      	movs	r2, #0
   d5d52:	6062      	str	r2, [r4, #4]
   d5d54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5d58:	60a2      	str	r2, [r4, #8]
   d5d5a:	4a05      	ldr	r2, [pc, #20]	; (d5d70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5d5c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5d5e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5d60:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5d62:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5d64:	461a      	mov	r2, r3
   d5d66:	f7ff f805 	bl	d4d74 <HAL_USART_Init>
}
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	bd10      	pop	{r4, pc}
   d5d6e:	bf00      	nop
   d5d70:	000d7b28 	.word	0x000d7b28

000d5d74 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5d74:	7c00      	ldrb	r0, [r0, #16]
   d5d76:	f7ff b82d 	b.w	d4dd4 <HAL_USART_Is_Enabled>
	...

000d5d7c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5d7c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5d7e:	4d0c      	ldr	r5, [pc, #48]	; (d5db0 <_Z22__fetch_global_Serial1v+0x34>)
   d5d80:	6829      	ldr	r1, [r5, #0]
   d5d82:	f011 0401 	ands.w	r4, r1, #1
   d5d86:	d111      	bne.n	d5dac <_Z22__fetch_global_Serial1v+0x30>
   d5d88:	4628      	mov	r0, r5
   d5d8a:	f7fe f98c 	bl	d40a6 <__cxa_guard_acquire>
   d5d8e:	b168      	cbz	r0, d5dac <_Z22__fetch_global_Serial1v+0x30>
   d5d90:	4a08      	ldr	r2, [pc, #32]	; (d5db4 <_Z22__fetch_global_Serial1v+0x38>)
   d5d92:	4b09      	ldr	r3, [pc, #36]	; (d5db8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5d94:	4809      	ldr	r0, [pc, #36]	; (d5dbc <_Z22__fetch_global_Serial1v+0x40>)
   d5d96:	4621      	mov	r1, r4
   d5d98:	f7ff ffd6 	bl	d5d48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5d9c:	4628      	mov	r0, r5
   d5d9e:	f7fe f987 	bl	d40b0 <__cxa_guard_release>
   d5da2:	4a07      	ldr	r2, [pc, #28]	; (d5dc0 <_Z22__fetch_global_Serial1v+0x44>)
   d5da4:	4907      	ldr	r1, [pc, #28]	; (d5dc4 <_Z22__fetch_global_Serial1v+0x48>)
   d5da6:	4805      	ldr	r0, [pc, #20]	; (d5dbc <_Z22__fetch_global_Serial1v+0x40>)
   d5da8:	f000 fabc 	bl	d6324 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5dac:	4803      	ldr	r0, [pc, #12]	; (d5dbc <_Z22__fetch_global_Serial1v+0x40>)
   d5dae:	bd38      	pop	{r3, r4, r5, pc}
   d5db0:	2003e4c0 	.word	0x2003e4c0
   d5db4:	2003e4c4 	.word	0x2003e4c4
   d5db8:	2003e43c 	.word	0x2003e43c
   d5dbc:	2003e428 	.word	0x2003e428
   d5dc0:	2003dd60 	.word	0x2003dd60
   d5dc4:	000d5cc5 	.word	0x000d5cc5

000d5dc8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5dc8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5dca:	6883      	ldr	r3, [r0, #8]
   d5dcc:	4604      	mov	r4, r0
   d5dce:	b90b      	cbnz	r3, d5dd4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5dd0:	f000 fac9 	bl	d6366 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5dd4:	68c3      	ldr	r3, [r0, #12]
   d5dd6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5dd8:	68a3      	ldr	r3, [r4, #8]
   d5dda:	b11b      	cbz	r3, d5de4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5ddc:	2203      	movs	r2, #3
   d5dde:	4621      	mov	r1, r4
   d5de0:	4620      	mov	r0, r4
   d5de2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5de4:	4620      	mov	r0, r4
   d5de6:	2110      	movs	r1, #16
}
   d5de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5dec:	f000 baa8 	b.w	d6340 <_ZdlPvj>

000d5df0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5df0:	4770      	bx	lr

000d5df2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5df4:	4606      	mov	r6, r0
   d5df6:	4615      	mov	r5, r2
   d5df8:	460c      	mov	r4, r1
   d5dfa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5dfc:	42bc      	cmp	r4, r7
   d5dfe:	d006      	beq.n	d5e0e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5e00:	6833      	ldr	r3, [r6, #0]
   d5e02:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5e06:	689b      	ldr	r3, [r3, #8]
   d5e08:	4630      	mov	r0, r6
   d5e0a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5e0c:	e7f6      	b.n	d5dfc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5e0e:	4628      	mov	r0, r5
   d5e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e12 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5e12:	2200      	movs	r2, #0
   d5e14:	7c00      	ldrb	r0, [r0, #16]
   d5e16:	f7ff b805 	b.w	d4e24 <HAL_I2C_Write_Data>

000d5e1a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5e1a:	2100      	movs	r1, #0
   d5e1c:	7c00      	ldrb	r0, [r0, #16]
   d5e1e:	f7ff b809 	b.w	d4e34 <HAL_I2C_Available_Data>

000d5e22 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5e22:	2100      	movs	r1, #0
   d5e24:	7c00      	ldrb	r0, [r0, #16]
   d5e26:	f7ff b80d 	b.w	d4e44 <HAL_I2C_Read_Data>

000d5e2a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5e2a:	2100      	movs	r1, #0
   d5e2c:	7c00      	ldrb	r0, [r0, #16]
   d5e2e:	f7ff b811 	b.w	d4e54 <HAL_I2C_Peek_Data>

000d5e32 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5e32:	2100      	movs	r1, #0
   d5e34:	7c00      	ldrb	r0, [r0, #16]
   d5e36:	f7ff b815 	b.w	d4e64 <HAL_I2C_Flush_Data>

000d5e3a <_ZN7TwoWireD0Ev>:
   d5e3a:	b510      	push	{r4, lr}
   d5e3c:	2114      	movs	r1, #20
   d5e3e:	4604      	mov	r4, r0
   d5e40:	f000 fa7e 	bl	d6340 <_ZdlPvj>
   d5e44:	4620      	mov	r0, r4
   d5e46:	bd10      	pop	{r4, pc}

000d5e48 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5e48:	b510      	push	{r4, lr}
   d5e4a:	4604      	mov	r4, r0
   d5e4c:	2300      	movs	r3, #0
   d5e4e:	6063      	str	r3, [r4, #4]
   d5e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e54:	60a3      	str	r3, [r4, #8]
   d5e56:	4b04      	ldr	r3, [pc, #16]	; (d5e68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5e58:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5e5a:	4608      	mov	r0, r1
   d5e5c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5e5e:	4611      	mov	r1, r2
   d5e60:	f7ff f810 	bl	d4e84 <HAL_I2C_Init>
}
   d5e64:	4620      	mov	r0, r4
   d5e66:	bd10      	pop	{r4, pc}
   d5e68:	000d7b58 	.word	0x000d7b58

000d5e6c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5e6c:	2300      	movs	r3, #0
   d5e6e:	461a      	mov	r2, r3
   d5e70:	4619      	mov	r1, r3
   d5e72:	7c00      	ldrb	r0, [r0, #16]
   d5e74:	f7fe bfbe 	b.w	d4df4 <HAL_I2C_Begin>

000d5e78 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5e78:	b570      	push	{r4, r5, r6, lr}
   d5e7a:	460c      	mov	r4, r1
   d5e7c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5e7e:	2514      	movs	r5, #20
   d5e80:	4606      	mov	r6, r0
   d5e82:	462a      	mov	r2, r5
   d5e84:	2100      	movs	r1, #0
   d5e86:	a801      	add	r0, sp, #4
   d5e88:	f001 fc79 	bl	d777e <memset>
   d5e8c:	7823      	ldrb	r3, [r4, #0]
   d5e8e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5e92:	6863      	ldr	r3, [r4, #4]
   d5e94:	9303      	str	r3, [sp, #12]
   d5e96:	68e3      	ldr	r3, [r4, #12]
   d5e98:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5e9a:	2200      	movs	r2, #0
   d5e9c:	7a23      	ldrb	r3, [r4, #8]
   d5e9e:	7c30      	ldrb	r0, [r6, #16]
   d5ea0:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5ea4:	a901      	add	r1, sp, #4
   d5ea6:	9305      	str	r3, [sp, #20]
   d5ea8:	f7fe fff4 	bl	d4e94 <HAL_I2C_Request_Data_Ex>
}
   d5eac:	b006      	add	sp, #24
   d5eae:	bd70      	pop	{r4, r5, r6, pc}

000d5eb0 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5eb2:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5eb4:	f88d 1000 	strb.w	r1, [sp]
   d5eb8:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5ebc:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5ebe:	bf18      	it	ne
   d5ec0:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5ec2:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5ec4:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5ec6:	f88d 3008 	strb.w	r3, [sp, #8]
   d5eca:	f7ff ffd5 	bl	d5e78 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5ece:	b005      	add	sp, #20
   d5ed0:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ed4 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5ed4:	2200      	movs	r2, #0
   d5ed6:	7c00      	ldrb	r0, [r0, #16]
   d5ed8:	f7fe bf94 	b.w	d4e04 <HAL_I2C_Begin_Transmission>

000d5edc <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5edc:	b2c9      	uxtb	r1, r1
   d5ede:	f7ff bff9 	b.w	d5ed4 <_ZN7TwoWire17beginTransmissionEh>

000d5ee2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5ee2:	2200      	movs	r2, #0
   d5ee4:	7c00      	ldrb	r0, [r0, #16]
   d5ee6:	f7fe bf95 	b.w	d4e14 <HAL_I2C_End_Transmission>

000d5eea <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5eea:	2100      	movs	r1, #0
   d5eec:	7c00      	ldrb	r0, [r0, #16]
   d5eee:	f7fe bfc1 	b.w	d4e74 <HAL_I2C_Is_Enabled>

000d5ef2 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ef2:	2200      	movs	r2, #0
   d5ef4:	4611      	mov	r1, r2
   d5ef6:	6840      	ldr	r0, [r0, #4]
   d5ef8:	f7ff b878 	b.w	d4fec <network_listening>

000d5efc <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5efc:	2200      	movs	r2, #0
   d5efe:	4611      	mov	r1, r2
   d5f00:	6840      	ldr	r0, [r0, #4]
   d5f02:	f7ff b883 	b.w	d500c <network_get_listen_timeout>

000d5f06 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5f06:	2200      	movs	r2, #0
   d5f08:	6840      	ldr	r0, [r0, #4]
   d5f0a:	f7ff b877 	b.w	d4ffc <network_set_listen_timeout>

000d5f0e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f0e:	2200      	movs	r2, #0
   d5f10:	f081 0101 	eor.w	r1, r1, #1
   d5f14:	6840      	ldr	r0, [r0, #4]
   d5f16:	f7ff b861 	b.w	d4fdc <network_listen>

000d5f1a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5f1a:	2300      	movs	r3, #0
   d5f1c:	461a      	mov	r2, r3
   d5f1e:	2101      	movs	r1, #1
   d5f20:	6840      	ldr	r0, [r0, #4]
   d5f22:	f7ff b853 	b.w	d4fcc <network_off>

000d5f26 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5f26:	2300      	movs	r3, #0
   d5f28:	461a      	mov	r2, r3
   d5f2a:	4619      	mov	r1, r3
   d5f2c:	6840      	ldr	r0, [r0, #4]
   d5f2e:	f7ff b845 	b.w	d4fbc <network_on>

000d5f32 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5f32:	2200      	movs	r2, #0
   d5f34:	4611      	mov	r1, r2
   d5f36:	6840      	ldr	r0, [r0, #4]
   d5f38:	f7ff b838 	b.w	d4fac <network_ready>

000d5f3c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f3c:	2200      	movs	r2, #0
   d5f3e:	4611      	mov	r1, r2
   d5f40:	6840      	ldr	r0, [r0, #4]
   d5f42:	f7ff b823 	b.w	d4f8c <network_connecting>

000d5f46 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f46:	2200      	movs	r2, #0
   d5f48:	2102      	movs	r1, #2
   d5f4a:	6840      	ldr	r0, [r0, #4]
   d5f4c:	f7ff b826 	b.w	d4f9c <network_disconnect>

000d5f50 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f50:	2300      	movs	r3, #0
   d5f52:	461a      	mov	r2, r3
   d5f54:	6840      	ldr	r0, [r0, #4]
   d5f56:	f7ff b811 	b.w	d4f7c <network_connect>

000d5f5a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5f5a:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f5c:	4605      	mov	r5, r0
   d5f5e:	b188      	cbz	r0, d5f84 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f60:	6804      	ldr	r4, [r0, #0]
   d5f62:	b14c      	cbz	r4, d5f78 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5f64:	68a3      	ldr	r3, [r4, #8]
   d5f66:	b11b      	cbz	r3, d5f70 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5f68:	2203      	movs	r2, #3
   d5f6a:	4621      	mov	r1, r4
   d5f6c:	4620      	mov	r0, r4
   d5f6e:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f70:	2110      	movs	r1, #16
   d5f72:	4620      	mov	r0, r4
   d5f74:	f000 f9e4 	bl	d6340 <_ZdlPvj>
   d5f78:	4628      	mov	r0, r5
   d5f7a:	2114      	movs	r1, #20
      }
   d5f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f80:	f000 b9de 	b.w	d6340 <_ZdlPvj>
   d5f84:	bd38      	pop	{r3, r4, r5, pc}

000d5f86 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5f86:	b110      	cbz	r0, d5f8e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5f88:	6803      	ldr	r3, [r0, #0]
   d5f8a:	685b      	ldr	r3, [r3, #4]
   d5f8c:	4718      	bx	r3
   d5f8e:	4770      	bx	lr

000d5f90 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5f90:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5f92:	6803      	ldr	r3, [r0, #0]
   d5f94:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5f96:	b1bb      	cbz	r3, d5fc8 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5f98:	6858      	ldr	r0, [r3, #4]
   d5f9a:	f7fe febb 	bl	d4d14 <os_thread_is_current>
   d5f9e:	b978      	cbnz	r0, d5fc0 <_ZN6ThreadD1Ev+0x30>
   d5fa0:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5fa2:	7c5a      	ldrb	r2, [r3, #17]
   d5fa4:	b912      	cbnz	r2, d5fac <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5fa6:	6858      	ldr	r0, [r3, #4]
   d5fa8:	f7fe febc 	bl	d4d24 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5fac:	6823      	ldr	r3, [r4, #0]
   d5fae:	6858      	ldr	r0, [r3, #4]
   d5fb0:	f7fe fec0 	bl	d4d34 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5fb4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5fb6:	2300      	movs	r3, #0
   d5fb8:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5fba:	b128      	cbz	r0, d5fc8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5fbc:	f7ff ffcd 	bl	d5f5a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fc0:	6820      	ldr	r0, [r4, #0]
   d5fc2:	b108      	cbz	r0, d5fc8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5fc4:	f7ff ffc9 	bl	d5f5a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5fc8:	4620      	mov	r0, r4
   d5fca:	bd10      	pop	{r4, pc}

000d5fcc <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5fcc:	b538      	push	{r3, r4, r5, lr}
   d5fce:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fd0:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5fd4:	b108      	cbz	r0, d5fda <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5fd6:	f7fe f864 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5fda:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5fde:	b108      	cbz	r0, d5fe4 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5fe0:	f7fe feb8 	bl	d4d54 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fe4:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5fe8:	b135      	cbz	r5, d5ff8 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5fea:	4628      	mov	r0, r5
   d5fec:	f7ff ffd0 	bl	d5f90 <_ZN6ThreadD1Ev>
   d5ff0:	2104      	movs	r1, #4
   d5ff2:	4628      	mov	r0, r5
   d5ff4:	f000 f9a4 	bl	d6340 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ff8:	6820      	ldr	r0, [r4, #0]
   d5ffa:	b108      	cbz	r0, d6000 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5ffc:	f7ff ffc3 	bl	d5f86 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6000:	4620      	mov	r0, r4
   d6002:	bd38      	pop	{r3, r4, r5, pc}

000d6004 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6004:	b510      	push	{r4, lr}
   d6006:	4b04      	ldr	r3, [pc, #16]	; (d6018 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6008:	4604      	mov	r4, r0
   d600a:	f840 3b08 	str.w	r3, [r0], #8
   d600e:	f7ff ffdd 	bl	d5fcc <_ZN5spark11MeshPublishD1Ev>
   d6012:	4620      	mov	r0, r4
   d6014:	bd10      	pop	{r4, pc}
   d6016:	bf00      	nop
   d6018:	000d7b80 	.word	0x000d7b80

000d601c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d601c:	b538      	push	{r3, r4, r5, lr}
   d601e:	4c0e      	ldr	r4, [pc, #56]	; (d6058 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6020:	4b0e      	ldr	r3, [pc, #56]	; (d605c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6022:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6024:	2500      	movs	r5, #0
   d6026:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6028:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d602c:	6063      	str	r3, [r4, #4]
   d602e:	60a5      	str	r5, [r4, #8]
   d6030:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6034:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6038:	f7fe fe84 	bl	d4d44 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d603c:	4b08      	ldr	r3, [pc, #32]	; (d6060 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d603e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6042:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6046:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6048:	4620      	mov	r0, r4
   d604a:	4a06      	ldr	r2, [pc, #24]	; (d6064 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d604c:	4906      	ldr	r1, [pc, #24]	; (d6068 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d604e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6052:	f000 b967 	b.w	d6324 <__aeabi_atexit>
   d6056:	bf00      	nop
   d6058:	2003e548 	.word	0x2003e548
   d605c:	000d7bb4 	.word	0x000d7bb4
   d6060:	000d7b80 	.word	0x000d7b80
   d6064:	2003dd60 	.word	0x2003dd60
   d6068:	000d6005 	.word	0x000d6005

000d606c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d606c:	2300      	movs	r3, #0
   d606e:	461a      	mov	r2, r3
   d6070:	6840      	ldr	r0, [r0, #4]
   d6072:	f7fe bf83 	b.w	d4f7c <network_connect>

000d6076 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6076:	2200      	movs	r2, #0
   d6078:	2102      	movs	r1, #2
   d607a:	6840      	ldr	r0, [r0, #4]
   d607c:	f7fe bf8e 	b.w	d4f9c <network_disconnect>

000d6080 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6080:	2200      	movs	r2, #0
   d6082:	4611      	mov	r1, r2
   d6084:	6840      	ldr	r0, [r0, #4]
   d6086:	f7fe bf81 	b.w	d4f8c <network_connecting>

000d608a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d608a:	2200      	movs	r2, #0
   d608c:	4611      	mov	r1, r2
   d608e:	6840      	ldr	r0, [r0, #4]
   d6090:	f7fe bf8c 	b.w	d4fac <network_ready>

000d6094 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6094:	2300      	movs	r3, #0
   d6096:	461a      	mov	r2, r3
   d6098:	4619      	mov	r1, r3
   d609a:	6840      	ldr	r0, [r0, #4]
   d609c:	f7fe bf8e 	b.w	d4fbc <network_on>

000d60a0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d60a0:	2300      	movs	r3, #0
   d60a2:	461a      	mov	r2, r3
   d60a4:	4619      	mov	r1, r3
   d60a6:	6840      	ldr	r0, [r0, #4]
   d60a8:	f7fe bf90 	b.w	d4fcc <network_off>

000d60ac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d60ac:	2200      	movs	r2, #0
   d60ae:	f081 0101 	eor.w	r1, r1, #1
   d60b2:	6840      	ldr	r0, [r0, #4]
   d60b4:	f7fe bf92 	b.w	d4fdc <network_listen>

000d60b8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d60b8:	2200      	movs	r2, #0
   d60ba:	6840      	ldr	r0, [r0, #4]
   d60bc:	f7fe bf9e 	b.w	d4ffc <network_set_listen_timeout>

000d60c0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d60c0:	2200      	movs	r2, #0
   d60c2:	4611      	mov	r1, r2
   d60c4:	6840      	ldr	r0, [r0, #4]
   d60c6:	f7fe bfa1 	b.w	d500c <network_get_listen_timeout>

000d60ca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d60ca:	2200      	movs	r2, #0
   d60cc:	4611      	mov	r1, r2
   d60ce:	6840      	ldr	r0, [r0, #4]
   d60d0:	f7fe bf8c 	b.w	d4fec <network_listening>

000d60d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d60d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d60d8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d60da:	b095      	sub	sp, #84	; 0x54
   d60dc:	4616      	mov	r6, r2
   d60de:	460d      	mov	r5, r1
   d60e0:	4607      	mov	r7, r0
    IPAddress addr;
   d60e2:	f7ff fce3 	bl	d5aac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d60e6:	4621      	mov	r1, r4
   d60e8:	2220      	movs	r2, #32
   d60ea:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d60ec:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d60ee:	f001 fb46 	bl	d777e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d60f2:	2340      	movs	r3, #64	; 0x40
   d60f4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d60f6:	4621      	mov	r1, r4
   d60f8:	466b      	mov	r3, sp
   d60fa:	aa0c      	add	r2, sp, #48	; 0x30
   d60fc:	4630      	mov	r0, r6
   d60fe:	f7fe fdb1 	bl	d4c64 <netdb_getaddrinfo>
    if (!r) {
   d6102:	4604      	mov	r4, r0
   d6104:	2800      	cmp	r0, #0
   d6106:	d144      	bne.n	d6192 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6108:	4602      	mov	r2, r0
   d610a:	2101      	movs	r1, #1
   d610c:	6868      	ldr	r0, [r5, #4]
   d610e:	f7fe ff4d 	bl	d4fac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6112:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6114:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6116:	4622      	mov	r2, r4
   d6118:	6868      	ldr	r0, [r5, #4]
   d611a:	f7fe ff47 	bl	d4fac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d611e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6120:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6122:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6124:	2e00      	cmp	r6, #0
   d6126:	d034      	beq.n	d6192 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6128:	2900      	cmp	r1, #0
   d612a:	d132      	bne.n	d6192 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d612c:	6873      	ldr	r3, [r6, #4]
   d612e:	2b02      	cmp	r3, #2
   d6130:	d002      	beq.n	d6138 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6132:	2b0a      	cmp	r3, #10
   d6134:	d009      	beq.n	d614a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6136:	e02a      	b.n	d618e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6138:	f1b8 0f00 	cmp.w	r8, #0
   d613c:	d027      	beq.n	d618e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d613e:	6971      	ldr	r1, [r6, #20]
   d6140:	4638      	mov	r0, r7
   d6142:	3104      	adds	r1, #4
   d6144:	f7ff fcdf 	bl	d5b06 <_ZN9IPAddressaSEPKh>
   d6148:	e020      	b.n	d618c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d614a:	f1b9 0f00 	cmp.w	r9, #0
   d614e:	d01e      	beq.n	d618e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6150:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6152:	2211      	movs	r2, #17
   d6154:	a801      	add	r0, sp, #4
   d6156:	f001 fb12 	bl	d777e <memset>
                    a.v = 6;
   d615a:	2306      	movs	r3, #6
   d615c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6160:	ad01      	add	r5, sp, #4
   d6162:	f104 0308 	add.w	r3, r4, #8
   d6166:	3418      	adds	r4, #24
   d6168:	6818      	ldr	r0, [r3, #0]
   d616a:	6859      	ldr	r1, [r3, #4]
   d616c:	462a      	mov	r2, r5
   d616e:	c203      	stmia	r2!, {r0, r1}
   d6170:	3308      	adds	r3, #8
   d6172:	42a3      	cmp	r3, r4
   d6174:	4615      	mov	r5, r2
   d6176:	d1f7      	bne.n	d6168 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6178:	a901      	add	r1, sp, #4
   d617a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d617c:	ad07      	add	r5, sp, #28
   d617e:	f7ff fca3 	bl	d5ac8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6184:	1d3c      	adds	r4, r7, #4
   d6186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6188:	682b      	ldr	r3, [r5, #0]
   d618a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d618c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d618e:	69f6      	ldr	r6, [r6, #28]
   d6190:	e7c8      	b.n	d6124 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6192:	9800      	ldr	r0, [sp, #0]
   d6194:	f7fe fd5e 	bl	d4c54 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6198:	4638      	mov	r0, r7
   d619a:	b015      	add	sp, #84	; 0x54
   d619c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d61a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d61a0:	4b02      	ldr	r3, [pc, #8]	; (d61ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d61a2:	4a03      	ldr	r2, [pc, #12]	; (d61b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d61a4:	601a      	str	r2, [r3, #0]
   d61a6:	2200      	movs	r2, #0
   d61a8:	605a      	str	r2, [r3, #4]
   d61aa:	4770      	bx	lr
   d61ac:	2003e71c 	.word	0x2003e71c
   d61b0:	000d7bb4 	.word	0x000d7bb4

000d61b4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d61b4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d61b6:	4e18      	ldr	r6, [pc, #96]	; (d6218 <pinAvailable+0x64>)
   d61b8:	6831      	ldr	r1, [r6, #0]
   d61ba:	f011 0501 	ands.w	r5, r1, #1
   d61be:	4604      	mov	r4, r0
   d61c0:	d10a      	bne.n	d61d8 <pinAvailable+0x24>
   d61c2:	4630      	mov	r0, r6
   d61c4:	f7fd ff6f 	bl	d40a6 <__cxa_guard_acquire>
   d61c8:	b130      	cbz	r0, d61d8 <pinAvailable+0x24>
   d61ca:	4629      	mov	r1, r5
   d61cc:	4813      	ldr	r0, [pc, #76]	; (d621c <pinAvailable+0x68>)
   d61ce:	f7fe ffbb 	bl	d5148 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d61d2:	4630      	mov	r0, r6
   d61d4:	f7fd ff6c 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d61d8:	4810      	ldr	r0, [pc, #64]	; (d621c <pinAvailable+0x68>)
   d61da:	f7fe ffbf 	bl	d515c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d61de:	b128      	cbz	r0, d61ec <pinAvailable+0x38>
   d61e0:	f1a4 030b 	sub.w	r3, r4, #11
   d61e4:	2b02      	cmp	r3, #2
   d61e6:	d801      	bhi.n	d61ec <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d61e8:	2000      	movs	r0, #0
   d61ea:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d61ec:	f000 f874 	bl	d62d8 <_Z19__fetch_global_Wirev>
   d61f0:	f7ff fe7b 	bl	d5eea <_ZN7TwoWire9isEnabledEv>
   d61f4:	b108      	cbz	r0, d61fa <pinAvailable+0x46>
   d61f6:	2c01      	cmp	r4, #1
   d61f8:	d9f6      	bls.n	d61e8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d61fa:	f7ff fdbf 	bl	d5d7c <_Z22__fetch_global_Serial1v>
   d61fe:	f7ff fdb9 	bl	d5d74 <_ZN11USARTSerial9isEnabledEv>
   d6202:	b118      	cbz	r0, d620c <pinAvailable+0x58>
   d6204:	f1a4 0309 	sub.w	r3, r4, #9
   d6208:	2b01      	cmp	r3, #1
   d620a:	d9ed      	bls.n	d61e8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d620c:	2c23      	cmp	r4, #35	; 0x23
   d620e:	bf8c      	ite	hi
   d6210:	2000      	movhi	r0, #0
   d6212:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6214:	bd70      	pop	{r4, r5, r6, pc}
   d6216:	bf00      	nop
   d6218:	2003e724 	.word	0x2003e724
   d621c:	2003e728 	.word	0x2003e728

000d6220 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6220:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6222:	b538      	push	{r3, r4, r5, lr}
   d6224:	4604      	mov	r4, r0
   d6226:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6228:	d80a      	bhi.n	d6240 <pinMode+0x20>
   d622a:	29ff      	cmp	r1, #255	; 0xff
   d622c:	d008      	beq.n	d6240 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d622e:	f7ff ffc1 	bl	d61b4 <pinAvailable>
   d6232:	b128      	cbz	r0, d6240 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6234:	4629      	mov	r1, r5
   d6236:	4620      	mov	r0, r4
}
   d6238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d623c:	f7fe bd2a 	b.w	d4c94 <HAL_Pin_Mode>
   d6240:	bd38      	pop	{r3, r4, r5, pc}

000d6242 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6242:	b538      	push	{r3, r4, r5, lr}
   d6244:	4604      	mov	r4, r0
   d6246:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6248:	f7fe fd2c 	bl	d4ca4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d624c:	28ff      	cmp	r0, #255	; 0xff
   d624e:	d010      	beq.n	d6272 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6250:	2806      	cmp	r0, #6
   d6252:	d804      	bhi.n	d625e <digitalWrite+0x1c>
   d6254:	234d      	movs	r3, #77	; 0x4d
   d6256:	fa23 f000 	lsr.w	r0, r3, r0
   d625a:	07c3      	lsls	r3, r0, #31
   d625c:	d409      	bmi.n	d6272 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d625e:	4620      	mov	r0, r4
   d6260:	f7ff ffa8 	bl	d61b4 <pinAvailable>
   d6264:	b128      	cbz	r0, d6272 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6266:	4629      	mov	r1, r5
   d6268:	4620      	mov	r0, r4
}
   d626a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d626e:	f7fe bd21 	b.w	d4cb4 <HAL_GPIO_Write>
   d6272:	bd38      	pop	{r3, r4, r5, pc}

000d6274 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6274:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6276:	b510      	push	{r4, lr}
   d6278:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d627a:	bf9c      	itt	ls
   d627c:	340e      	addls	r4, #14
   d627e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6280:	4620      	mov	r0, r4
   d6282:	f7ff ff97 	bl	d61b4 <pinAvailable>
   d6286:	b150      	cbz	r0, d629e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6288:	2103      	movs	r1, #3
   d628a:	4620      	mov	r0, r4
   d628c:	f7fe fcfa 	bl	d4c84 <HAL_Validate_Pin_Function>
   d6290:	2803      	cmp	r0, #3
   d6292:	d104      	bne.n	d629e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6294:	4620      	mov	r0, r4
}
   d6296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d629a:	f7fe bd13 	b.w	d4cc4 <HAL_ADC_Read>
}
   d629e:	2000      	movs	r0, #0
   d62a0:	bd10      	pop	{r4, pc}
	...

000d62a4 <_Z17acquireWireBufferv>:
   d62a4:	b570      	push	{r4, r5, r6, lr}
   d62a6:	4604      	mov	r4, r0
   d62a8:	2514      	movs	r5, #20
   d62aa:	462a      	mov	r2, r5
   d62ac:	4e09      	ldr	r6, [pc, #36]	; (d62d4 <_Z17acquireWireBufferv+0x30>)
   d62ae:	2100      	movs	r1, #0
   d62b0:	f001 fa65 	bl	d777e <memset>
   d62b4:	8025      	strh	r5, [r4, #0]
   d62b6:	2520      	movs	r5, #32
   d62b8:	4631      	mov	r1, r6
   d62ba:	60a5      	str	r5, [r4, #8]
   d62bc:	6125      	str	r5, [r4, #16]
   d62be:	4628      	mov	r0, r5
   d62c0:	f000 f840 	bl	d6344 <_ZnajRKSt9nothrow_t>
   d62c4:	4631      	mov	r1, r6
   d62c6:	6060      	str	r0, [r4, #4]
   d62c8:	4628      	mov	r0, r5
   d62ca:	f000 f83b 	bl	d6344 <_ZnajRKSt9nothrow_t>
   d62ce:	60e0      	str	r0, [r4, #12]
   d62d0:	4620      	mov	r0, r4
   d62d2:	bd70      	pop	{r4, r5, r6, pc}
   d62d4:	000d7be0 	.word	0x000d7be0

000d62d8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d62d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d62da:	4d0e      	ldr	r5, [pc, #56]	; (d6314 <_Z19__fetch_global_Wirev+0x3c>)
   d62dc:	6829      	ldr	r1, [r5, #0]
   d62de:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d62e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d62e4:	d113      	bne.n	d630e <_Z19__fetch_global_Wirev+0x36>
   d62e6:	4628      	mov	r0, r5
   d62e8:	f7fd fedd 	bl	d40a6 <__cxa_guard_acquire>
   d62ec:	b178      	cbz	r0, d630e <_Z19__fetch_global_Wirev+0x36>
   d62ee:	a801      	add	r0, sp, #4
   d62f0:	f7ff ffd8 	bl	d62a4 <_Z17acquireWireBufferv>
   d62f4:	aa01      	add	r2, sp, #4
   d62f6:	4621      	mov	r1, r4
   d62f8:	4807      	ldr	r0, [pc, #28]	; (d6318 <_Z19__fetch_global_Wirev+0x40>)
   d62fa:	f7ff fda5 	bl	d5e48 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d62fe:	4628      	mov	r0, r5
   d6300:	f7fd fed6 	bl	d40b0 <__cxa_guard_release>
   d6304:	4a05      	ldr	r2, [pc, #20]	; (d631c <_Z19__fetch_global_Wirev+0x44>)
   d6306:	4906      	ldr	r1, [pc, #24]	; (d6320 <_Z19__fetch_global_Wirev+0x48>)
   d6308:	4803      	ldr	r0, [pc, #12]	; (d6318 <_Z19__fetch_global_Wirev+0x40>)
   d630a:	f000 f80b 	bl	d6324 <__aeabi_atexit>
	return wire;
}
   d630e:	4802      	ldr	r0, [pc, #8]	; (d6318 <_Z19__fetch_global_Wirev+0x40>)
   d6310:	b007      	add	sp, #28
   d6312:	bd30      	pop	{r4, r5, pc}
   d6314:	2003e734 	.word	0x2003e734
   d6318:	2003e738 	.word	0x2003e738
   d631c:	2003dd60 	.word	0x2003dd60
   d6320:	000d5df1 	.word	0x000d5df1

000d6324 <__aeabi_atexit>:
   d6324:	460b      	mov	r3, r1
   d6326:	4601      	mov	r1, r0
   d6328:	4618      	mov	r0, r3
   d632a:	f001 ba0f 	b.w	d774c <__cxa_atexit>
	...

000d6330 <_ZSt15get_new_handlerv>:
   d6330:	4b02      	ldr	r3, [pc, #8]	; (d633c <_ZSt15get_new_handlerv+0xc>)
   d6332:	6818      	ldr	r0, [r3, #0]
   d6334:	f3bf 8f5f 	dmb	sy
   d6338:	4770      	bx	lr
   d633a:	bf00      	nop
   d633c:	2003e74c 	.word	0x2003e74c

000d6340 <_ZdlPvj>:
   d6340:	f7fd bead 	b.w	d409e <_ZdlPv>

000d6344 <_ZnajRKSt9nothrow_t>:
   d6344:	f000 b800 	b.w	d6348 <_ZnwjRKSt9nothrow_t>

000d6348 <_ZnwjRKSt9nothrow_t>:
   d6348:	b510      	push	{r4, lr}
   d634a:	2800      	cmp	r0, #0
   d634c:	bf14      	ite	ne
   d634e:	4604      	movne	r4, r0
   d6350:	2401      	moveq	r4, #1
   d6352:	4620      	mov	r0, r4
   d6354:	f7fe fe82 	bl	d505c <malloc>
   d6358:	b920      	cbnz	r0, d6364 <_ZnwjRKSt9nothrow_t+0x1c>
   d635a:	f7ff ffe9 	bl	d6330 <_ZSt15get_new_handlerv>
   d635e:	b108      	cbz	r0, d6364 <_ZnwjRKSt9nothrow_t+0x1c>
   d6360:	4780      	blx	r0
   d6362:	e7f6      	b.n	d6352 <_ZnwjRKSt9nothrow_t+0xa>
   d6364:	bd10      	pop	{r4, pc}

000d6366 <_ZSt25__throw_bad_function_callv>:
   d6366:	b508      	push	{r3, lr}
   d6368:	f7fe fe98 	bl	d509c <abort>

000d636c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d636c:	4b18      	ldr	r3, [pc, #96]	; (d63d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d636e:	681a      	ldr	r2, [r3, #0]
   d6370:	07d1      	lsls	r1, r2, #31
   d6372:	bf5c      	itt	pl
   d6374:	2201      	movpl	r2, #1
   d6376:	601a      	strpl	r2, [r3, #0]
   d6378:	4b16      	ldr	r3, [pc, #88]	; (d63d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d637a:	681a      	ldr	r2, [r3, #0]
   d637c:	07d2      	lsls	r2, r2, #31
   d637e:	bf5c      	itt	pl
   d6380:	2201      	movpl	r2, #1
   d6382:	601a      	strpl	r2, [r3, #0]
   d6384:	4b14      	ldr	r3, [pc, #80]	; (d63d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6386:	681a      	ldr	r2, [r3, #0]
   d6388:	07d0      	lsls	r0, r2, #31
   d638a:	bf5c      	itt	pl
   d638c:	2201      	movpl	r2, #1
   d638e:	601a      	strpl	r2, [r3, #0]
   d6390:	4b12      	ldr	r3, [pc, #72]	; (d63dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6392:	681a      	ldr	r2, [r3, #0]
   d6394:	07d1      	lsls	r1, r2, #31
   d6396:	bf5c      	itt	pl
   d6398:	2201      	movpl	r2, #1
   d639a:	601a      	strpl	r2, [r3, #0]
   d639c:	4b10      	ldr	r3, [pc, #64]	; (d63e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d639e:	681a      	ldr	r2, [r3, #0]
   d63a0:	07d2      	lsls	r2, r2, #31
   d63a2:	bf5c      	itt	pl
   d63a4:	2201      	movpl	r2, #1
   d63a6:	601a      	strpl	r2, [r3, #0]
   d63a8:	4b0e      	ldr	r3, [pc, #56]	; (d63e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63aa:	681a      	ldr	r2, [r3, #0]
   d63ac:	07d0      	lsls	r0, r2, #31
   d63ae:	bf5c      	itt	pl
   d63b0:	2201      	movpl	r2, #1
   d63b2:	601a      	strpl	r2, [r3, #0]
   d63b4:	4b0c      	ldr	r3, [pc, #48]	; (d63e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63b6:	681a      	ldr	r2, [r3, #0]
   d63b8:	07d1      	lsls	r1, r2, #31
   d63ba:	bf5c      	itt	pl
   d63bc:	2201      	movpl	r2, #1
   d63be:	601a      	strpl	r2, [r3, #0]
   d63c0:	4b0a      	ldr	r3, [pc, #40]	; (d63ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63c2:	681a      	ldr	r2, [r3, #0]
   d63c4:	07d2      	lsls	r2, r2, #31
   d63c6:	bf5c      	itt	pl
   d63c8:	2201      	movpl	r2, #1
   d63ca:	601a      	strpl	r2, [r3, #0]
   d63cc:	4770      	bx	lr
   d63ce:	bf00      	nop
   d63d0:	2003e76c 	.word	0x2003e76c
   d63d4:	2003e768 	.word	0x2003e768
   d63d8:	2003e764 	.word	0x2003e764
   d63dc:	2003e760 	.word	0x2003e760
   d63e0:	2003e75c 	.word	0x2003e75c
   d63e4:	2003e758 	.word	0x2003e758
   d63e8:	2003e754 	.word	0x2003e754
   d63ec:	2003e750 	.word	0x2003e750

000d63f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d63f0:	4b24      	ldr	r3, [pc, #144]	; (d6484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d63f2:	681a      	ldr	r2, [r3, #0]
   d63f4:	07d0      	lsls	r0, r2, #31
   d63f6:	bf5c      	itt	pl
   d63f8:	2201      	movpl	r2, #1
   d63fa:	601a      	strpl	r2, [r3, #0]
   d63fc:	4b22      	ldr	r3, [pc, #136]	; (d6488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d63fe:	681a      	ldr	r2, [r3, #0]
   d6400:	07d1      	lsls	r1, r2, #31
   d6402:	bf5c      	itt	pl
   d6404:	2201      	movpl	r2, #1
   d6406:	601a      	strpl	r2, [r3, #0]
   d6408:	4b20      	ldr	r3, [pc, #128]	; (d648c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d640a:	681a      	ldr	r2, [r3, #0]
   d640c:	07d2      	lsls	r2, r2, #31
   d640e:	bf5c      	itt	pl
   d6410:	2201      	movpl	r2, #1
   d6412:	601a      	strpl	r2, [r3, #0]
   d6414:	4b1e      	ldr	r3, [pc, #120]	; (d6490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6416:	681a      	ldr	r2, [r3, #0]
   d6418:	07d0      	lsls	r0, r2, #31
   d641a:	bf5c      	itt	pl
   d641c:	2201      	movpl	r2, #1
   d641e:	601a      	strpl	r2, [r3, #0]
   d6420:	4b1c      	ldr	r3, [pc, #112]	; (d6494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6422:	681a      	ldr	r2, [r3, #0]
   d6424:	07d1      	lsls	r1, r2, #31
   d6426:	bf5c      	itt	pl
   d6428:	2201      	movpl	r2, #1
   d642a:	601a      	strpl	r2, [r3, #0]
   d642c:	4b1a      	ldr	r3, [pc, #104]	; (d6498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d642e:	681a      	ldr	r2, [r3, #0]
   d6430:	07d2      	lsls	r2, r2, #31
   d6432:	bf5c      	itt	pl
   d6434:	2201      	movpl	r2, #1
   d6436:	601a      	strpl	r2, [r3, #0]
   d6438:	4b18      	ldr	r3, [pc, #96]	; (d649c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d643a:	681a      	ldr	r2, [r3, #0]
   d643c:	07d0      	lsls	r0, r2, #31
   d643e:	bf5c      	itt	pl
   d6440:	2201      	movpl	r2, #1
   d6442:	601a      	strpl	r2, [r3, #0]
   d6444:	4b16      	ldr	r3, [pc, #88]	; (d64a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6446:	681a      	ldr	r2, [r3, #0]
   d6448:	07d1      	lsls	r1, r2, #31
   d644a:	bf5c      	itt	pl
   d644c:	2201      	movpl	r2, #1
   d644e:	601a      	strpl	r2, [r3, #0]
   d6450:	4b14      	ldr	r3, [pc, #80]	; (d64a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6452:	681a      	ldr	r2, [r3, #0]
   d6454:	07d2      	lsls	r2, r2, #31
   d6456:	bf5c      	itt	pl
   d6458:	2201      	movpl	r2, #1
   d645a:	601a      	strpl	r2, [r3, #0]
   d645c:	4b12      	ldr	r3, [pc, #72]	; (d64a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d645e:	681a      	ldr	r2, [r3, #0]
   d6460:	07d0      	lsls	r0, r2, #31
   d6462:	bf5c      	itt	pl
   d6464:	2201      	movpl	r2, #1
   d6466:	601a      	strpl	r2, [r3, #0]
   d6468:	4b10      	ldr	r3, [pc, #64]	; (d64ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d646a:	681a      	ldr	r2, [r3, #0]
   d646c:	07d1      	lsls	r1, r2, #31
   d646e:	bf5c      	itt	pl
   d6470:	2201      	movpl	r2, #1
   d6472:	601a      	strpl	r2, [r3, #0]
   d6474:	4b0e      	ldr	r3, [pc, #56]	; (d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6476:	681a      	ldr	r2, [r3, #0]
   d6478:	07d2      	lsls	r2, r2, #31
   d647a:	bf5c      	itt	pl
   d647c:	2201      	movpl	r2, #1
   d647e:	601a      	strpl	r2, [r3, #0]
   d6480:	4770      	bx	lr
   d6482:	bf00      	nop
   d6484:	2003e79c 	.word	0x2003e79c
   d6488:	2003e798 	.word	0x2003e798
   d648c:	2003e794 	.word	0x2003e794
   d6490:	2003e790 	.word	0x2003e790
   d6494:	2003e78c 	.word	0x2003e78c
   d6498:	2003e788 	.word	0x2003e788
   d649c:	2003e784 	.word	0x2003e784
   d64a0:	2003e780 	.word	0x2003e780
   d64a4:	2003e77c 	.word	0x2003e77c
   d64a8:	2003e778 	.word	0x2003e778
   d64ac:	2003e774 	.word	0x2003e774
   d64b0:	2003e770 	.word	0x2003e770

000d64b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d64b4:	4b24      	ldr	r3, [pc, #144]	; (d6548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d64b6:	681a      	ldr	r2, [r3, #0]
   d64b8:	07d0      	lsls	r0, r2, #31
   d64ba:	bf5c      	itt	pl
   d64bc:	2201      	movpl	r2, #1
   d64be:	601a      	strpl	r2, [r3, #0]
   d64c0:	4b22      	ldr	r3, [pc, #136]	; (d654c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d64c2:	681a      	ldr	r2, [r3, #0]
   d64c4:	07d1      	lsls	r1, r2, #31
   d64c6:	bf5c      	itt	pl
   d64c8:	2201      	movpl	r2, #1
   d64ca:	601a      	strpl	r2, [r3, #0]
   d64cc:	4b20      	ldr	r3, [pc, #128]	; (d6550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d64ce:	681a      	ldr	r2, [r3, #0]
   d64d0:	07d2      	lsls	r2, r2, #31
   d64d2:	bf5c      	itt	pl
   d64d4:	2201      	movpl	r2, #1
   d64d6:	601a      	strpl	r2, [r3, #0]
   d64d8:	4b1e      	ldr	r3, [pc, #120]	; (d6554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d64da:	681a      	ldr	r2, [r3, #0]
   d64dc:	07d0      	lsls	r0, r2, #31
   d64de:	bf5c      	itt	pl
   d64e0:	2201      	movpl	r2, #1
   d64e2:	601a      	strpl	r2, [r3, #0]
   d64e4:	4b1c      	ldr	r3, [pc, #112]	; (d6558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	07d1      	lsls	r1, r2, #31
   d64ea:	bf5c      	itt	pl
   d64ec:	2201      	movpl	r2, #1
   d64ee:	601a      	strpl	r2, [r3, #0]
   d64f0:	4b1a      	ldr	r3, [pc, #104]	; (d655c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d64f2:	681a      	ldr	r2, [r3, #0]
   d64f4:	07d2      	lsls	r2, r2, #31
   d64f6:	bf5c      	itt	pl
   d64f8:	2201      	movpl	r2, #1
   d64fa:	601a      	strpl	r2, [r3, #0]
   d64fc:	4b18      	ldr	r3, [pc, #96]	; (d6560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d64fe:	681a      	ldr	r2, [r3, #0]
   d6500:	07d0      	lsls	r0, r2, #31
   d6502:	bf5c      	itt	pl
   d6504:	2201      	movpl	r2, #1
   d6506:	601a      	strpl	r2, [r3, #0]
   d6508:	4b16      	ldr	r3, [pc, #88]	; (d6564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d650a:	681a      	ldr	r2, [r3, #0]
   d650c:	07d1      	lsls	r1, r2, #31
   d650e:	bf5c      	itt	pl
   d6510:	2201      	movpl	r2, #1
   d6512:	601a      	strpl	r2, [r3, #0]
   d6514:	4b14      	ldr	r3, [pc, #80]	; (d6568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6516:	681a      	ldr	r2, [r3, #0]
   d6518:	07d2      	lsls	r2, r2, #31
   d651a:	bf5c      	itt	pl
   d651c:	2201      	movpl	r2, #1
   d651e:	601a      	strpl	r2, [r3, #0]
   d6520:	4b12      	ldr	r3, [pc, #72]	; (d656c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6522:	681a      	ldr	r2, [r3, #0]
   d6524:	07d0      	lsls	r0, r2, #31
   d6526:	bf5c      	itt	pl
   d6528:	2201      	movpl	r2, #1
   d652a:	601a      	strpl	r2, [r3, #0]
   d652c:	4b10      	ldr	r3, [pc, #64]	; (d6570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d652e:	681a      	ldr	r2, [r3, #0]
   d6530:	07d1      	lsls	r1, r2, #31
   d6532:	bf5c      	itt	pl
   d6534:	2201      	movpl	r2, #1
   d6536:	601a      	strpl	r2, [r3, #0]
   d6538:	4b0e      	ldr	r3, [pc, #56]	; (d6574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d653a:	681a      	ldr	r2, [r3, #0]
   d653c:	07d2      	lsls	r2, r2, #31
   d653e:	bf5c      	itt	pl
   d6540:	2201      	movpl	r2, #1
   d6542:	601a      	strpl	r2, [r3, #0]
   d6544:	4770      	bx	lr
   d6546:	bf00      	nop
   d6548:	2003e7cc 	.word	0x2003e7cc
   d654c:	2003e7c8 	.word	0x2003e7c8
   d6550:	2003e7c4 	.word	0x2003e7c4
   d6554:	2003e7c0 	.word	0x2003e7c0
   d6558:	2003e7bc 	.word	0x2003e7bc
   d655c:	2003e7b8 	.word	0x2003e7b8
   d6560:	2003e7b4 	.word	0x2003e7b4
   d6564:	2003e7b0 	.word	0x2003e7b0
   d6568:	2003e7ac 	.word	0x2003e7ac
   d656c:	2003e7a8 	.word	0x2003e7a8
   d6570:	2003e7a4 	.word	0x2003e7a4
   d6574:	2003e7a0 	.word	0x2003e7a0

000d6578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6578:	4b18      	ldr	r3, [pc, #96]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d657a:	681a      	ldr	r2, [r3, #0]
   d657c:	07d1      	lsls	r1, r2, #31
   d657e:	bf5c      	itt	pl
   d6580:	2201      	movpl	r2, #1
   d6582:	601a      	strpl	r2, [r3, #0]
   d6584:	4b16      	ldr	r3, [pc, #88]	; (d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6586:	681a      	ldr	r2, [r3, #0]
   d6588:	07d2      	lsls	r2, r2, #31
   d658a:	bf5c      	itt	pl
   d658c:	2201      	movpl	r2, #1
   d658e:	601a      	strpl	r2, [r3, #0]
   d6590:	4b14      	ldr	r3, [pc, #80]	; (d65e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6592:	681a      	ldr	r2, [r3, #0]
   d6594:	07d0      	lsls	r0, r2, #31
   d6596:	bf5c      	itt	pl
   d6598:	2201      	movpl	r2, #1
   d659a:	601a      	strpl	r2, [r3, #0]
   d659c:	4b12      	ldr	r3, [pc, #72]	; (d65e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d659e:	681a      	ldr	r2, [r3, #0]
   d65a0:	07d1      	lsls	r1, r2, #31
   d65a2:	bf5c      	itt	pl
   d65a4:	2201      	movpl	r2, #1
   d65a6:	601a      	strpl	r2, [r3, #0]
   d65a8:	4b10      	ldr	r3, [pc, #64]	; (d65ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d65aa:	681a      	ldr	r2, [r3, #0]
   d65ac:	07d2      	lsls	r2, r2, #31
   d65ae:	bf5c      	itt	pl
   d65b0:	2201      	movpl	r2, #1
   d65b2:	601a      	strpl	r2, [r3, #0]
   d65b4:	4b0e      	ldr	r3, [pc, #56]	; (d65f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d65b6:	681a      	ldr	r2, [r3, #0]
   d65b8:	07d0      	lsls	r0, r2, #31
   d65ba:	bf5c      	itt	pl
   d65bc:	2201      	movpl	r2, #1
   d65be:	601a      	strpl	r2, [r3, #0]
   d65c0:	4b0c      	ldr	r3, [pc, #48]	; (d65f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d65c2:	681a      	ldr	r2, [r3, #0]
   d65c4:	07d1      	lsls	r1, r2, #31
   d65c6:	bf5c      	itt	pl
   d65c8:	2201      	movpl	r2, #1
   d65ca:	601a      	strpl	r2, [r3, #0]
   d65cc:	4b0a      	ldr	r3, [pc, #40]	; (d65f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d65ce:	681a      	ldr	r2, [r3, #0]
   d65d0:	07d2      	lsls	r2, r2, #31
   d65d2:	bf5c      	itt	pl
   d65d4:	2201      	movpl	r2, #1
   d65d6:	601a      	strpl	r2, [r3, #0]
   d65d8:	4770      	bx	lr
   d65da:	bf00      	nop
   d65dc:	2003e7ec 	.word	0x2003e7ec
   d65e0:	2003e7e8 	.word	0x2003e7e8
   d65e4:	2003e7e4 	.word	0x2003e7e4
   d65e8:	2003e7e0 	.word	0x2003e7e0
   d65ec:	2003e7dc 	.word	0x2003e7dc
   d65f0:	2003e7d8 	.word	0x2003e7d8
   d65f4:	2003e7d4 	.word	0x2003e7d4
   d65f8:	2003e7d0 	.word	0x2003e7d0

000d65fc <atan2>:
   d65fc:	f000 b860 	b.w	d66c0 <__ieee754_atan2>

000d6600 <sqrt>:
   d6600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6604:	ed2d 8b02 	vpush	{d8}
   d6608:	b08b      	sub	sp, #44	; 0x2c
   d660a:	ec55 4b10 	vmov	r4, r5, d0
   d660e:	f000 f94d 	bl	d68ac <__ieee754_sqrt>
   d6612:	4b29      	ldr	r3, [pc, #164]	; (d66b8 <sqrt+0xb8>)
   d6614:	eeb0 8a40 	vmov.f32	s16, s0
   d6618:	eef0 8a60 	vmov.f32	s17, s1
   d661c:	f993 6000 	ldrsb.w	r6, [r3]
   d6620:	1c73      	adds	r3, r6, #1
   d6622:	d012      	beq.n	d664a <sqrt+0x4a>
   d6624:	4622      	mov	r2, r4
   d6626:	462b      	mov	r3, r5
   d6628:	4620      	mov	r0, r4
   d662a:	4629      	mov	r1, r5
   d662c:	f001 f828 	bl	d7680 <__aeabi_dcmpun>
   d6630:	4607      	mov	r7, r0
   d6632:	b950      	cbnz	r0, d664a <sqrt+0x4a>
   d6634:	f04f 0800 	mov.w	r8, #0
   d6638:	f04f 0900 	mov.w	r9, #0
   d663c:	4620      	mov	r0, r4
   d663e:	4629      	mov	r1, r5
   d6640:	4642      	mov	r2, r8
   d6642:	464b      	mov	r3, r9
   d6644:	f000 fff4 	bl	d7630 <__aeabi_dcmplt>
   d6648:	b940      	cbnz	r0, d665c <sqrt+0x5c>
   d664a:	eeb0 0a48 	vmov.f32	s0, s16
   d664e:	eef0 0a68 	vmov.f32	s1, s17
   d6652:	b00b      	add	sp, #44	; 0x2c
   d6654:	ecbd 8b02 	vpop	{d8}
   d6658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d665c:	4b17      	ldr	r3, [pc, #92]	; (d66bc <sqrt+0xbc>)
   d665e:	9708      	str	r7, [sp, #32]
   d6660:	2201      	movs	r2, #1
   d6662:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6666:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d666a:	e88d 000c 	stmia.w	sp, {r2, r3}
   d666e:	b1b6      	cbz	r6, d669e <sqrt+0x9e>
   d6670:	4642      	mov	r2, r8
   d6672:	464b      	mov	r3, r9
   d6674:	4640      	mov	r0, r8
   d6676:	4649      	mov	r1, r9
   d6678:	f000 fe92 	bl	d73a0 <__aeabi_ddiv>
   d667c:	2e02      	cmp	r6, #2
   d667e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d6682:	d10e      	bne.n	d66a2 <sqrt+0xa2>
   d6684:	f7fe fd1a 	bl	d50bc <__errno>
   d6688:	2321      	movs	r3, #33	; 0x21
   d668a:	6003      	str	r3, [r0, #0]
   d668c:	9b08      	ldr	r3, [sp, #32]
   d668e:	b973      	cbnz	r3, d66ae <sqrt+0xae>
   d6690:	ed9d 0b06 	vldr	d0, [sp, #24]
   d6694:	b00b      	add	sp, #44	; 0x2c
   d6696:	ecbd 8b02 	vpop	{d8}
   d669a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d669e:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d66a2:	4668      	mov	r0, sp
   d66a4:	f000 fb98 	bl	d6dd8 <matherr>
   d66a8:	2800      	cmp	r0, #0
   d66aa:	d1ef      	bne.n	d668c <sqrt+0x8c>
   d66ac:	e7ea      	b.n	d6684 <sqrt+0x84>
   d66ae:	f7fe fd05 	bl	d50bc <__errno>
   d66b2:	9b08      	ldr	r3, [sp, #32]
   d66b4:	6003      	str	r3, [r0, #0]
   d66b6:	e7eb      	b.n	d6690 <sqrt+0x90>
   d66b8:	2003dcf8 	.word	0x2003dcf8
   d66bc:	000d7be4 	.word	0x000d7be4

000d66c0 <__ieee754_atan2>:
   d66c0:	ec51 0b11 	vmov	r0, r1, d1
   d66c4:	4243      	negs	r3, r0
   d66c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d66ca:	4303      	orrs	r3, r0
   d66cc:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d66d0:	4f75      	ldr	r7, [pc, #468]	; (d68a8 <__ieee754_atan2+0x1e8>)
   d66d2:	ea48 73d3 	orr.w	r3, r8, r3, lsr #31
   d66d6:	42bb      	cmp	r3, r7
   d66d8:	ec55 4b10 	vmov	r4, r5, d0
   d66dc:	d849      	bhi.n	d6772 <__ieee754_atan2+0xb2>
   d66de:	4263      	negs	r3, r4
   d66e0:	4323      	orrs	r3, r4
   d66e2:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   d66e6:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   d66ea:	42bb      	cmp	r3, r7
   d66ec:	46a9      	mov	r9, r5
   d66ee:	d840      	bhi.n	d6772 <__ieee754_atan2+0xb2>
   d66f0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   d66f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d66f8:	4303      	orrs	r3, r0
   d66fa:	468e      	mov	lr, r1
   d66fc:	d050      	beq.n	d67a0 <__ieee754_atan2+0xe0>
   d66fe:	178e      	asrs	r6, r1, #30
   d6700:	f006 0602 	and.w	r6, r6, #2
   d6704:	ea54 030a 	orrs.w	r3, r4, sl
   d6708:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
   d670c:	d039      	beq.n	d6782 <__ieee754_atan2+0xc2>
   d670e:	ea50 0308 	orrs.w	r3, r0, r8
   d6712:	d03e      	beq.n	d6792 <__ieee754_atan2+0xd2>
   d6714:	45b8      	cmp	r8, r7
   d6716:	d055      	beq.n	d67c4 <__ieee754_atan2+0x104>
   d6718:	45ba      	cmp	sl, r7
   d671a:	d03a      	beq.n	d6792 <__ieee754_atan2+0xd2>
   d671c:	ebc8 080a 	rsb	r8, r8, sl
   d6720:	ea4f 5828 	mov.w	r8, r8, asr #20
   d6724:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
   d6728:	dc40      	bgt.n	d67ac <__ieee754_atan2+0xec>
   d672a:	2900      	cmp	r1, #0
   d672c:	db70      	blt.n	d6810 <__ieee754_atan2+0x150>
   d672e:	4602      	mov	r2, r0
   d6730:	460b      	mov	r3, r1
   d6732:	4620      	mov	r0, r4
   d6734:	4629      	mov	r1, r5
   d6736:	f000 fe33 	bl	d73a0 <__aeabi_ddiv>
   d673a:	ec41 0b10 	vmov	d0, r0, r1
   d673e:	f000 fb43 	bl	d6dc8 <fabs>
   d6742:	f000 f985 	bl	d6a50 <atan>
   d6746:	ec51 0b10 	vmov	r0, r1, d0
   d674a:	2e01      	cmp	r6, #1
   d674c:	d05a      	beq.n	d6804 <__ieee754_atan2+0x144>
   d674e:	2e02      	cmp	r6, #2
   d6750:	d048      	beq.n	d67e4 <__ieee754_atan2+0x124>
   d6752:	2e00      	cmp	r6, #0
   d6754:	d042      	beq.n	d67dc <__ieee754_atan2+0x11c>
   d6756:	a33e      	add	r3, pc, #248	; (adr r3, d6850 <__ieee754_atan2+0x190>)
   d6758:	e9d3 2300 	ldrd	r2, r3, [r3]
   d675c:	f000 fb42 	bl	d6de4 <__aeabi_dsub>
   d6760:	a33d      	add	r3, pc, #244	; (adr r3, d6858 <__ieee754_atan2+0x198>)
   d6762:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6766:	f000 fb3d 	bl	d6de4 <__aeabi_dsub>
   d676a:	ec41 0b10 	vmov	d0, r0, r1
   d676e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6772:	4622      	mov	r2, r4
   d6774:	462b      	mov	r3, r5
   d6776:	f000 fb37 	bl	d6de8 <__adddf3>
   d677a:	ec41 0b10 	vmov	d0, r0, r1
   d677e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6782:	2e02      	cmp	r6, #2
   d6784:	d016      	beq.n	d67b4 <__ieee754_atan2+0xf4>
   d6786:	2e03      	cmp	r6, #3
   d6788:	d10e      	bne.n	d67a8 <__ieee754_atan2+0xe8>
   d678a:	ed9f 0b35 	vldr	d0, [pc, #212]	; d6860 <__ieee754_atan2+0x1a0>
   d678e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6792:	f1b9 0f00 	cmp.w	r9, #0
   d6796:	db11      	blt.n	d67bc <__ieee754_atan2+0xfc>
   d6798:	ed9f 0b33 	vldr	d0, [pc, #204]	; d6868 <__ieee754_atan2+0x1a8>
   d679c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d67a4:	f000 b954 	b.w	d6a50 <atan>
   d67a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67ac:	a12e      	add	r1, pc, #184	; (adr r1, d6868 <__ieee754_atan2+0x1a8>)
   d67ae:	e9d1 0100 	ldrd	r0, r1, [r1]
   d67b2:	e7ca      	b.n	d674a <__ieee754_atan2+0x8a>
   d67b4:	ed9f 0b28 	vldr	d0, [pc, #160]	; d6858 <__ieee754_atan2+0x198>
   d67b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67bc:	ed9f 0b2c 	vldr	d0, [pc, #176]	; d6870 <__ieee754_atan2+0x1b0>
   d67c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67c4:	45c2      	cmp	sl, r8
   d67c6:	d029      	beq.n	d681c <__ieee754_atan2+0x15c>
   d67c8:	2e02      	cmp	r6, #2
   d67ca:	d0f3      	beq.n	d67b4 <__ieee754_atan2+0xf4>
   d67cc:	2e03      	cmp	r6, #3
   d67ce:	d0dc      	beq.n	d678a <__ieee754_atan2+0xca>
   d67d0:	2e01      	cmp	r6, #1
   d67d2:	d02d      	beq.n	d6830 <__ieee754_atan2+0x170>
   d67d4:	ed9f 0b28 	vldr	d0, [pc, #160]	; d6878 <__ieee754_atan2+0x1b8>
   d67d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67dc:	ec41 0b10 	vmov	d0, r0, r1
   d67e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67e4:	a31a      	add	r3, pc, #104	; (adr r3, d6850 <__ieee754_atan2+0x190>)
   d67e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d67ea:	f000 fafb 	bl	d6de4 <__aeabi_dsub>
   d67ee:	4602      	mov	r2, r0
   d67f0:	460b      	mov	r3, r1
   d67f2:	a119      	add	r1, pc, #100	; (adr r1, d6858 <__ieee754_atan2+0x198>)
   d67f4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d67f8:	f000 faf4 	bl	d6de4 <__aeabi_dsub>
   d67fc:	ec41 0b10 	vmov	d0, r0, r1
   d6800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6804:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   d6808:	ec41 0b10 	vmov	d0, r0, r1
   d680c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6810:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
   d6814:	da8b      	bge.n	d672e <__ieee754_atan2+0x6e>
   d6816:	2000      	movs	r0, #0
   d6818:	2100      	movs	r1, #0
   d681a:	e796      	b.n	d674a <__ieee754_atan2+0x8a>
   d681c:	2e02      	cmp	r6, #2
   d681e:	d013      	beq.n	d6848 <__ieee754_atan2+0x188>
   d6820:	2e03      	cmp	r6, #3
   d6822:	d00d      	beq.n	d6840 <__ieee754_atan2+0x180>
   d6824:	2e01      	cmp	r6, #1
   d6826:	d007      	beq.n	d6838 <__ieee754_atan2+0x178>
   d6828:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6880 <__ieee754_atan2+0x1c0>
   d682c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6830:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6888 <__ieee754_atan2+0x1c8>
   d6834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6838:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6890 <__ieee754_atan2+0x1d0>
   d683c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6840:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6898 <__ieee754_atan2+0x1d8>
   d6844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6848:	ed9f 0b15 	vldr	d0, [pc, #84]	; d68a0 <__ieee754_atan2+0x1e0>
   d684c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6850:	33145c07 	.word	0x33145c07
   d6854:	3ca1a626 	.word	0x3ca1a626
   d6858:	54442d18 	.word	0x54442d18
   d685c:	400921fb 	.word	0x400921fb
   d6860:	54442d18 	.word	0x54442d18
   d6864:	c00921fb 	.word	0xc00921fb
   d6868:	54442d18 	.word	0x54442d18
   d686c:	3ff921fb 	.word	0x3ff921fb
   d6870:	54442d18 	.word	0x54442d18
   d6874:	bff921fb 	.word	0xbff921fb
	...
   d6880:	54442d18 	.word	0x54442d18
   d6884:	3fe921fb 	.word	0x3fe921fb
   d6888:	00000000 	.word	0x00000000
   d688c:	80000000 	.word	0x80000000
   d6890:	54442d18 	.word	0x54442d18
   d6894:	bfe921fb 	.word	0xbfe921fb
   d6898:	7f3321d2 	.word	0x7f3321d2
   d689c:	c002d97c 	.word	0xc002d97c
   d68a0:	7f3321d2 	.word	0x7f3321d2
   d68a4:	4002d97c 	.word	0x4002d97c
   d68a8:	7ff00000 	.word	0x7ff00000

000d68ac <__ieee754_sqrt>:
   d68ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d68b0:	4965      	ldr	r1, [pc, #404]	; (d6a48 <__ieee754_sqrt+0x19c>)
   d68b2:	ec55 4b10 	vmov	r4, r5, d0
   d68b6:	460e      	mov	r6, r1
   d68b8:	4029      	ands	r1, r5
   d68ba:	42b1      	cmp	r1, r6
   d68bc:	f000 8097 	beq.w	d69ee <__ieee754_sqrt+0x142>
   d68c0:	2d00      	cmp	r5, #0
   d68c2:	462b      	mov	r3, r5
   d68c4:	ee10 2a10 	vmov	r2, s0
   d68c8:	dd74      	ble.n	d69b4 <__ieee754_sqrt+0x108>
   d68ca:	152f      	asrs	r7, r5, #20
   d68cc:	d07f      	beq.n	d69ce <__ieee754_sqrt+0x122>
   d68ce:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d68d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d68d6:	07f9      	lsls	r1, r7, #31
   d68d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d68dc:	d465      	bmi.n	d69aa <__ieee754_sqrt+0xfe>
   d68de:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d68e2:	2600      	movs	r6, #0
   d68e4:	440b      	add	r3, r1
   d68e6:	107f      	asrs	r7, r7, #1
   d68e8:	0052      	lsls	r2, r2, #1
   d68ea:	46b6      	mov	lr, r6
   d68ec:	2016      	movs	r0, #22
   d68ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d68f2:	eb0e 0401 	add.w	r4, lr, r1
   d68f6:	429c      	cmp	r4, r3
   d68f8:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d68fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6900:	dc03      	bgt.n	d690a <__ieee754_sqrt+0x5e>
   d6902:	1b1b      	subs	r3, r3, r4
   d6904:	eb04 0e01 	add.w	lr, r4, r1
   d6908:	440e      	add	r6, r1
   d690a:	3801      	subs	r0, #1
   d690c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d6910:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6914:	d1ed      	bne.n	d68f2 <__ieee754_sqrt+0x46>
   d6916:	4684      	mov	ip, r0
   d6918:	2420      	movs	r4, #32
   d691a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d691e:	e009      	b.n	d6934 <__ieee754_sqrt+0x88>
   d6920:	d020      	beq.n	d6964 <__ieee754_sqrt+0xb8>
   d6922:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d6926:	3c01      	subs	r4, #1
   d6928:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d692c:	442b      	add	r3, r5
   d692e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6932:	d020      	beq.n	d6976 <__ieee754_sqrt+0xca>
   d6934:	459e      	cmp	lr, r3
   d6936:	eb01 050c 	add.w	r5, r1, ip
   d693a:	daf1      	bge.n	d6920 <__ieee754_sqrt+0x74>
   d693c:	2d00      	cmp	r5, #0
   d693e:	eb05 0c01 	add.w	ip, r5, r1
   d6942:	db09      	blt.n	d6958 <__ieee754_sqrt+0xac>
   d6944:	46f0      	mov	r8, lr
   d6946:	4295      	cmp	r5, r2
   d6948:	ebce 0303 	rsb	r3, lr, r3
   d694c:	d900      	bls.n	d6950 <__ieee754_sqrt+0xa4>
   d694e:	3b01      	subs	r3, #1
   d6950:	1b52      	subs	r2, r2, r5
   d6952:	4408      	add	r0, r1
   d6954:	46c6      	mov	lr, r8
   d6956:	e7e4      	b.n	d6922 <__ieee754_sqrt+0x76>
   d6958:	f1bc 0f00 	cmp.w	ip, #0
   d695c:	dbf2      	blt.n	d6944 <__ieee754_sqrt+0x98>
   d695e:	f10e 0801 	add.w	r8, lr, #1
   d6962:	e7f0      	b.n	d6946 <__ieee754_sqrt+0x9a>
   d6964:	4295      	cmp	r5, r2
   d6966:	d81e      	bhi.n	d69a6 <__ieee754_sqrt+0xfa>
   d6968:	2d00      	cmp	r5, #0
   d696a:	eb05 0c01 	add.w	ip, r5, r1
   d696e:	db50      	blt.n	d6a12 <__ieee754_sqrt+0x166>
   d6970:	4698      	mov	r8, r3
   d6972:	2300      	movs	r3, #0
   d6974:	e7ec      	b.n	d6950 <__ieee754_sqrt+0xa4>
   d6976:	4313      	orrs	r3, r2
   d6978:	d004      	beq.n	d6984 <__ieee754_sqrt+0xd8>
   d697a:	1c42      	adds	r2, r0, #1
   d697c:	d04d      	beq.n	d6a1a <__ieee754_sqrt+0x16e>
   d697e:	f000 0301 	and.w	r3, r0, #1
   d6982:	4418      	add	r0, r3
   d6984:	0840      	lsrs	r0, r0, #1
   d6986:	1071      	asrs	r1, r6, #1
   d6988:	07f3      	lsls	r3, r6, #31
   d698a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d698e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d6992:	bf48      	it	mi
   d6994:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d6998:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d699c:	4602      	mov	r2, r0
   d699e:	ec43 2b10 	vmov	d0, r2, r3
   d69a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d69a6:	4673      	mov	r3, lr
   d69a8:	e7bb      	b.n	d6922 <__ieee754_sqrt+0x76>
   d69aa:	005b      	lsls	r3, r3, #1
   d69ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d69b0:	0052      	lsls	r2, r2, #1
   d69b2:	e794      	b.n	d68de <__ieee754_sqrt+0x32>
   d69b4:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d69b8:	4321      	orrs	r1, r4
   d69ba:	d028      	beq.n	d6a0e <__ieee754_sqrt+0x162>
   d69bc:	bbad      	cbnz	r5, d6a2a <__ieee754_sqrt+0x17e>
   d69be:	462f      	mov	r7, r5
   d69c0:	0ad3      	lsrs	r3, r2, #11
   d69c2:	3f15      	subs	r7, #21
   d69c4:	0552      	lsls	r2, r2, #21
   d69c6:	2b00      	cmp	r3, #0
   d69c8:	d0fa      	beq.n	d69c0 <__ieee754_sqrt+0x114>
   d69ca:	02dd      	lsls	r5, r3, #11
   d69cc:	d428      	bmi.n	d6a20 <__ieee754_sqrt+0x174>
   d69ce:	2100      	movs	r1, #0
   d69d0:	e000      	b.n	d69d4 <__ieee754_sqrt+0x128>
   d69d2:	4601      	mov	r1, r0
   d69d4:	005b      	lsls	r3, r3, #1
   d69d6:	02dc      	lsls	r4, r3, #11
   d69d8:	f101 0001 	add.w	r0, r1, #1
   d69dc:	d5f9      	bpl.n	d69d2 <__ieee754_sqrt+0x126>
   d69de:	f1c0 0420 	rsb	r4, r0, #32
   d69e2:	fa22 f404 	lsr.w	r4, r2, r4
   d69e6:	4323      	orrs	r3, r4
   d69e8:	1a7f      	subs	r7, r7, r1
   d69ea:	4082      	lsls	r2, r0
   d69ec:	e76f      	b.n	d68ce <__ieee754_sqrt+0x22>
   d69ee:	ee10 2a10 	vmov	r2, s0
   d69f2:	462b      	mov	r3, r5
   d69f4:	ee10 0a10 	vmov	r0, s0
   d69f8:	4629      	mov	r1, r5
   d69fa:	f000 fba7 	bl	d714c <__aeabi_dmul>
   d69fe:	4622      	mov	r2, r4
   d6a00:	462b      	mov	r3, r5
   d6a02:	f000 f9f1 	bl	d6de8 <__adddf3>
   d6a06:	ec41 0b10 	vmov	d0, r0, r1
   d6a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a12:	f1bc 0f00 	cmp.w	ip, #0
   d6a16:	daa2      	bge.n	d695e <__ieee754_sqrt+0xb2>
   d6a18:	e7aa      	b.n	d6970 <__ieee754_sqrt+0xc4>
   d6a1a:	3601      	adds	r6, #1
   d6a1c:	4620      	mov	r0, r4
   d6a1e:	e7b2      	b.n	d6986 <__ieee754_sqrt+0xda>
   d6a20:	2420      	movs	r4, #32
   d6a22:	f04f 31ff 	mov.w	r1, #4294967295
   d6a26:	2000      	movs	r0, #0
   d6a28:	e7db      	b.n	d69e2 <__ieee754_sqrt+0x136>
   d6a2a:	ee10 2a10 	vmov	r2, s0
   d6a2e:	462b      	mov	r3, r5
   d6a30:	4620      	mov	r0, r4
   d6a32:	4629      	mov	r1, r5
   d6a34:	f000 f9d6 	bl	d6de4 <__aeabi_dsub>
   d6a38:	4602      	mov	r2, r0
   d6a3a:	460b      	mov	r3, r1
   d6a3c:	f000 fcb0 	bl	d73a0 <__aeabi_ddiv>
   d6a40:	ec41 0b10 	vmov	d0, r0, r1
   d6a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a48:	7ff00000 	.word	0x7ff00000
   d6a4c:	00000000 	.word	0x00000000

000d6a50 <atan>:
   d6a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a54:	ec55 4b10 	vmov	r4, r5, d0
   d6a58:	4bd1      	ldr	r3, [pc, #836]	; (d6da0 <atan+0x350>)
   d6a5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   d6a5e:	429e      	cmp	r6, r3
   d6a60:	46ab      	mov	fp, r5
   d6a62:	dd10      	ble.n	d6a86 <atan+0x36>
   d6a64:	4bcf      	ldr	r3, [pc, #828]	; (d6da4 <atan+0x354>)
   d6a66:	429e      	cmp	r6, r3
   d6a68:	f300 80b2 	bgt.w	d6bd0 <atan+0x180>
   d6a6c:	f000 80ad 	beq.w	d6bca <atan+0x17a>
   d6a70:	f1bb 0f00 	cmp.w	fp, #0
   d6a74:	f340 80fd 	ble.w	d6c72 <atan+0x222>
   d6a78:	a5ad      	add	r5, pc, #692	; (adr r5, d6d30 <atan+0x2e0>)
   d6a7a:	e9d5 4500 	ldrd	r4, r5, [r5]
   d6a7e:	ec45 4b10 	vmov	d0, r4, r5
   d6a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a86:	4bc8      	ldr	r3, [pc, #800]	; (d6da8 <atan+0x358>)
   d6a88:	429e      	cmp	r6, r3
   d6a8a:	f300 80c0 	bgt.w	d6c0e <atan+0x1be>
   d6a8e:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   d6a92:	429e      	cmp	r6, r3
   d6a94:	f340 80a8 	ble.w	d6be8 <atan+0x198>
   d6a98:	f04f 3aff 	mov.w	sl, #4294967295
   d6a9c:	4622      	mov	r2, r4
   d6a9e:	462b      	mov	r3, r5
   d6aa0:	4620      	mov	r0, r4
   d6aa2:	4629      	mov	r1, r5
   d6aa4:	f000 fb52 	bl	d714c <__aeabi_dmul>
   d6aa8:	4602      	mov	r2, r0
   d6aaa:	460b      	mov	r3, r1
   d6aac:	4680      	mov	r8, r0
   d6aae:	4689      	mov	r9, r1
   d6ab0:	f000 fb4c 	bl	d714c <__aeabi_dmul>
   d6ab4:	a3a0      	add	r3, pc, #640	; (adr r3, d6d38 <atan+0x2e8>)
   d6ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6aba:	4606      	mov	r6, r0
   d6abc:	460f      	mov	r7, r1
   d6abe:	f000 fb45 	bl	d714c <__aeabi_dmul>
   d6ac2:	a39f      	add	r3, pc, #636	; (adr r3, d6d40 <atan+0x2f0>)
   d6ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ac8:	f000 f98e 	bl	d6de8 <__adddf3>
   d6acc:	4632      	mov	r2, r6
   d6ace:	463b      	mov	r3, r7
   d6ad0:	f000 fb3c 	bl	d714c <__aeabi_dmul>
   d6ad4:	a39c      	add	r3, pc, #624	; (adr r3, d6d48 <atan+0x2f8>)
   d6ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ada:	f000 f985 	bl	d6de8 <__adddf3>
   d6ade:	4632      	mov	r2, r6
   d6ae0:	463b      	mov	r3, r7
   d6ae2:	f000 fb33 	bl	d714c <__aeabi_dmul>
   d6ae6:	a39a      	add	r3, pc, #616	; (adr r3, d6d50 <atan+0x300>)
   d6ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6aec:	f000 f97c 	bl	d6de8 <__adddf3>
   d6af0:	4632      	mov	r2, r6
   d6af2:	463b      	mov	r3, r7
   d6af4:	f000 fb2a 	bl	d714c <__aeabi_dmul>
   d6af8:	a397      	add	r3, pc, #604	; (adr r3, d6d58 <atan+0x308>)
   d6afa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6afe:	f000 f973 	bl	d6de8 <__adddf3>
   d6b02:	4632      	mov	r2, r6
   d6b04:	463b      	mov	r3, r7
   d6b06:	f000 fb21 	bl	d714c <__aeabi_dmul>
   d6b0a:	a395      	add	r3, pc, #596	; (adr r3, d6d60 <atan+0x310>)
   d6b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b10:	f000 f96a 	bl	d6de8 <__adddf3>
   d6b14:	4642      	mov	r2, r8
   d6b16:	464b      	mov	r3, r9
   d6b18:	f000 fb18 	bl	d714c <__aeabi_dmul>
   d6b1c:	a392      	add	r3, pc, #584	; (adr r3, d6d68 <atan+0x318>)
   d6b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b22:	4680      	mov	r8, r0
   d6b24:	4689      	mov	r9, r1
   d6b26:	4630      	mov	r0, r6
   d6b28:	4639      	mov	r1, r7
   d6b2a:	f000 fb0f 	bl	d714c <__aeabi_dmul>
   d6b2e:	a390      	add	r3, pc, #576	; (adr r3, d6d70 <atan+0x320>)
   d6b30:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b34:	f000 f956 	bl	d6de4 <__aeabi_dsub>
   d6b38:	4632      	mov	r2, r6
   d6b3a:	463b      	mov	r3, r7
   d6b3c:	f000 fb06 	bl	d714c <__aeabi_dmul>
   d6b40:	a38d      	add	r3, pc, #564	; (adr r3, d6d78 <atan+0x328>)
   d6b42:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b46:	f000 f94d 	bl	d6de4 <__aeabi_dsub>
   d6b4a:	4632      	mov	r2, r6
   d6b4c:	463b      	mov	r3, r7
   d6b4e:	f000 fafd 	bl	d714c <__aeabi_dmul>
   d6b52:	a38b      	add	r3, pc, #556	; (adr r3, d6d80 <atan+0x330>)
   d6b54:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b58:	f000 f944 	bl	d6de4 <__aeabi_dsub>
   d6b5c:	4632      	mov	r2, r6
   d6b5e:	463b      	mov	r3, r7
   d6b60:	f000 faf4 	bl	d714c <__aeabi_dmul>
   d6b64:	a388      	add	r3, pc, #544	; (adr r3, d6d88 <atan+0x338>)
   d6b66:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b6a:	f000 f93b 	bl	d6de4 <__aeabi_dsub>
   d6b6e:	4632      	mov	r2, r6
   d6b70:	463b      	mov	r3, r7
   d6b72:	f000 faeb 	bl	d714c <__aeabi_dmul>
   d6b76:	f1ba 3fff 	cmp.w	sl, #4294967295
   d6b7a:	4602      	mov	r2, r0
   d6b7c:	460b      	mov	r3, r1
   d6b7e:	d07c      	beq.n	d6c7a <atan+0x22a>
   d6b80:	4640      	mov	r0, r8
   d6b82:	4649      	mov	r1, r9
   d6b84:	f000 f930 	bl	d6de8 <__adddf3>
   d6b88:	4622      	mov	r2, r4
   d6b8a:	462b      	mov	r3, r5
   d6b8c:	f000 fade 	bl	d714c <__aeabi_dmul>
   d6b90:	4e86      	ldr	r6, [pc, #536]	; (d6dac <atan+0x35c>)
   d6b92:	4b87      	ldr	r3, [pc, #540]	; (d6db0 <atan+0x360>)
   d6b94:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   d6b98:	4456      	add	r6, sl
   d6b9a:	449a      	add	sl, r3
   d6b9c:	e9da 2300 	ldrd	r2, r3, [sl]
   d6ba0:	f000 f920 	bl	d6de4 <__aeabi_dsub>
   d6ba4:	4622      	mov	r2, r4
   d6ba6:	462b      	mov	r3, r5
   d6ba8:	f000 f91c 	bl	d6de4 <__aeabi_dsub>
   d6bac:	4602      	mov	r2, r0
   d6bae:	460b      	mov	r3, r1
   d6bb0:	e9d6 0100 	ldrd	r0, r1, [r6]
   d6bb4:	f000 f916 	bl	d6de4 <__aeabi_dsub>
   d6bb8:	f1bb 0f00 	cmp.w	fp, #0
   d6bbc:	db52      	blt.n	d6c64 <atan+0x214>
   d6bbe:	4604      	mov	r4, r0
   d6bc0:	460d      	mov	r5, r1
   d6bc2:	ec45 4b10 	vmov	d0, r4, r5
   d6bc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6bca:	2c00      	cmp	r4, #0
   d6bcc:	f43f af50 	beq.w	d6a70 <atan+0x20>
   d6bd0:	4622      	mov	r2, r4
   d6bd2:	462b      	mov	r3, r5
   d6bd4:	4620      	mov	r0, r4
   d6bd6:	4629      	mov	r1, r5
   d6bd8:	f000 f906 	bl	d6de8 <__adddf3>
   d6bdc:	4604      	mov	r4, r0
   d6bde:	460d      	mov	r5, r1
   d6be0:	ec45 4b10 	vmov	d0, r4, r5
   d6be4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6be8:	a369      	add	r3, pc, #420	; (adr r3, d6d90 <atan+0x340>)
   d6bea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6bee:	ee10 0a10 	vmov	r0, s0
   d6bf2:	4629      	mov	r1, r5
   d6bf4:	f000 f8f8 	bl	d6de8 <__adddf3>
   d6bf8:	2200      	movs	r2, #0
   d6bfa:	4b6e      	ldr	r3, [pc, #440]	; (d6db4 <atan+0x364>)
   d6bfc:	f000 fd36 	bl	d766c <__aeabi_dcmpgt>
   d6c00:	2800      	cmp	r0, #0
   d6c02:	f43f af49 	beq.w	d6a98 <atan+0x48>
   d6c06:	ec45 4b10 	vmov	d0, r4, r5
   d6c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c0e:	f000 f8db 	bl	d6dc8 <fabs>
   d6c12:	4b69      	ldr	r3, [pc, #420]	; (d6db8 <atan+0x368>)
   d6c14:	429e      	cmp	r6, r3
   d6c16:	ec55 4b10 	vmov	r4, r5, d0
   d6c1a:	dc3f      	bgt.n	d6c9c <atan+0x24c>
   d6c1c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   d6c20:	429e      	cmp	r6, r3
   d6c22:	dc68      	bgt.n	d6cf6 <atan+0x2a6>
   d6c24:	ee10 2a10 	vmov	r2, s0
   d6c28:	ee10 0a10 	vmov	r0, s0
   d6c2c:	462b      	mov	r3, r5
   d6c2e:	4629      	mov	r1, r5
   d6c30:	f000 f8da 	bl	d6de8 <__adddf3>
   d6c34:	2200      	movs	r2, #0
   d6c36:	4b5f      	ldr	r3, [pc, #380]	; (d6db4 <atan+0x364>)
   d6c38:	f000 f8d4 	bl	d6de4 <__aeabi_dsub>
   d6c3c:	2200      	movs	r2, #0
   d6c3e:	4606      	mov	r6, r0
   d6c40:	460f      	mov	r7, r1
   d6c42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d6c46:	4620      	mov	r0, r4
   d6c48:	4629      	mov	r1, r5
   d6c4a:	f000 f8cd 	bl	d6de8 <__adddf3>
   d6c4e:	4602      	mov	r2, r0
   d6c50:	460b      	mov	r3, r1
   d6c52:	4630      	mov	r0, r6
   d6c54:	4639      	mov	r1, r7
   d6c56:	f000 fba3 	bl	d73a0 <__aeabi_ddiv>
   d6c5a:	f04f 0a00 	mov.w	sl, #0
   d6c5e:	4604      	mov	r4, r0
   d6c60:	460d      	mov	r5, r1
   d6c62:	e71b      	b.n	d6a9c <atan+0x4c>
   d6c64:	4604      	mov	r4, r0
   d6c66:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   d6c6a:	ec45 4b10 	vmov	d0, r4, r5
   d6c6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c72:	a549      	add	r5, pc, #292	; (adr r5, d6d98 <atan+0x348>)
   d6c74:	e9d5 4500 	ldrd	r4, r5, [r5]
   d6c78:	e7b2      	b.n	d6be0 <atan+0x190>
   d6c7a:	4640      	mov	r0, r8
   d6c7c:	4649      	mov	r1, r9
   d6c7e:	f000 f8b3 	bl	d6de8 <__adddf3>
   d6c82:	4622      	mov	r2, r4
   d6c84:	462b      	mov	r3, r5
   d6c86:	f000 fa61 	bl	d714c <__aeabi_dmul>
   d6c8a:	4602      	mov	r2, r0
   d6c8c:	460b      	mov	r3, r1
   d6c8e:	4620      	mov	r0, r4
   d6c90:	4629      	mov	r1, r5
   d6c92:	f000 f8a7 	bl	d6de4 <__aeabi_dsub>
   d6c96:	4604      	mov	r4, r0
   d6c98:	460d      	mov	r5, r1
   d6c9a:	e7a1      	b.n	d6be0 <atan+0x190>
   d6c9c:	4b47      	ldr	r3, [pc, #284]	; (d6dbc <atan+0x36c>)
   d6c9e:	429e      	cmp	r6, r3
   d6ca0:	dc1d      	bgt.n	d6cde <atan+0x28e>
   d6ca2:	ee10 0a10 	vmov	r0, s0
   d6ca6:	2200      	movs	r2, #0
   d6ca8:	4b45      	ldr	r3, [pc, #276]	; (d6dc0 <atan+0x370>)
   d6caa:	4629      	mov	r1, r5
   d6cac:	f000 f89a 	bl	d6de4 <__aeabi_dsub>
   d6cb0:	2200      	movs	r2, #0
   d6cb2:	4606      	mov	r6, r0
   d6cb4:	460f      	mov	r7, r1
   d6cb6:	4b42      	ldr	r3, [pc, #264]	; (d6dc0 <atan+0x370>)
   d6cb8:	4620      	mov	r0, r4
   d6cba:	4629      	mov	r1, r5
   d6cbc:	f000 fa46 	bl	d714c <__aeabi_dmul>
   d6cc0:	2200      	movs	r2, #0
   d6cc2:	4b3c      	ldr	r3, [pc, #240]	; (d6db4 <atan+0x364>)
   d6cc4:	f000 f890 	bl	d6de8 <__adddf3>
   d6cc8:	4602      	mov	r2, r0
   d6cca:	460b      	mov	r3, r1
   d6ccc:	4630      	mov	r0, r6
   d6cce:	4639      	mov	r1, r7
   d6cd0:	f000 fb66 	bl	d73a0 <__aeabi_ddiv>
   d6cd4:	f04f 0a02 	mov.w	sl, #2
   d6cd8:	4604      	mov	r4, r0
   d6cda:	460d      	mov	r5, r1
   d6cdc:	e6de      	b.n	d6a9c <atan+0x4c>
   d6cde:	462b      	mov	r3, r5
   d6ce0:	ee10 2a10 	vmov	r2, s0
   d6ce4:	2000      	movs	r0, #0
   d6ce6:	4937      	ldr	r1, [pc, #220]	; (d6dc4 <atan+0x374>)
   d6ce8:	f000 fb5a 	bl	d73a0 <__aeabi_ddiv>
   d6cec:	f04f 0a03 	mov.w	sl, #3
   d6cf0:	4604      	mov	r4, r0
   d6cf2:	460d      	mov	r5, r1
   d6cf4:	e6d2      	b.n	d6a9c <atan+0x4c>
   d6cf6:	ee10 0a10 	vmov	r0, s0
   d6cfa:	2200      	movs	r2, #0
   d6cfc:	4b2d      	ldr	r3, [pc, #180]	; (d6db4 <atan+0x364>)
   d6cfe:	4629      	mov	r1, r5
   d6d00:	f000 f870 	bl	d6de4 <__aeabi_dsub>
   d6d04:	2200      	movs	r2, #0
   d6d06:	4606      	mov	r6, r0
   d6d08:	460f      	mov	r7, r1
   d6d0a:	4b2a      	ldr	r3, [pc, #168]	; (d6db4 <atan+0x364>)
   d6d0c:	4620      	mov	r0, r4
   d6d0e:	4629      	mov	r1, r5
   d6d10:	f000 f86a 	bl	d6de8 <__adddf3>
   d6d14:	4602      	mov	r2, r0
   d6d16:	460b      	mov	r3, r1
   d6d18:	4630      	mov	r0, r6
   d6d1a:	4639      	mov	r1, r7
   d6d1c:	f000 fb40 	bl	d73a0 <__aeabi_ddiv>
   d6d20:	f04f 0a01 	mov.w	sl, #1
   d6d24:	4604      	mov	r4, r0
   d6d26:	460d      	mov	r5, r1
   d6d28:	e6b8      	b.n	d6a9c <atan+0x4c>
   d6d2a:	bf00      	nop
   d6d2c:	f3af 8000 	nop.w
   d6d30:	54442d18 	.word	0x54442d18
   d6d34:	3ff921fb 	.word	0x3ff921fb
   d6d38:	e322da11 	.word	0xe322da11
   d6d3c:	3f90ad3a 	.word	0x3f90ad3a
   d6d40:	24760deb 	.word	0x24760deb
   d6d44:	3fa97b4b 	.word	0x3fa97b4b
   d6d48:	a0d03d51 	.word	0xa0d03d51
   d6d4c:	3fb10d66 	.word	0x3fb10d66
   d6d50:	c54c206e 	.word	0xc54c206e
   d6d54:	3fb745cd 	.word	0x3fb745cd
   d6d58:	920083ff 	.word	0x920083ff
   d6d5c:	3fc24924 	.word	0x3fc24924
   d6d60:	5555550d 	.word	0x5555550d
   d6d64:	3fd55555 	.word	0x3fd55555
   d6d68:	2c6a6c2f 	.word	0x2c6a6c2f
   d6d6c:	bfa2b444 	.word	0xbfa2b444
   d6d70:	52defd9a 	.word	0x52defd9a
   d6d74:	3fadde2d 	.word	0x3fadde2d
   d6d78:	af749a6d 	.word	0xaf749a6d
   d6d7c:	3fb3b0f2 	.word	0x3fb3b0f2
   d6d80:	fe231671 	.word	0xfe231671
   d6d84:	3fbc71c6 	.word	0x3fbc71c6
   d6d88:	9998ebc4 	.word	0x9998ebc4
   d6d8c:	3fc99999 	.word	0x3fc99999
   d6d90:	8800759c 	.word	0x8800759c
   d6d94:	7e37e43c 	.word	0x7e37e43c
   d6d98:	54442d18 	.word	0x54442d18
   d6d9c:	bff921fb 	.word	0xbff921fb
   d6da0:	440fffff 	.word	0x440fffff
   d6da4:	7ff00000 	.word	0x7ff00000
   d6da8:	3fdbffff 	.word	0x3fdbffff
   d6dac:	000d7c10 	.word	0x000d7c10
   d6db0:	000d7bf0 	.word	0x000d7bf0
   d6db4:	3ff00000 	.word	0x3ff00000
   d6db8:	3ff2ffff 	.word	0x3ff2ffff
   d6dbc:	40037fff 	.word	0x40037fff
   d6dc0:	3ff80000 	.word	0x3ff80000
   d6dc4:	bff00000 	.word	0xbff00000

000d6dc8 <fabs>:
   d6dc8:	ec53 2b10 	vmov	r2, r3, d0
   d6dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d6dd0:	ec43 2b10 	vmov	d0, r2, r3
   d6dd4:	4770      	bx	lr
   d6dd6:	bf00      	nop

000d6dd8 <matherr>:
   d6dd8:	2000      	movs	r0, #0
   d6dda:	4770      	bx	lr

000d6ddc <__aeabi_drsub>:
   d6ddc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6de0:	e002      	b.n	d6de8 <__adddf3>
   d6de2:	bf00      	nop

000d6de4 <__aeabi_dsub>:
   d6de4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6de8 <__adddf3>:
   d6de8:	b530      	push	{r4, r5, lr}
   d6dea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6dee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6df2:	ea94 0f05 	teq	r4, r5
   d6df6:	bf08      	it	eq
   d6df8:	ea90 0f02 	teqeq	r0, r2
   d6dfc:	bf1f      	itttt	ne
   d6dfe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6e02:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6e06:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6e0a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6e0e:	f000 80e2 	beq.w	d6fd6 <__adddf3+0x1ee>
   d6e12:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6e16:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6e1a:	bfb8      	it	lt
   d6e1c:	426d      	neglt	r5, r5
   d6e1e:	dd0c      	ble.n	d6e3a <__adddf3+0x52>
   d6e20:	442c      	add	r4, r5
   d6e22:	ea80 0202 	eor.w	r2, r0, r2
   d6e26:	ea81 0303 	eor.w	r3, r1, r3
   d6e2a:	ea82 0000 	eor.w	r0, r2, r0
   d6e2e:	ea83 0101 	eor.w	r1, r3, r1
   d6e32:	ea80 0202 	eor.w	r2, r0, r2
   d6e36:	ea81 0303 	eor.w	r3, r1, r3
   d6e3a:	2d36      	cmp	r5, #54	; 0x36
   d6e3c:	bf88      	it	hi
   d6e3e:	bd30      	pophi	{r4, r5, pc}
   d6e40:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6e44:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6e48:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6e4c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6e50:	d002      	beq.n	d6e58 <__adddf3+0x70>
   d6e52:	4240      	negs	r0, r0
   d6e54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6e58:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6e5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6e60:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6e64:	d002      	beq.n	d6e6c <__adddf3+0x84>
   d6e66:	4252      	negs	r2, r2
   d6e68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6e6c:	ea94 0f05 	teq	r4, r5
   d6e70:	f000 80a7 	beq.w	d6fc2 <__adddf3+0x1da>
   d6e74:	f1a4 0401 	sub.w	r4, r4, #1
   d6e78:	f1d5 0e20 	rsbs	lr, r5, #32
   d6e7c:	db0d      	blt.n	d6e9a <__adddf3+0xb2>
   d6e7e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6e82:	fa22 f205 	lsr.w	r2, r2, r5
   d6e86:	1880      	adds	r0, r0, r2
   d6e88:	f141 0100 	adc.w	r1, r1, #0
   d6e8c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6e90:	1880      	adds	r0, r0, r2
   d6e92:	fa43 f305 	asr.w	r3, r3, r5
   d6e96:	4159      	adcs	r1, r3
   d6e98:	e00e      	b.n	d6eb8 <__adddf3+0xd0>
   d6e9a:	f1a5 0520 	sub.w	r5, r5, #32
   d6e9e:	f10e 0e20 	add.w	lr, lr, #32
   d6ea2:	2a01      	cmp	r2, #1
   d6ea4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6ea8:	bf28      	it	cs
   d6eaa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6eae:	fa43 f305 	asr.w	r3, r3, r5
   d6eb2:	18c0      	adds	r0, r0, r3
   d6eb4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6eb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ebc:	d507      	bpl.n	d6ece <__adddf3+0xe6>
   d6ebe:	f04f 0e00 	mov.w	lr, #0
   d6ec2:	f1dc 0c00 	rsbs	ip, ip, #0
   d6ec6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6eca:	eb6e 0101 	sbc.w	r1, lr, r1
   d6ece:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6ed2:	d31b      	bcc.n	d6f0c <__adddf3+0x124>
   d6ed4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6ed8:	d30c      	bcc.n	d6ef4 <__adddf3+0x10c>
   d6eda:	0849      	lsrs	r1, r1, #1
   d6edc:	ea5f 0030 	movs.w	r0, r0, rrx
   d6ee0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6ee4:	f104 0401 	add.w	r4, r4, #1
   d6ee8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6eec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6ef0:	f080 809a 	bcs.w	d7028 <__adddf3+0x240>
   d6ef4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6ef8:	bf08      	it	eq
   d6efa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6efe:	f150 0000 	adcs.w	r0, r0, #0
   d6f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6f06:	ea41 0105 	orr.w	r1, r1, r5
   d6f0a:	bd30      	pop	{r4, r5, pc}
   d6f0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6f10:	4140      	adcs	r0, r0
   d6f12:	eb41 0101 	adc.w	r1, r1, r1
   d6f16:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6f1a:	f1a4 0401 	sub.w	r4, r4, #1
   d6f1e:	d1e9      	bne.n	d6ef4 <__adddf3+0x10c>
   d6f20:	f091 0f00 	teq	r1, #0
   d6f24:	bf04      	itt	eq
   d6f26:	4601      	moveq	r1, r0
   d6f28:	2000      	moveq	r0, #0
   d6f2a:	fab1 f381 	clz	r3, r1
   d6f2e:	bf08      	it	eq
   d6f30:	3320      	addeq	r3, #32
   d6f32:	f1a3 030b 	sub.w	r3, r3, #11
   d6f36:	f1b3 0220 	subs.w	r2, r3, #32
   d6f3a:	da0c      	bge.n	d6f56 <__adddf3+0x16e>
   d6f3c:	320c      	adds	r2, #12
   d6f3e:	dd08      	ble.n	d6f52 <__adddf3+0x16a>
   d6f40:	f102 0c14 	add.w	ip, r2, #20
   d6f44:	f1c2 020c 	rsb	r2, r2, #12
   d6f48:	fa01 f00c 	lsl.w	r0, r1, ip
   d6f4c:	fa21 f102 	lsr.w	r1, r1, r2
   d6f50:	e00c      	b.n	d6f6c <__adddf3+0x184>
   d6f52:	f102 0214 	add.w	r2, r2, #20
   d6f56:	bfd8      	it	le
   d6f58:	f1c2 0c20 	rsble	ip, r2, #32
   d6f5c:	fa01 f102 	lsl.w	r1, r1, r2
   d6f60:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6f64:	bfdc      	itt	le
   d6f66:	ea41 010c 	orrle.w	r1, r1, ip
   d6f6a:	4090      	lslle	r0, r2
   d6f6c:	1ae4      	subs	r4, r4, r3
   d6f6e:	bfa2      	ittt	ge
   d6f70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6f74:	4329      	orrge	r1, r5
   d6f76:	bd30      	popge	{r4, r5, pc}
   d6f78:	ea6f 0404 	mvn.w	r4, r4
   d6f7c:	3c1f      	subs	r4, #31
   d6f7e:	da1c      	bge.n	d6fba <__adddf3+0x1d2>
   d6f80:	340c      	adds	r4, #12
   d6f82:	dc0e      	bgt.n	d6fa2 <__adddf3+0x1ba>
   d6f84:	f104 0414 	add.w	r4, r4, #20
   d6f88:	f1c4 0220 	rsb	r2, r4, #32
   d6f8c:	fa20 f004 	lsr.w	r0, r0, r4
   d6f90:	fa01 f302 	lsl.w	r3, r1, r2
   d6f94:	ea40 0003 	orr.w	r0, r0, r3
   d6f98:	fa21 f304 	lsr.w	r3, r1, r4
   d6f9c:	ea45 0103 	orr.w	r1, r5, r3
   d6fa0:	bd30      	pop	{r4, r5, pc}
   d6fa2:	f1c4 040c 	rsb	r4, r4, #12
   d6fa6:	f1c4 0220 	rsb	r2, r4, #32
   d6faa:	fa20 f002 	lsr.w	r0, r0, r2
   d6fae:	fa01 f304 	lsl.w	r3, r1, r4
   d6fb2:	ea40 0003 	orr.w	r0, r0, r3
   d6fb6:	4629      	mov	r1, r5
   d6fb8:	bd30      	pop	{r4, r5, pc}
   d6fba:	fa21 f004 	lsr.w	r0, r1, r4
   d6fbe:	4629      	mov	r1, r5
   d6fc0:	bd30      	pop	{r4, r5, pc}
   d6fc2:	f094 0f00 	teq	r4, #0
   d6fc6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6fca:	bf06      	itte	eq
   d6fcc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6fd0:	3401      	addeq	r4, #1
   d6fd2:	3d01      	subne	r5, #1
   d6fd4:	e74e      	b.n	d6e74 <__adddf3+0x8c>
   d6fd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6fda:	bf18      	it	ne
   d6fdc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6fe0:	d029      	beq.n	d7036 <__adddf3+0x24e>
   d6fe2:	ea94 0f05 	teq	r4, r5
   d6fe6:	bf08      	it	eq
   d6fe8:	ea90 0f02 	teqeq	r0, r2
   d6fec:	d005      	beq.n	d6ffa <__adddf3+0x212>
   d6fee:	ea54 0c00 	orrs.w	ip, r4, r0
   d6ff2:	bf04      	itt	eq
   d6ff4:	4619      	moveq	r1, r3
   d6ff6:	4610      	moveq	r0, r2
   d6ff8:	bd30      	pop	{r4, r5, pc}
   d6ffa:	ea91 0f03 	teq	r1, r3
   d6ffe:	bf1e      	ittt	ne
   d7000:	2100      	movne	r1, #0
   d7002:	2000      	movne	r0, #0
   d7004:	bd30      	popne	{r4, r5, pc}
   d7006:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d700a:	d105      	bne.n	d7018 <__adddf3+0x230>
   d700c:	0040      	lsls	r0, r0, #1
   d700e:	4149      	adcs	r1, r1
   d7010:	bf28      	it	cs
   d7012:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7016:	bd30      	pop	{r4, r5, pc}
   d7018:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d701c:	bf3c      	itt	cc
   d701e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7022:	bd30      	popcc	{r4, r5, pc}
   d7024:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7028:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d702c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7030:	f04f 0000 	mov.w	r0, #0
   d7034:	bd30      	pop	{r4, r5, pc}
   d7036:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d703a:	bf1a      	itte	ne
   d703c:	4619      	movne	r1, r3
   d703e:	4610      	movne	r0, r2
   d7040:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7044:	bf1c      	itt	ne
   d7046:	460b      	movne	r3, r1
   d7048:	4602      	movne	r2, r0
   d704a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d704e:	bf06      	itte	eq
   d7050:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7054:	ea91 0f03 	teqeq	r1, r3
   d7058:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d705c:	bd30      	pop	{r4, r5, pc}
   d705e:	bf00      	nop

000d7060 <__aeabi_ui2d>:
   d7060:	f090 0f00 	teq	r0, #0
   d7064:	bf04      	itt	eq
   d7066:	2100      	moveq	r1, #0
   d7068:	4770      	bxeq	lr
   d706a:	b530      	push	{r4, r5, lr}
   d706c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7070:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7074:	f04f 0500 	mov.w	r5, #0
   d7078:	f04f 0100 	mov.w	r1, #0
   d707c:	e750      	b.n	d6f20 <__adddf3+0x138>
   d707e:	bf00      	nop

000d7080 <__aeabi_i2d>:
   d7080:	f090 0f00 	teq	r0, #0
   d7084:	bf04      	itt	eq
   d7086:	2100      	moveq	r1, #0
   d7088:	4770      	bxeq	lr
   d708a:	b530      	push	{r4, r5, lr}
   d708c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7090:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7094:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7098:	bf48      	it	mi
   d709a:	4240      	negmi	r0, r0
   d709c:	f04f 0100 	mov.w	r1, #0
   d70a0:	e73e      	b.n	d6f20 <__adddf3+0x138>
   d70a2:	bf00      	nop

000d70a4 <__aeabi_f2d>:
   d70a4:	0042      	lsls	r2, r0, #1
   d70a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d70aa:	ea4f 0131 	mov.w	r1, r1, rrx
   d70ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d70b2:	bf1f      	itttt	ne
   d70b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d70b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d70bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d70c0:	4770      	bxne	lr
   d70c2:	f092 0f00 	teq	r2, #0
   d70c6:	bf14      	ite	ne
   d70c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d70cc:	4770      	bxeq	lr
   d70ce:	b530      	push	{r4, r5, lr}
   d70d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d70d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d70d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d70dc:	e720      	b.n	d6f20 <__adddf3+0x138>
   d70de:	bf00      	nop

000d70e0 <__aeabi_ul2d>:
   d70e0:	ea50 0201 	orrs.w	r2, r0, r1
   d70e4:	bf08      	it	eq
   d70e6:	4770      	bxeq	lr
   d70e8:	b530      	push	{r4, r5, lr}
   d70ea:	f04f 0500 	mov.w	r5, #0
   d70ee:	e00a      	b.n	d7106 <__aeabi_l2d+0x16>

000d70f0 <__aeabi_l2d>:
   d70f0:	ea50 0201 	orrs.w	r2, r0, r1
   d70f4:	bf08      	it	eq
   d70f6:	4770      	bxeq	lr
   d70f8:	b530      	push	{r4, r5, lr}
   d70fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d70fe:	d502      	bpl.n	d7106 <__aeabi_l2d+0x16>
   d7100:	4240      	negs	r0, r0
   d7102:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7106:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d710a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d710e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7112:	f43f aedc 	beq.w	d6ece <__adddf3+0xe6>
   d7116:	f04f 0203 	mov.w	r2, #3
   d711a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d711e:	bf18      	it	ne
   d7120:	3203      	addne	r2, #3
   d7122:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7126:	bf18      	it	ne
   d7128:	3203      	addne	r2, #3
   d712a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d712e:	f1c2 0320 	rsb	r3, r2, #32
   d7132:	fa00 fc03 	lsl.w	ip, r0, r3
   d7136:	fa20 f002 	lsr.w	r0, r0, r2
   d713a:	fa01 fe03 	lsl.w	lr, r1, r3
   d713e:	ea40 000e 	orr.w	r0, r0, lr
   d7142:	fa21 f102 	lsr.w	r1, r1, r2
   d7146:	4414      	add	r4, r2
   d7148:	e6c1      	b.n	d6ece <__adddf3+0xe6>
   d714a:	bf00      	nop

000d714c <__aeabi_dmul>:
   d714c:	b570      	push	{r4, r5, r6, lr}
   d714e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7152:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d715a:	bf1d      	ittte	ne
   d715c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7160:	ea94 0f0c 	teqne	r4, ip
   d7164:	ea95 0f0c 	teqne	r5, ip
   d7168:	f000 f8de 	bleq	d7328 <__aeabi_dmul+0x1dc>
   d716c:	442c      	add	r4, r5
   d716e:	ea81 0603 	eor.w	r6, r1, r3
   d7172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d717a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d717e:	bf18      	it	ne
   d7180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d718c:	d038      	beq.n	d7200 <__aeabi_dmul+0xb4>
   d718e:	fba0 ce02 	umull	ip, lr, r0, r2
   d7192:	f04f 0500 	mov.w	r5, #0
   d7196:	fbe1 e502 	umlal	lr, r5, r1, r2
   d719a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d719e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d71a2:	f04f 0600 	mov.w	r6, #0
   d71a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d71aa:	f09c 0f00 	teq	ip, #0
   d71ae:	bf18      	it	ne
   d71b0:	f04e 0e01 	orrne.w	lr, lr, #1
   d71b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d71b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d71bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d71c0:	d204      	bcs.n	d71cc <__aeabi_dmul+0x80>
   d71c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d71c6:	416d      	adcs	r5, r5
   d71c8:	eb46 0606 	adc.w	r6, r6, r6
   d71cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d71d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d71d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d71d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d71dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d71e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d71e4:	bf88      	it	hi
   d71e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d71ea:	d81e      	bhi.n	d722a <__aeabi_dmul+0xde>
   d71ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d71f0:	bf08      	it	eq
   d71f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d71f6:	f150 0000 	adcs.w	r0, r0, #0
   d71fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d71fe:	bd70      	pop	{r4, r5, r6, pc}
   d7200:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7204:	ea46 0101 	orr.w	r1, r6, r1
   d7208:	ea40 0002 	orr.w	r0, r0, r2
   d720c:	ea81 0103 	eor.w	r1, r1, r3
   d7210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7214:	bfc2      	ittt	gt
   d7216:	ebd4 050c 	rsbsgt	r5, r4, ip
   d721a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d721e:	bd70      	popgt	{r4, r5, r6, pc}
   d7220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7224:	f04f 0e00 	mov.w	lr, #0
   d7228:	3c01      	subs	r4, #1
   d722a:	f300 80ab 	bgt.w	d7384 <__aeabi_dmul+0x238>
   d722e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7232:	bfde      	ittt	le
   d7234:	2000      	movle	r0, #0
   d7236:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d723a:	bd70      	pople	{r4, r5, r6, pc}
   d723c:	f1c4 0400 	rsb	r4, r4, #0
   d7240:	3c20      	subs	r4, #32
   d7242:	da35      	bge.n	d72b0 <__aeabi_dmul+0x164>
   d7244:	340c      	adds	r4, #12
   d7246:	dc1b      	bgt.n	d7280 <__aeabi_dmul+0x134>
   d7248:	f104 0414 	add.w	r4, r4, #20
   d724c:	f1c4 0520 	rsb	r5, r4, #32
   d7250:	fa00 f305 	lsl.w	r3, r0, r5
   d7254:	fa20 f004 	lsr.w	r0, r0, r4
   d7258:	fa01 f205 	lsl.w	r2, r1, r5
   d725c:	ea40 0002 	orr.w	r0, r0, r2
   d7260:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d726c:	fa21 f604 	lsr.w	r6, r1, r4
   d7270:	eb42 0106 	adc.w	r1, r2, r6
   d7274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7278:	bf08      	it	eq
   d727a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d727e:	bd70      	pop	{r4, r5, r6, pc}
   d7280:	f1c4 040c 	rsb	r4, r4, #12
   d7284:	f1c4 0520 	rsb	r5, r4, #32
   d7288:	fa00 f304 	lsl.w	r3, r0, r4
   d728c:	fa20 f005 	lsr.w	r0, r0, r5
   d7290:	fa01 f204 	lsl.w	r2, r1, r4
   d7294:	ea40 0002 	orr.w	r0, r0, r2
   d7298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d729c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d72a0:	f141 0100 	adc.w	r1, r1, #0
   d72a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d72a8:	bf08      	it	eq
   d72aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d72ae:	bd70      	pop	{r4, r5, r6, pc}
   d72b0:	f1c4 0520 	rsb	r5, r4, #32
   d72b4:	fa00 f205 	lsl.w	r2, r0, r5
   d72b8:	ea4e 0e02 	orr.w	lr, lr, r2
   d72bc:	fa20 f304 	lsr.w	r3, r0, r4
   d72c0:	fa01 f205 	lsl.w	r2, r1, r5
   d72c4:	ea43 0302 	orr.w	r3, r3, r2
   d72c8:	fa21 f004 	lsr.w	r0, r1, r4
   d72cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d72d0:	fa21 f204 	lsr.w	r2, r1, r4
   d72d4:	ea20 0002 	bic.w	r0, r0, r2
   d72d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d72dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d72e0:	bf08      	it	eq
   d72e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d72e6:	bd70      	pop	{r4, r5, r6, pc}
   d72e8:	f094 0f00 	teq	r4, #0
   d72ec:	d10f      	bne.n	d730e <__aeabi_dmul+0x1c2>
   d72ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d72f2:	0040      	lsls	r0, r0, #1
   d72f4:	eb41 0101 	adc.w	r1, r1, r1
   d72f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72fc:	bf08      	it	eq
   d72fe:	3c01      	subeq	r4, #1
   d7300:	d0f7      	beq.n	d72f2 <__aeabi_dmul+0x1a6>
   d7302:	ea41 0106 	orr.w	r1, r1, r6
   d7306:	f095 0f00 	teq	r5, #0
   d730a:	bf18      	it	ne
   d730c:	4770      	bxne	lr
   d730e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7312:	0052      	lsls	r2, r2, #1
   d7314:	eb43 0303 	adc.w	r3, r3, r3
   d7318:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d731c:	bf08      	it	eq
   d731e:	3d01      	subeq	r5, #1
   d7320:	d0f7      	beq.n	d7312 <__aeabi_dmul+0x1c6>
   d7322:	ea43 0306 	orr.w	r3, r3, r6
   d7326:	4770      	bx	lr
   d7328:	ea94 0f0c 	teq	r4, ip
   d732c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7330:	bf18      	it	ne
   d7332:	ea95 0f0c 	teqne	r5, ip
   d7336:	d00c      	beq.n	d7352 <__aeabi_dmul+0x206>
   d7338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d733c:	bf18      	it	ne
   d733e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7342:	d1d1      	bne.n	d72e8 <__aeabi_dmul+0x19c>
   d7344:	ea81 0103 	eor.w	r1, r1, r3
   d7348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d734c:	f04f 0000 	mov.w	r0, #0
   d7350:	bd70      	pop	{r4, r5, r6, pc}
   d7352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7356:	bf06      	itte	eq
   d7358:	4610      	moveq	r0, r2
   d735a:	4619      	moveq	r1, r3
   d735c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7360:	d019      	beq.n	d7396 <__aeabi_dmul+0x24a>
   d7362:	ea94 0f0c 	teq	r4, ip
   d7366:	d102      	bne.n	d736e <__aeabi_dmul+0x222>
   d7368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d736c:	d113      	bne.n	d7396 <__aeabi_dmul+0x24a>
   d736e:	ea95 0f0c 	teq	r5, ip
   d7372:	d105      	bne.n	d7380 <__aeabi_dmul+0x234>
   d7374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7378:	bf1c      	itt	ne
   d737a:	4610      	movne	r0, r2
   d737c:	4619      	movne	r1, r3
   d737e:	d10a      	bne.n	d7396 <__aeabi_dmul+0x24a>
   d7380:	ea81 0103 	eor.w	r1, r1, r3
   d7384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7388:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d738c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7390:	f04f 0000 	mov.w	r0, #0
   d7394:	bd70      	pop	{r4, r5, r6, pc}
   d7396:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d739a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d739e:	bd70      	pop	{r4, r5, r6, pc}

000d73a0 <__aeabi_ddiv>:
   d73a0:	b570      	push	{r4, r5, r6, lr}
   d73a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d73a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d73aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d73ae:	bf1d      	ittte	ne
   d73b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d73b4:	ea94 0f0c 	teqne	r4, ip
   d73b8:	ea95 0f0c 	teqne	r5, ip
   d73bc:	f000 f8a7 	bleq	d750e <__aeabi_ddiv+0x16e>
   d73c0:	eba4 0405 	sub.w	r4, r4, r5
   d73c4:	ea81 0e03 	eor.w	lr, r1, r3
   d73c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d73cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d73d0:	f000 8088 	beq.w	d74e4 <__aeabi_ddiv+0x144>
   d73d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d73d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d73dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d73e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d73e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d73e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d73ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d73f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d73f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d73f8:	429d      	cmp	r5, r3
   d73fa:	bf08      	it	eq
   d73fc:	4296      	cmpeq	r6, r2
   d73fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7402:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7406:	d202      	bcs.n	d740e <__aeabi_ddiv+0x6e>
   d7408:	085b      	lsrs	r3, r3, #1
   d740a:	ea4f 0232 	mov.w	r2, r2, rrx
   d740e:	1ab6      	subs	r6, r6, r2
   d7410:	eb65 0503 	sbc.w	r5, r5, r3
   d7414:	085b      	lsrs	r3, r3, #1
   d7416:	ea4f 0232 	mov.w	r2, r2, rrx
   d741a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d741e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7422:	ebb6 0e02 	subs.w	lr, r6, r2
   d7426:	eb75 0e03 	sbcs.w	lr, r5, r3
   d742a:	bf22      	ittt	cs
   d742c:	1ab6      	subcs	r6, r6, r2
   d742e:	4675      	movcs	r5, lr
   d7430:	ea40 000c 	orrcs.w	r0, r0, ip
   d7434:	085b      	lsrs	r3, r3, #1
   d7436:	ea4f 0232 	mov.w	r2, r2, rrx
   d743a:	ebb6 0e02 	subs.w	lr, r6, r2
   d743e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7442:	bf22      	ittt	cs
   d7444:	1ab6      	subcs	r6, r6, r2
   d7446:	4675      	movcs	r5, lr
   d7448:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d744c:	085b      	lsrs	r3, r3, #1
   d744e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7452:	ebb6 0e02 	subs.w	lr, r6, r2
   d7456:	eb75 0e03 	sbcs.w	lr, r5, r3
   d745a:	bf22      	ittt	cs
   d745c:	1ab6      	subcs	r6, r6, r2
   d745e:	4675      	movcs	r5, lr
   d7460:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7464:	085b      	lsrs	r3, r3, #1
   d7466:	ea4f 0232 	mov.w	r2, r2, rrx
   d746a:	ebb6 0e02 	subs.w	lr, r6, r2
   d746e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7472:	bf22      	ittt	cs
   d7474:	1ab6      	subcs	r6, r6, r2
   d7476:	4675      	movcs	r5, lr
   d7478:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d747c:	ea55 0e06 	orrs.w	lr, r5, r6
   d7480:	d018      	beq.n	d74b4 <__aeabi_ddiv+0x114>
   d7482:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7486:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d748a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d748e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7492:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7496:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d749a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d749e:	d1c0      	bne.n	d7422 <__aeabi_ddiv+0x82>
   d74a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d74a4:	d10b      	bne.n	d74be <__aeabi_ddiv+0x11e>
   d74a6:	ea41 0100 	orr.w	r1, r1, r0
   d74aa:	f04f 0000 	mov.w	r0, #0
   d74ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d74b2:	e7b6      	b.n	d7422 <__aeabi_ddiv+0x82>
   d74b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d74b8:	bf04      	itt	eq
   d74ba:	4301      	orreq	r1, r0
   d74bc:	2000      	moveq	r0, #0
   d74be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d74c2:	bf88      	it	hi
   d74c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d74c8:	f63f aeaf 	bhi.w	d722a <__aeabi_dmul+0xde>
   d74cc:	ebb5 0c03 	subs.w	ip, r5, r3
   d74d0:	bf04      	itt	eq
   d74d2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d74d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d74da:	f150 0000 	adcs.w	r0, r0, #0
   d74de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d74e2:	bd70      	pop	{r4, r5, r6, pc}
   d74e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d74e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d74ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d74f0:	bfc2      	ittt	gt
   d74f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d74f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d74fa:	bd70      	popgt	{r4, r5, r6, pc}
   d74fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7500:	f04f 0e00 	mov.w	lr, #0
   d7504:	3c01      	subs	r4, #1
   d7506:	e690      	b.n	d722a <__aeabi_dmul+0xde>
   d7508:	ea45 0e06 	orr.w	lr, r5, r6
   d750c:	e68d      	b.n	d722a <__aeabi_dmul+0xde>
   d750e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7512:	ea94 0f0c 	teq	r4, ip
   d7516:	bf08      	it	eq
   d7518:	ea95 0f0c 	teqeq	r5, ip
   d751c:	f43f af3b 	beq.w	d7396 <__aeabi_dmul+0x24a>
   d7520:	ea94 0f0c 	teq	r4, ip
   d7524:	d10a      	bne.n	d753c <__aeabi_ddiv+0x19c>
   d7526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d752a:	f47f af34 	bne.w	d7396 <__aeabi_dmul+0x24a>
   d752e:	ea95 0f0c 	teq	r5, ip
   d7532:	f47f af25 	bne.w	d7380 <__aeabi_dmul+0x234>
   d7536:	4610      	mov	r0, r2
   d7538:	4619      	mov	r1, r3
   d753a:	e72c      	b.n	d7396 <__aeabi_dmul+0x24a>
   d753c:	ea95 0f0c 	teq	r5, ip
   d7540:	d106      	bne.n	d7550 <__aeabi_ddiv+0x1b0>
   d7542:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7546:	f43f aefd 	beq.w	d7344 <__aeabi_dmul+0x1f8>
   d754a:	4610      	mov	r0, r2
   d754c:	4619      	mov	r1, r3
   d754e:	e722      	b.n	d7396 <__aeabi_dmul+0x24a>
   d7550:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7554:	bf18      	it	ne
   d7556:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d755a:	f47f aec5 	bne.w	d72e8 <__aeabi_dmul+0x19c>
   d755e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7562:	f47f af0d 	bne.w	d7380 <__aeabi_dmul+0x234>
   d7566:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d756a:	f47f aeeb 	bne.w	d7344 <__aeabi_dmul+0x1f8>
   d756e:	e712      	b.n	d7396 <__aeabi_dmul+0x24a>

000d7570 <__gedf2>:
   d7570:	f04f 3cff 	mov.w	ip, #4294967295
   d7574:	e006      	b.n	d7584 <__cmpdf2+0x4>
   d7576:	bf00      	nop

000d7578 <__ledf2>:
   d7578:	f04f 0c01 	mov.w	ip, #1
   d757c:	e002      	b.n	d7584 <__cmpdf2+0x4>
   d757e:	bf00      	nop

000d7580 <__cmpdf2>:
   d7580:	f04f 0c01 	mov.w	ip, #1
   d7584:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7588:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d758c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7590:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7594:	bf18      	it	ne
   d7596:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d759a:	d01b      	beq.n	d75d4 <__cmpdf2+0x54>
   d759c:	b001      	add	sp, #4
   d759e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d75a2:	bf0c      	ite	eq
   d75a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d75a8:	ea91 0f03 	teqne	r1, r3
   d75ac:	bf02      	ittt	eq
   d75ae:	ea90 0f02 	teqeq	r0, r2
   d75b2:	2000      	moveq	r0, #0
   d75b4:	4770      	bxeq	lr
   d75b6:	f110 0f00 	cmn.w	r0, #0
   d75ba:	ea91 0f03 	teq	r1, r3
   d75be:	bf58      	it	pl
   d75c0:	4299      	cmppl	r1, r3
   d75c2:	bf08      	it	eq
   d75c4:	4290      	cmpeq	r0, r2
   d75c6:	bf2c      	ite	cs
   d75c8:	17d8      	asrcs	r0, r3, #31
   d75ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d75ce:	f040 0001 	orr.w	r0, r0, #1
   d75d2:	4770      	bx	lr
   d75d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d75d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d75dc:	d102      	bne.n	d75e4 <__cmpdf2+0x64>
   d75de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d75e2:	d107      	bne.n	d75f4 <__cmpdf2+0x74>
   d75e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d75e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d75ec:	d1d6      	bne.n	d759c <__cmpdf2+0x1c>
   d75ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d75f2:	d0d3      	beq.n	d759c <__cmpdf2+0x1c>
   d75f4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d75f8:	4770      	bx	lr
   d75fa:	bf00      	nop

000d75fc <__aeabi_cdrcmple>:
   d75fc:	4684      	mov	ip, r0
   d75fe:	4610      	mov	r0, r2
   d7600:	4662      	mov	r2, ip
   d7602:	468c      	mov	ip, r1
   d7604:	4619      	mov	r1, r3
   d7606:	4663      	mov	r3, ip
   d7608:	e000      	b.n	d760c <__aeabi_cdcmpeq>
   d760a:	bf00      	nop

000d760c <__aeabi_cdcmpeq>:
   d760c:	b501      	push	{r0, lr}
   d760e:	f7ff ffb7 	bl	d7580 <__cmpdf2>
   d7612:	2800      	cmp	r0, #0
   d7614:	bf48      	it	mi
   d7616:	f110 0f00 	cmnmi.w	r0, #0
   d761a:	bd01      	pop	{r0, pc}

000d761c <__aeabi_dcmpeq>:
   d761c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7620:	f7ff fff4 	bl	d760c <__aeabi_cdcmpeq>
   d7624:	bf0c      	ite	eq
   d7626:	2001      	moveq	r0, #1
   d7628:	2000      	movne	r0, #0
   d762a:	f85d fb08 	ldr.w	pc, [sp], #8
   d762e:	bf00      	nop

000d7630 <__aeabi_dcmplt>:
   d7630:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7634:	f7ff ffea 	bl	d760c <__aeabi_cdcmpeq>
   d7638:	bf34      	ite	cc
   d763a:	2001      	movcc	r0, #1
   d763c:	2000      	movcs	r0, #0
   d763e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7642:	bf00      	nop

000d7644 <__aeabi_dcmple>:
   d7644:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7648:	f7ff ffe0 	bl	d760c <__aeabi_cdcmpeq>
   d764c:	bf94      	ite	ls
   d764e:	2001      	movls	r0, #1
   d7650:	2000      	movhi	r0, #0
   d7652:	f85d fb08 	ldr.w	pc, [sp], #8
   d7656:	bf00      	nop

000d7658 <__aeabi_dcmpge>:
   d7658:	f84d ed08 	str.w	lr, [sp, #-8]!
   d765c:	f7ff ffce 	bl	d75fc <__aeabi_cdrcmple>
   d7660:	bf94      	ite	ls
   d7662:	2001      	movls	r0, #1
   d7664:	2000      	movhi	r0, #0
   d7666:	f85d fb08 	ldr.w	pc, [sp], #8
   d766a:	bf00      	nop

000d766c <__aeabi_dcmpgt>:
   d766c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7670:	f7ff ffc4 	bl	d75fc <__aeabi_cdrcmple>
   d7674:	bf34      	ite	cc
   d7676:	2001      	movcc	r0, #1
   d7678:	2000      	movcs	r0, #0
   d767a:	f85d fb08 	ldr.w	pc, [sp], #8
   d767e:	bf00      	nop

000d7680 <__aeabi_dcmpun>:
   d7680:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7684:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7688:	d102      	bne.n	d7690 <__aeabi_dcmpun+0x10>
   d768a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d768e:	d10a      	bne.n	d76a6 <__aeabi_dcmpun+0x26>
   d7690:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7698:	d102      	bne.n	d76a0 <__aeabi_dcmpun+0x20>
   d769a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d769e:	d102      	bne.n	d76a6 <__aeabi_dcmpun+0x26>
   d76a0:	f04f 0000 	mov.w	r0, #0
   d76a4:	4770      	bx	lr
   d76a6:	f04f 0001 	mov.w	r0, #1
   d76aa:	4770      	bx	lr

000d76ac <__aeabi_d2f>:
   d76ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d76b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d76b4:	bf24      	itt	cs
   d76b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d76ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d76be:	d90d      	bls.n	d76dc <__aeabi_d2f+0x30>
   d76c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d76c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d76c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d76cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d76d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d76d4:	bf08      	it	eq
   d76d6:	f020 0001 	biceq.w	r0, r0, #1
   d76da:	4770      	bx	lr
   d76dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d76e0:	d121      	bne.n	d7726 <__aeabi_d2f+0x7a>
   d76e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d76e6:	bfbc      	itt	lt
   d76e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d76ec:	4770      	bxlt	lr
   d76ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d76f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d76f6:	f1c2 0218 	rsb	r2, r2, #24
   d76fa:	f1c2 0c20 	rsb	ip, r2, #32
   d76fe:	fa10 f30c 	lsls.w	r3, r0, ip
   d7702:	fa20 f002 	lsr.w	r0, r0, r2
   d7706:	bf18      	it	ne
   d7708:	f040 0001 	orrne.w	r0, r0, #1
   d770c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7710:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7714:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7718:	ea40 000c 	orr.w	r0, r0, ip
   d771c:	fa23 f302 	lsr.w	r3, r3, r2
   d7720:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7724:	e7cc      	b.n	d76c0 <__aeabi_d2f+0x14>
   d7726:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d772a:	d107      	bne.n	d773c <__aeabi_d2f+0x90>
   d772c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7730:	bf1e      	ittt	ne
   d7732:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7736:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d773a:	4770      	bxne	lr
   d773c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7740:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7744:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7748:	4770      	bx	lr
   d774a:	bf00      	nop

000d774c <__cxa_atexit>:
   d774c:	b510      	push	{r4, lr}
   d774e:	4c05      	ldr	r4, [pc, #20]	; (d7764 <__cxa_atexit+0x18>)
   d7750:	4613      	mov	r3, r2
   d7752:	b12c      	cbz	r4, d7760 <__cxa_atexit+0x14>
   d7754:	460a      	mov	r2, r1
   d7756:	4601      	mov	r1, r0
   d7758:	2002      	movs	r0, #2
   d775a:	f3af 8000 	nop.w
   d775e:	bd10      	pop	{r4, pc}
   d7760:	4620      	mov	r0, r4
   d7762:	bd10      	pop	{r4, pc}
   d7764:	00000000 	.word	0x00000000

000d7768 <memcpy>:
   d7768:	b510      	push	{r4, lr}
   d776a:	1e43      	subs	r3, r0, #1
   d776c:	440a      	add	r2, r1
   d776e:	4291      	cmp	r1, r2
   d7770:	d004      	beq.n	d777c <memcpy+0x14>
   d7772:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7776:	f803 4f01 	strb.w	r4, [r3, #1]!
   d777a:	e7f8      	b.n	d776e <memcpy+0x6>
   d777c:	bd10      	pop	{r4, pc}

000d777e <memset>:
   d777e:	4402      	add	r2, r0
   d7780:	4603      	mov	r3, r0
   d7782:	4293      	cmp	r3, r2
   d7784:	d002      	beq.n	d778c <memset+0xe>
   d7786:	f803 1b01 	strb.w	r1, [r3], #1
   d778a:	e7fa      	b.n	d7782 <memset+0x4>
   d778c:	4770      	bx	lr
	...

000d7790 <srand>:
   d7790:	b538      	push	{r3, r4, r5, lr}
   d7792:	4b12      	ldr	r3, [pc, #72]	; (d77dc <srand+0x4c>)
   d7794:	681c      	ldr	r4, [r3, #0]
   d7796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7798:	4605      	mov	r5, r0
   d779a:	b9d3      	cbnz	r3, d77d2 <srand+0x42>
   d779c:	2018      	movs	r0, #24
   d779e:	f7fd fc5d 	bl	d505c <malloc>
   d77a2:	f243 330e 	movw	r3, #13070	; 0x330e
   d77a6:	63a0      	str	r0, [r4, #56]	; 0x38
   d77a8:	8003      	strh	r3, [r0, #0]
   d77aa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d77ae:	8043      	strh	r3, [r0, #2]
   d77b0:	f241 2334 	movw	r3, #4660	; 0x1234
   d77b4:	8083      	strh	r3, [r0, #4]
   d77b6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d77ba:	80c3      	strh	r3, [r0, #6]
   d77bc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d77c0:	8103      	strh	r3, [r0, #8]
   d77c2:	2305      	movs	r3, #5
   d77c4:	8143      	strh	r3, [r0, #10]
   d77c6:	230b      	movs	r3, #11
   d77c8:	8183      	strh	r3, [r0, #12]
   d77ca:	2201      	movs	r2, #1
   d77cc:	2300      	movs	r3, #0
   d77ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d77d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d77d4:	2200      	movs	r2, #0
   d77d6:	611d      	str	r5, [r3, #16]
   d77d8:	615a      	str	r2, [r3, #20]
   d77da:	bd38      	pop	{r3, r4, r5, pc}
   d77dc:	2003dd5c 	.word	0x2003dd5c

000d77e0 <strdup>:
   d77e0:	4b02      	ldr	r3, [pc, #8]	; (d77ec <strdup+0xc>)
   d77e2:	4601      	mov	r1, r0
   d77e4:	6818      	ldr	r0, [r3, #0]
   d77e6:	f000 b803 	b.w	d77f0 <_strdup_r>
   d77ea:	bf00      	nop
   d77ec:	2003dd5c 	.word	0x2003dd5c

000d77f0 <_strdup_r>:
   d77f0:	b570      	push	{r4, r5, r6, lr}
   d77f2:	4606      	mov	r6, r0
   d77f4:	4608      	mov	r0, r1
   d77f6:	460c      	mov	r4, r1
   d77f8:	f000 f80d 	bl	d7816 <strlen>
   d77fc:	1c45      	adds	r5, r0, #1
   d77fe:	4629      	mov	r1, r5
   d7800:	4630      	mov	r0, r6
   d7802:	f7fd fc53 	bl	d50ac <_malloc_r>
   d7806:	4606      	mov	r6, r0
   d7808:	b118      	cbz	r0, d7812 <_strdup_r+0x22>
   d780a:	462a      	mov	r2, r5
   d780c:	4621      	mov	r1, r4
   d780e:	f7ff ffab 	bl	d7768 <memcpy>
   d7812:	4630      	mov	r0, r6
   d7814:	bd70      	pop	{r4, r5, r6, pc}

000d7816 <strlen>:
   d7816:	4603      	mov	r3, r0
   d7818:	f813 2b01 	ldrb.w	r2, [r3], #1
   d781c:	2a00      	cmp	r2, #0
   d781e:	d1fb      	bne.n	d7818 <strlen+0x2>
   d7820:	1a18      	subs	r0, r3, r0
   d7822:	3801      	subs	r0, #1
   d7824:	4770      	bx	lr

000d7826 <link_code_end>:
	...

000d7828 <dynalib_user>:
   d7828:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7838:	0000 0000                                   ....

000d783c <_ZL17gyroCalibration_1>:
   d783c:	5fea 4059 cab9 3e5f c748 bf91               ._Y@.._>H...

000d7848 <_ZL18accelCalibration_1>:
   d7848:	a414 3c06 3d28 3e92 3a77 3e24 7254 6e61     ...<(=.>w:$>Tran
   d7858:	6d73 7369 6973 6e6f 6220 6765 6e69 2e2e     smission begin..
   d7868:	002e 7277 7469 6e69 2067 202d 6425 7320     ..writing - %d s
   d7878:	6275 6441 7264 7365 0073 7277 7469 6e69     ubAddress.writin
   d7888:	2067 202d 6425 6420 7461 0061 7254 6e61     g - %d data.Tran
   d7898:	6d73 7369 6973 6e6f 7320 6375 6563 7373     smission success
   d78a8:	7566 216c 5400 6172 736e 696d 7373 6f69     ful!.Transmissio
   d78b8:	206e 6166 6c69 6465 002e 7341 5720 7269     n failed..As Wir
   d78c8:	2e65 6e65 5464 6172 736e 696d 7373 6f69     e.endTransmissio
   d78d8:	206e 6572 7574 6e72 2073 2061 6f6e 2d6e     n returns a non-
   d78e8:	657a 6f72 7620 6c61 6575 6920 652e 2c2e     zero value i.e.,
   d78f8:	2520 0064 6773 694c 0031 6773 694c 0032      %d.sgLi1.sgLi2.
   d7908:	6773 6f4c 0031 6773 6952 0031 6773 6952     sgLo1.sgRi1.sgRi
   d7918:	0032 6773 6f52 0031 6625 202c 6625 202c     2.sgRo1.%f, %f, 
   d7928:	6625 6100 676e 656c 7453 3172 6100 676e     %f.angleStr1.ang
   d7938:	656c 7453 3272 6100 676e 656c 3173 6100     leStr2.angles1.a
   d7948:	676e 656c 3273 0000                         ngles2..

000d7950 <_ZTVN5spark13EthernetClassE>:
	...
   d7958:	512b 000d 5121 000d 5117 000d 510d 000d     +Q..!Q...Q...Q..
   d7968:	5101 000d 50f5 000d 50e9 000d 50e1 000d     .Q...P...P...P..
   d7978:	50d7 000d 50cd 000d 60d5 000d 6162 6475     .P...P...`..baud
   d7988:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d7998:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d79a8:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d79b8:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d79c8:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d79d8:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d79e8:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d79f8:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d7a08:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d7a18:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d7a28:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d7a38:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d7a48:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d7a58:	696e 0063 6c61 006c 005a 2b25 3330 3a64     nic.all.Z.%+03d:
   d7a68:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d7a78:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d7a88:	0000 0000                                   ....

000d7a8c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7a94:	54b1 000d 54b7 000d 54fb 000d 54c5 000d     .T...T...T...T..
   d7aa4:	54b3 000d                                   .T..

000d7aa8 <_ZTV9IPAddress>:
	...
   d7ab0:	5a49 000d 5a39 000d 5a3b 000d               IZ..9Z..;Z..

000d7abc <_ZTV9USBSerial>:
	...
   d7ac4:	5b21 000d 5b71 000d 5b7f 000d 51e1 000d     ![..q[...[...Q..
   d7ad4:	5b5d 000d 5b23 000d 5b39 000d 5b6b 000d     ][..#[..9[..k[..
   d7ae4:	5b4f 000d 5b1d 000d                         O[...[..

000d7aec <_ZTVN5spark13CellularClassE>:
	...
   d7af4:	5c8b 000d 5c81 000d 5c77 000d 5c2d 000d     .\...\..w\..-\..
   d7b04:	5c6b 000d 5c5f 000d 5c53 000d 5c4b 000d     k\.._\..S\..K\..
   d7b14:	5c41 000d 5c37 000d 60d5 000d               A\..7\...`..

000d7b20 <_ZTV11USARTSerial>:
	...
   d7b28:	5cc5 000d 5d15 000d 5d23 000d 51e1 000d     .\...]..#]...Q..
   d7b38:	5cd9 000d 5cfb 000d 5ce7 000d 5d0f 000d     .\...\...\...]..
   d7b48:	5cc7 000d 5ccb 000d                         .\...\..

000d7b50 <_ZTV7TwoWire>:
	...
   d7b58:	5df1 000d 5e3b 000d 5e13 000d 5df3 000d     .]..;^...^...]..
   d7b68:	5e1b 000d 5e23 000d 5e2b 000d 5e33 000d     .^..#^..+^..3^..

000d7b78 <_ZTVN5spark9MeshClassE>:
	...
   d7b80:	5f51 000d 5f47 000d 5f3d 000d 5f33 000d     Q_..G_..=_..3_..
   d7b90:	5f27 000d 5f1b 000d 5f0f 000d 5f07 000d     '_..._..._..._..
   d7ba0:	5efd 000d 5ef3 000d 60d5 000d               .^...^...`..

000d7bac <_ZTVN5spark12NetworkClassE>:
	...
   d7bb4:	606d 000d 6077 000d 6081 000d 608b 000d     m`..w`...`...`..
   d7bc4:	6095 000d 60a1 000d 60ad 000d 60b9 000d     .`...`...`...`..
   d7bd4:	60c1 000d 60cb 000d 60d5 000d               .`...`...`..

000d7be0 <_ZSt7nothrow>:
   d7be0:	0000 0000 7173 7472 0000 0000 0000 0000     ....sqrt........

000d7bf0 <atanlo>:
   d7bf0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   d7c00:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000d7c10 <atanhi>:
   d7c10:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   d7c20:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000d7c30 <__sf_fake_stdin>:
	...

000d7c50 <__sf_fake_stdout>:
	...

000d7c70 <__sf_fake_stderr>:
	...
   d7c90:	0043                                        C.

000d7c92 <link_const_variable_data_end>:
	...

000d7c94 <link_constructors_location>:
   d7c94:	000d4be1 	.word	0x000d4be1
   d7c98:	000d5135 	.word	0x000d5135
   d7c9c:	000d5165 	.word	0x000d5165
   d7ca0:	000d51b9 	.word	0x000d51b9
   d7ca4:	000d531d 	.word	0x000d531d
   d7ca8:	000d532d 	.word	0x000d532d
   d7cac:	000d5385 	.word	0x000d5385
   d7cb0:	000d5c95 	.word	0x000d5c95
   d7cb4:	000d601d 	.word	0x000d601d
   d7cb8:	000d61a1 	.word	0x000d61a1
   d7cbc:	000d636d 	.word	0x000d636d
   d7cc0:	000d63f1 	.word	0x000d63f1
   d7cc4:	000d64b5 	.word	0x000d64b5
   d7cc8:	000d6579 	.word	0x000d6579

000d7ccc <link_constructors_end>:
   d7ccc:	00000000 	.word	0x00000000
