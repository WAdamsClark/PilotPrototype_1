
c:/Users/adams/OneDrive/Documents/GitHub/ParticleWorkbench/PilotPrototype_1/target/1.5.2/boron/PilotPrototype_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003d20  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7d40  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003dd3c  000d7d44  0001dd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a48  2003dda8  2003dda8  0002dda8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7db0  000d7db0  00027db0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7dd8  000d7dd8  00027dd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d9084  00000000  00000000  00027ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001084a  00000000  00000000  00100e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c96b  00000000  00000000  001116aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002290  00000000  00000000  0012e015  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004410  00000000  00000000  001302a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003517e  00000000  00000000  001346b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026e7b  00000000  00000000  00169833  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010854f  00000000  00000000  001906ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c9ec  00000000  00000000  00298c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fbdd 	bl	d77f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fbe2 	bl	d7806 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dd3c 	.word	0x2003dd3c
   d404c:	000d7d44 	.word	0x000d7d44
   d4050:	2003dda8 	.word	0x2003dda8
   d4054:	2003dda8 	.word	0x2003dda8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fa3f 	bl	d54e0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7d3c 	.word	0x000d7d3c
   d4084:	000d7d04 	.word	0x000d7d04

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bc86 	b.w	d4998 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fae5 	bl	d465c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 b9e5 	b.w	d5464 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 b823 	b.w	d50e4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b829 	b.w	d50f4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b827 	b.w	d50f4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40b6:	b538      	push	{r3, r4, r5, lr}
   d40b8:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40ba:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40bc:	b128      	cbz	r0, d40ca <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40be:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40c0:	210c      	movs	r1, #12
   d40c2:	f002 f981 	bl	d63c8 <_ZdlPvj>
            wakeupSource = next;
   d40c6:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d40c8:	e7f8      	b.n	d40bc <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d40ca:	4620      	mov	r0, r4
   d40cc:	bd38      	pop	{r3, r4, r5, pc}

000d40ce <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ce:	b510      	push	{r4, lr}
   d40d0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40d2:	6800      	ldr	r0, [r0, #0]
   d40d4:	b108      	cbz	r0, d40da <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40d6:	f001 f80d 	bl	d50f4 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}

000d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40de:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40e0:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40e4:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e6:	f88d 3000 	strb.w	r3, [sp]
   d40ea:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40ec:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ee:	f001 fb65 	bl	d57bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d40f2:	4628      	mov	r0, r5
   d40f4:	b003      	add	sp, #12
   d40f6:	bd30      	pop	{r4, r5, pc}

000d40f8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40f8:	6803      	ldr	r3, [r0, #0]
   d40fa:	b2c9      	uxtb	r1, r1
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4718      	bx	r3

000d4100 <_Z12configSensoriii>:
const int sgPinRo1 = A2;        // Strain Gauge pin for analogRead
const int sgNum = 20;           // Number of values to be held in strain gauge buffer of previous readings
int sumSG = 0;                  // Sum of all values in each strain gauge buffer

/*========== Configure MPU-6050 ==========*/
void configSensor(int slaveAddress, int subAddress, int data){
   d4100:	b570      	push	{r4, r5, r6, lr}
   d4102:	4606      	mov	r6, r0
   d4104:	4614      	mov	r4, r2
   d4106:	460d      	mov	r5, r1
    Wire.beginTransmission(slaveAddress);
   d4108:	f002 f92a 	bl	d6360 <_Z19__fetch_global_Wirev>
   d410c:	4631      	mov	r1, r6
   d410e:	f001 ff29 	bl	d5f64 <_ZN7TwoWire17beginTransmissionEi>
    Serial.print("Transmission begin...");
   d4112:	f001 fda9 	bl	d5c68 <_Z16_fetch_usbserialv>
   d4116:	4929      	ldr	r1, [pc, #164]	; (d41bc <_Z12configSensoriii+0xbc>)
   d4118:	f001 f8cc 	bl	d52b4 <_ZN5Print5printEPKc>
    Serial.println("");
   d411c:	f001 fda4 	bl	d5c68 <_Z16_fetch_usbserialv>
   d4120:	4927      	ldr	r1, [pc, #156]	; (d41c0 <_Z12configSensoriii+0xc0>)
   d4122:	f001 f8da 	bl	d52da <_ZN5Print7printlnEPKc>
    Wire.write(subAddress);
   d4126:	f002 f91b 	bl	d6360 <_Z19__fetch_global_Wirev>
   d412a:	4629      	mov	r1, r5
   d412c:	f7ff ffe4 	bl	d40f8 <_ZN7TwoWire5writeEi>
    Serial.printf("writing - %d subAddress", subAddress);
   d4130:	f001 fd9a 	bl	d5c68 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4134:	462b      	mov	r3, r5
   d4136:	4a23      	ldr	r2, [pc, #140]	; (d41c4 <_Z12configSensoriii+0xc4>)
   d4138:	2100      	movs	r1, #0
   d413a:	f001 f8f8 	bl	d532e <_ZN5Print11printf_implEbPKcz>
    Serial.println("");
   d413e:	f001 fd93 	bl	d5c68 <_Z16_fetch_usbserialv>
   d4142:	491f      	ldr	r1, [pc, #124]	; (d41c0 <_Z12configSensoriii+0xc0>)
   d4144:	f001 f8c9 	bl	d52da <_ZN5Print7printlnEPKc>
    Wire.write(data);
   d4148:	f002 f90a 	bl	d6360 <_Z19__fetch_global_Wirev>
   d414c:	4621      	mov	r1, r4
   d414e:	f7ff ffd3 	bl	d40f8 <_ZN7TwoWire5writeEi>
    Serial.printf("writing - %d data", data);
   d4152:	f001 fd89 	bl	d5c68 <_Z16_fetch_usbserialv>
   d4156:	4623      	mov	r3, r4
   d4158:	4a1b      	ldr	r2, [pc, #108]	; (d41c8 <_Z12configSensoriii+0xc8>)
    Serial.println("");
    result = Wire.endTransmission(true);
   d415a:	4c1c      	ldr	r4, [pc, #112]	; (d41cc <_Z12configSensoriii+0xcc>)
   d415c:	2100      	movs	r1, #0
   d415e:	f001 f8e6 	bl	d532e <_ZN5Print11printf_implEbPKcz>
    Wire.write(subAddress);
    Serial.printf("writing - %d subAddress", subAddress);
    Serial.println("");
    Wire.write(data);
    Serial.printf("writing - %d data", data);
    Serial.println("");
   d4162:	f001 fd81 	bl	d5c68 <_Z16_fetch_usbserialv>
   d4166:	4916      	ldr	r1, [pc, #88]	; (d41c0 <_Z12configSensoriii+0xc0>)
   d4168:	f001 f8b7 	bl	d52da <_ZN5Print7printlnEPKc>
    result = Wire.endTransmission(true);
   d416c:	f002 f8f8 	bl	d6360 <_Z19__fetch_global_Wirev>
   d4170:	2101      	movs	r1, #1
   d4172:	f001 fefa 	bl	d5f6a <_ZN7TwoWire15endTransmissionEh>
   d4176:	6020      	str	r0, [r4, #0]
    if(!result){
   d4178:	b928      	cbnz	r0, d4186 <_Z12configSensoriii+0x86>
        Serial.print("Transmission successful!");
   d417a:	f001 fd75 	bl	d5c68 <_Z16_fetch_usbserialv>
   d417e:	4914      	ldr	r1, [pc, #80]	; (d41d0 <_Z12configSensoriii+0xd0>)
   d4180:	f001 f898 	bl	d52b4 <_ZN5Print5printEPKc>
   d4184:	e010      	b.n	d41a8 <_Z12configSensoriii+0xa8>
        Serial.println("");
    }
    else{
        Serial.print("Transmission failed.");
   d4186:	f001 fd6f 	bl	d5c68 <_Z16_fetch_usbserialv>
   d418a:	4912      	ldr	r1, [pc, #72]	; (d41d4 <_Z12configSensoriii+0xd4>)
   d418c:	f001 f892 	bl	d52b4 <_ZN5Print5printEPKc>
        Serial.println("");
   d4190:	f001 fd6a 	bl	d5c68 <_Z16_fetch_usbserialv>
   d4194:	490a      	ldr	r1, [pc, #40]	; (d41c0 <_Z12configSensoriii+0xc0>)
   d4196:	f001 f8a0 	bl	d52da <_ZN5Print7printlnEPKc>
        Serial.printf("As Wire.endTransmission returns a non-zero value i.e., %d", result);
   d419a:	f001 fd65 	bl	d5c68 <_Z16_fetch_usbserialv>
   d419e:	6823      	ldr	r3, [r4, #0]
   d41a0:	4a0d      	ldr	r2, [pc, #52]	; (d41d8 <_Z12configSensoriii+0xd8>)
   d41a2:	2100      	movs	r1, #0
   d41a4:	f001 f8c3 	bl	d532e <_ZN5Print11printf_implEbPKcz>
        Serial.println("");
   d41a8:	f001 fd5e 	bl	d5c68 <_Z16_fetch_usbserialv>
   d41ac:	4904      	ldr	r1, [pc, #16]	; (d41c0 <_Z12configSensoriii+0xc0>)
   d41ae:	f001 f894 	bl	d52da <_ZN5Print7printlnEPKc>
    }
    delay(200);
   d41b2:	20c8      	movs	r0, #200	; 0xc8
}
   d41b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Serial.print("Transmission failed.");
        Serial.println("");
        Serial.printf("As Wire.endTransmission returns a non-zero value i.e., %d", result);
        Serial.println("");
    }
    delay(200);
   d41b8:	f001 b906 	b.w	d53c8 <delay>
   d41bc:	000d78dc 	.word	0x000d78dc
   d41c0:	000d7a9c 	.word	0x000d7a9c
   d41c4:	000d78f2 	.word	0x000d78f2
   d41c8:	000d790a 	.word	0x000d790a
   d41cc:	2003e338 	.word	0x2003e338
   d41d0:	000d791c 	.word	0x000d791c
   d41d4:	000d7935 	.word	0x000d7935
   d41d8:	000d794a 	.word	0x000d794a

000d41dc <_Z10sensorReadiPfRfS_>:
}

/*========== Perform Accelerometer, Temperature, and Gyroscope data read from MPU-6050 ==========*/
int sensorRead(int slaveAddress, float *accelData, float &temp, float *gyroData){
   d41dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d41e0:	ed2d 8b02 	vpush	{d8}
   d41e4:	4605      	mov	r5, r0
   d41e6:	b083      	sub	sp, #12
   d41e8:	469a      	mov	sl, r3
   d41ea:	460c      	mov	r4, r1
   d41ec:	4693      	mov	fp, r2
    Wire.beginTransmission(slaveAddress);           // Address desired slave device to read from                
   d41ee:	f002 f8b7 	bl	d6360 <_Z19__fetch_global_Wirev>
   d41f2:	4629      	mov	r1, r5
   d41f4:	f001 feb6 	bl	d5f64 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(ACCEL_REG_ADDR);                     // Indicate target address for reading in data
   d41f8:	f002 f8b2 	bl	d6360 <_Z19__fetch_global_Wirev>
   d41fc:	213b      	movs	r1, #59	; 0x3b
   d41fe:	f7ff ff7b 	bl	d40f8 <_ZN7TwoWire5writeEi>
    Wire.endTransmission(false);                    // Indicate we will send a restart signal (next line) to read in data
   d4202:	f002 f8ad 	bl	d6360 <_Z19__fetch_global_Wirev>
   d4206:	2100      	movs	r1, #0
   d4208:	f001 feaf 	bl	d5f6a <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(slaveAddress, 14, true);       // request 14 bytes of data
   d420c:	f002 f8a8 	bl	d6360 <_Z19__fetch_global_Wirev>
   d4210:	b2e9      	uxtb	r1, r5
   d4212:	220e      	movs	r2, #14
   d4214:	2301      	movs	r3, #1
   d4216:	f001 fe8f 	bl	d5f38 <_ZN7TwoWire11requestFromEhjh>

    // Read in MSB, bitshift by eight, switch positions with LSB, and store in temporary variable
    int xAccRaw = (int) Wire.read()<<8 | Wire.read();  
   d421a:	f002 f8a1 	bl	d6360 <_Z19__fetch_global_Wirev>
   d421e:	6803      	ldr	r3, [r0, #0]
   d4220:	695b      	ldr	r3, [r3, #20]
   d4222:	4798      	blx	r3
   d4224:	4680      	mov	r8, r0
   d4226:	f002 f89b 	bl	d6360 <_Z19__fetch_global_Wirev>
   d422a:	6803      	ldr	r3, [r0, #0]
   d422c:	695b      	ldr	r3, [r3, #20]
   d422e:	4798      	blx	r3
   d4230:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
    int yAccRaw = (int) Wire.read()<<8 | Wire.read();
   d4234:	f002 f894 	bl	d6360 <_Z19__fetch_global_Wirev>
   d4238:	6803      	ldr	r3, [r0, #0]
   d423a:	695b      	ldr	r3, [r3, #20]
   d423c:	4798      	blx	r3
   d423e:	4607      	mov	r7, r0
   d4240:	f002 f88e 	bl	d6360 <_Z19__fetch_global_Wirev>
   d4244:	6803      	ldr	r3, [r0, #0]
   d4246:	695b      	ldr	r3, [r3, #20]
   d4248:	4798      	blx	r3
   d424a:	ea40 2707 	orr.w	r7, r0, r7, lsl #8
    int zAccRaw = (int) Wire.read()<<8 | Wire.read();
   d424e:	f002 f887 	bl	d6360 <_Z19__fetch_global_Wirev>
   d4252:	6803      	ldr	r3, [r0, #0]
   d4254:	695b      	ldr	r3, [r3, #20]
   d4256:	4798      	blx	r3
   d4258:	4606      	mov	r6, r0
   d425a:	f002 f881 	bl	d6360 <_Z19__fetch_global_Wirev>
   d425e:	6803      	ldr	r3, [r0, #0]
   d4260:	695b      	ldr	r3, [r3, #20]
   d4262:	4798      	blx	r3
   d4264:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
   d4268:	f002 f87a 	bl	d6360 <_Z19__fetch_global_Wirev>
   d426c:	6803      	ldr	r3, [r0, #0]
   d426e:	695b      	ldr	r3, [r3, #20]
   d4270:	4798      	blx	r3
   d4272:	4605      	mov	r5, r0
   d4274:	f002 f874 	bl	d6360 <_Z19__fetch_global_Wirev>
   d4278:	6803      	ldr	r3, [r0, #0]
   d427a:	695b      	ldr	r3, [r3, #20]
   d427c:	4798      	blx	r3
   d427e:	ea40 2305 	orr.w	r3, r0, r5, lsl #8
   d4282:	ee08 3a10 	vmov	s16, r3
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d4286:	f002 f86b 	bl	d6360 <_Z19__fetch_global_Wirev>
   d428a:	6803      	ldr	r3, [r0, #0]
   d428c:	695b      	ldr	r3, [r3, #20]
   d428e:	4798      	blx	r3
   d4290:	4605      	mov	r5, r0
   d4292:	f002 f865 	bl	d6360 <_Z19__fetch_global_Wirev>
   d4296:	6803      	ldr	r3, [r0, #0]
   d4298:	695b      	ldr	r3, [r3, #20]
   d429a:	4798      	blx	r3
   d429c:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d42a0:	f002 f85e 	bl	d6360 <_Z19__fetch_global_Wirev>
   d42a4:	6803      	ldr	r3, [r0, #0]
   d42a6:	695b      	ldr	r3, [r3, #20]
   d42a8:	4798      	blx	r3
   d42aa:	4681      	mov	r9, r0
   d42ac:	f002 f858 	bl	d6360 <_Z19__fetch_global_Wirev>
   d42b0:	6803      	ldr	r3, [r0, #0]
   d42b2:	695b      	ldr	r3, [r3, #20]
   d42b4:	4798      	blx	r3
   d42b6:	ea40 2209 	orr.w	r2, r0, r9, lsl #8
   d42ba:	9201      	str	r2, [sp, #4]
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();
   d42bc:	f002 f850 	bl	d6360 <_Z19__fetch_global_Wirev>
   d42c0:	6803      	ldr	r3, [r0, #0]
   d42c2:	695b      	ldr	r3, [r3, #20]
   d42c4:	4798      	blx	r3
   d42c6:	4681      	mov	r9, r0
   d42c8:	f002 f84a 	bl	d6360 <_Z19__fetch_global_Wirev>
   d42cc:	6803      	ldr	r3, [r0, #0]
   d42ce:	695b      	ldr	r3, [r3, #20]
   d42d0:	4798      	blx	r3
   d42d2:	ea40 2909 	orr.w	r9, r0, r9, lsl #8

    result = Wire.endTransmission(true);
   d42d6:	f002 f843 	bl	d6360 <_Z19__fetch_global_Wirev>
   d42da:	2101      	movs	r1, #1
   d42dc:	f001 fe45 	bl	d5f6a <_ZN7TwoWire15endTransmissionEh>

    // Determine if raw value is intended to be read as positive or negative
    // Accelerometer
    if(xAccRaw < 32768){
   d42e0:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
        xAccRaw = -xAccRaw;
   d42e4:	bfb4      	ite	lt
   d42e6:	f1c8 0800 	rsblt	r8, r8, #0
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
   d42ea:	f5c8 3880 	rsbge	r8, r8, #65536	; 0x10000
        zGyrRaw = -(zGyrRaw - 65536);
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d42ee:	ee07 8a90 	vmov	s15, r8
   d42f2:	eddf 6a4c 	vldr	s13, [pc, #304]	; d4424 <_Z10sensorReadiPfRfS_+0x248>
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();

    result = Wire.endTransmission(true);
   d42f6:	4b4c      	ldr	r3, [pc, #304]	; (d4428 <_Z10sensorReadiPfRfS_+0x24c>)

    // Determine if raw value is intended to be read as positive or negative
    // Accelerometer
    if(xAccRaw < 32768){
   d42f8:	9a01      	ldr	r2, [sp, #4]
    int tempRaw = (int) Wire.read()<<8 | Wire.read();
    int xGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int yGyrRaw = (int) Wire.read()<<8 | Wire.read();
    int zGyrRaw = (int) Wire.read()<<8 | Wire.read();

    result = Wire.endTransmission(true);
   d42fa:	6018      	str	r0, [r3, #0]
        xAccRaw = -xAccRaw;
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
    }
    if(yAccRaw < 32768){
   d42fc:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
        zGyrRaw = -(zGyrRaw - 65536);
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d4300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    }
    else{
        xAccRaw = -(xAccRaw - 65536);
    }
    if(yAccRaw < 32768){
        yAccRaw = -yAccRaw;
   d4304:	bfb4      	ite	lt
   d4306:	427f      	neglt	r7, r7
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
   d4308:	f5c7 3780 	rsbge	r7, r7, #65536	; 0x10000
        zGyrRaw = -(zGyrRaw - 65536);
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d430c:	ee27 7a26 	vmul.f32	s14, s14, s13
        yAccRaw = -yAccRaw;
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
    }
    if(zAccRaw < 32768){
   d4310:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4314:	ee07 7a90 	vmov	s15, r7
    }
    else{
        yAccRaw = -(yAccRaw - 65536);
    }
    if(zAccRaw < 32768){
        zAccRaw = -zAccRaw;
   d4318:	bfb4      	ite	lt
   d431a:	4276      	neglt	r6, r6
    }
    else{
        zAccRaw = -(zAccRaw - 65536);
   d431c:	f5c6 3680 	rsbge	r6, r6, #65536	; 0x10000
        zGyrRaw = -(zGyrRaw - 65536);
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
   d4320:	ed84 7a00 	vstr	s14, [r4]
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4328:	ee07 6a90 	vmov	s15, r6
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d432c:	ee27 7a26 	vmul.f32	s14, s14, s13
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
   d4334:	ed84 7a01 	vstr	s14, [r4, #4]
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4338:	ee67 7aa6 	vmul.f32	s15, s15, s13
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d433c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; d442c <_Z10sensorReadiPfRfS_+0x250>
    xGyrRaw = -xGyrRaw;     // Needed to align accelerometer and gyroscope axes (x originally inverted)
    
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
   d4340:	edc4 7a02 	vstr	s15, [r4, #8]
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4344:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    else{
        zAccRaw = -(zAccRaw - 65536);
    }

    // Gyroscope
    if(xGyrRaw < 32768){
   d4348:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d434c:	eec8 7a07 	vdiv.f32	s15, s16, s14
        zAccRaw = -(zAccRaw - 65536);
    }

    // Gyroscope
    if(xGyrRaw < 32768){
        xGyrRaw = -xGyrRaw;
   d4350:	bfb4      	ite	lt
   d4352:	426d      	neglt	r5, r5
    }
    else{
        xGyrRaw = -(xGyrRaw - 65536);
   d4354:	f5c5 3580 	rsbge	r5, r5, #65536	; 0x10000
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d4358:	426d      	negs	r5, r5
        xGyrRaw = -xGyrRaw;
    }
    else{
        xGyrRaw = -(xGyrRaw - 65536);
    }
    if(yGyrRaw < 32768){
   d435a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        yGyrRaw = -yGyrRaw;
   d435e:	bfb4      	ite	lt
   d4360:	4252      	neglt	r2, r2
    }
    else{
        yGyrRaw = -(yGyrRaw - 65536);
   d4362:	f5c2 3280 	rsbge	r2, r2, #65536	; 0x10000
    }
    if(zGyrRaw < 32768){
   d4366:	f5b9 4f00 	cmp.w	r9, #32768	; 0x8000
        zGyrRaw = -zGyrRaw;
   d436a:	bfb4      	ite	lt
   d436c:	f1c9 0900 	rsblt	r9, r9, #0
    }
    else{
        zGyrRaw = -(zGyrRaw - 65536);
   d4370:	f5c9 3980 	rsbge	r9, r9, #65536	; 0x10000
   d4374:	9301      	str	r3, [sp, #4]
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4376:	ed9f 7a2e 	vldr	s14, [pc, #184]	; d4430 <_Z10sensorReadiPfRfS_+0x254>
   d437a:	ee77 7a87 	vadd.f32	s15, s15, s14
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d437e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; d4434 <_Z10sensorReadiPfRfS_+0x258>
    // Convert raw data into real-world value, cast as a float, and store in external variable
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
   d4382:	edcb 7a00 	vstr	s15, [fp]
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d4386:	ee07 5a90 	vmov	s15, r5
   d438a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d438e:	eec7 6a87 	vdiv.f32	s13, s15, s14
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d4392:	ee07 2a90 	vmov	s15, r2
   d4396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    accelData[0] = ((float) xAccRaw)/accelSensitivity2g;    
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
   d439a:	edca 6a00 	vstr	s13, [sl]
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d439e:	eec7 6a87 	vdiv.f32	s13, s15, s14
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;
   d43a2:	ee07 9a90 	vmov	s15, r9
   d43a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    accelData[1] = ((float) yAccRaw)/accelSensitivity2g;
    accelData[2] = ((float) zAccRaw)/accelSensitivity2g;
    temp = ((float) tempRaw)/tempSensitivityUntrimmed;
    temp = temp + tempOffset;
    gyroData[0] = ((float) xGyrRaw)/gyroSensitivity250;
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
   d43aa:	edca 6a01 	vstr	s13, [sl, #4]
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;
   d43ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d43b2:	edca 6a02 	vstr	s13, [sl, #8]

    // Calibrate Data
    accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
   d43b6:	edd4 7a01 	vldr	s15, [r4, #4]
   d43ba:	edd4 6a00 	vldr	s13, [r4]
   d43be:	ed94 7a02 	vldr	s14, [r4, #8]
   d43c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
   d43c6:	eee6 7aa6 	vfma.f32	s15, s13, s13
   d43ca:	eee7 7a07 	vfma.f32	s15, s14, s14
   d43ce:	ee17 0a90 	vmov	r0, s15
   d43d2:	f002 feab 	bl	d712c <__aeabi_f2d>
   d43d6:	ec41 0b10 	vmov	d0, r0, r1
   d43da:	f002 f955 	bl	d6688 <sqrt>
   d43de:	ec51 0b10 	vmov	r0, r1, d0
   d43e2:	f003 f9a7 	bl	d7734 <__aeabi_d2f>
   d43e6:	4a14      	ldr	r2, [pc, #80]	; (d4438 <_Z10sensorReadiPfRfS_+0x25c>)
   d43e8:	4914      	ldr	r1, [pc, #80]	; (d443c <_Z10sensorReadiPfRfS_+0x260>)
   d43ea:	6010      	str	r0, [r2, #0]
   d43ec:	9b01      	ldr	r3, [sp, #4]
   d43ee:	4a14      	ldr	r2, [pc, #80]	; (d4440 <_Z10sensorReadiPfRfS_+0x264>)
   d43f0:	f104 000c 	add.w	r0, r4, #12
    for( int i = 0; i < 3; i++){
        accelData[i] = accelData[i] + accelCalibration_1[i];  // Calibrate accelerometer data with offset
   d43f4:	ecb1 7a01 	vldmia	r1!, {s14}
   d43f8:	edd4 7a00 	vldr	s15, [r4]
   d43fc:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4400:	ece4 7a01 	vstmia	r4!, {s15}
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
   d4404:	ecb2 7a01 	vldmia	r2!, {s14}
   d4408:	edda 7a00 	vldr	s15, [sl]
   d440c:	ee77 7a87 	vadd.f32	s15, s15, s14
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;

    // Calibrate Data
    accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
    for( int i = 0; i < 3; i++){
   d4410:	42a0      	cmp	r0, r4
        accelData[i] = accelData[i] + accelCalibration_1[i];  // Calibrate accelerometer data with offset
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
   d4412:	ecea 7a01 	vstmia	sl!, {s15}
    gyroData[1] = ((float) yGyrRaw)/gyroSensitivity250;
    gyroData[2] = ((float) zGyrRaw)/gyroSensitivity250;

    // Calibrate Data
    accelMagnitude = sqrt(sq(accelData[0]) + sq(accelData[1]) + sq(accelData[2]));
    for( int i = 0; i < 3; i++){
   d4416:	d1ed      	bne.n	d43f4 <_Z10sensorReadiPfRfS_+0x218>
        accelData[i] = accelData[i] + accelCalibration_1[i];  // Calibrate accelerometer data with offset
        gyroData[i] = gyroData[i] + gyroCalibration_1[i];     // Calibrate gyroscope data with offset
    }
    return result;
}
   d4418:	6818      	ldr	r0, [r3, #0]
   d441a:	b003      	add	sp, #12
   d441c:	ecbd 8b02 	vpop	{d8}
   d4420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4424:	38800000 	.word	0x38800000
   d4428:	2003e338 	.word	0x2003e338
   d442c:	43aa0000 	.word	0x43aa0000
   d4430:	42121eb8 	.word	0x42121eb8
   d4434:	43030000 	.word	0x43030000
   d4438:	2003e228 	.word	0x2003e228
   d443c:	000d78d0 	.word	0x000d78d0
   d4440:	000d78c4 	.word	0x000d78c4
   d4444:	00000000 	.word	0x00000000

000d4448 <_Z10filterDataPfPA20_fS_S1_RiS2_S_>:

/*========== Filter accelerometer data using gyroscope data ==========*/
// When passing 2D arrays to a function, reference: https://www.tutorialspoint.com/Passing-two-dimensional-array-to-a-Cplusplus-function
void  filterData(float *accData, float accelBuffer[][accNum], float *gyrData, float gyroBuffer[][accNum], int &y, int &startup, float *angles){
   d4448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d444c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d444e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   d4450:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   d4452:	4690      	mov	r8, r2
   d4454:	2500      	movs	r5, #0
    // Store new sensor values in buffers
    for(int i = 0; i < 3; i++){
            accelBuffer[i][y] = accData[i];   // Store newest accelData values in first line of buffer
   d4456:	6822      	ldr	r2, [r4, #0]
   d4458:	f850 cb04 	ldr.w	ip, [r0], #4
   d445c:	eb01 0e05 	add.w	lr, r1, r5
   d4460:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
   d4464:	f8ce c000 	str.w	ip, [lr]
            gyroBuffer[i][y] = gyrData[i];     // Store newest gyroData values in first line of buffer
   d4468:	6822      	ldr	r2, [r4, #0]
   d446a:	f858 cb04 	ldr.w	ip, [r8], #4
   d446e:	eb03 0e05 	add.w	lr, r3, r5
   d4472:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
   d4476:	3550      	adds	r5, #80	; 0x50

/*========== Filter accelerometer data using gyroscope data ==========*/
// When passing 2D arrays to a function, reference: https://www.tutorialspoint.com/Passing-two-dimensional-array-to-a-Cplusplus-function
void  filterData(float *accData, float accelBuffer[][accNum], float *gyrData, float gyroBuffer[][accNum], int &y, int &startup, float *angles){
    // Store new sensor values in buffers
    for(int i = 0; i < 3; i++){
   d4478:	2df0      	cmp	r5, #240	; 0xf0
            accelBuffer[i][y] = accData[i];   // Store newest accelData values in first line of buffer
            gyroBuffer[i][y] = gyrData[i];     // Store newest gyroData values in first line of buffer
   d447a:	f8ce c000 	str.w	ip, [lr]

/*========== Filter accelerometer data using gyroscope data ==========*/
// When passing 2D arrays to a function, reference: https://www.tutorialspoint.com/Passing-two-dimensional-array-to-a-Cplusplus-function
void  filterData(float *accData, float accelBuffer[][accNum], float *gyrData, float gyroBuffer[][accNum], int &y, int &startup, float *angles){
    // Store new sensor values in buffers
    for(int i = 0; i < 3; i++){
   d447e:	d1ea      	bne.n	d4456 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0xe>
            accelBuffer[i][y] = accData[i];   // Store newest accelData values in first line of buffer
            gyroBuffer[i][y] = gyrData[i];     // Store newest gyroData values in first line of buffer
        }
   
    // If this is the first time running the filter, there is no old data, so our best estimate is based on our current data
    if(startup == 0){
   d4480:	683a      	ldr	r2, [r7, #0]
   d4482:	4d53      	ldr	r5, [pc, #332]	; (d45d0 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x188>)
   d4484:	2a00      	cmp	r2, #0
   d4486:	f000 8084 	beq.w	d4592 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x14a>
   d448a:	4f52      	ldr	r7, [pc, #328]	; (d45d4 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x18c>)
   d448c:	4852      	ldr	r0, [pc, #328]	; (d45d8 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x190>)
   d448e:	f8df 9150 	ldr.w	r9, [pc, #336]	; d45e0 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x198>
   d4492:	f8df 8150 	ldr.w	r8, [pc, #336]	; d45e4 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x19c>
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
            // Reset sum buffers
            sumAccel[i] = 0;    
   d4496:	eddf 5a51 	vldr	s11, [pc, #324]	; d45dc <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x194>
   d449a:	46ac      	mov	ip, r5
            accelBuffer[i][y] = accData[i];   // Store newest accelData values in first line of buffer
            gyroBuffer[i][y] = gyrData[i];     // Store newest gyroData values in first line of buffer
        }
   
    // If this is the first time running the filter, there is no old data, so our best estimate is based on our current data
    if(startup == 0){
   d449c:	2200      	movs	r2, #0
            sumAccel[i] += accelBuffer[i][x];
            sumGyro[i] += gyroBuffer[i][x];
            }

            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) accNum);
   d449e:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
   d44a2:	eb01 0e02 	add.w	lr, r1, r2
   d44a6:	eb03 0a02 	add.w	sl, r3, r2
   d44aa:	3250      	adds	r2, #80	; 0x50
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
            // Reset sum buffers
            sumAccel[i] = 0;    
   d44ac:	ece7 5a01 	vstmia	r7!, {s11}
            sumGyro[i] = 0;
   d44b0:	ece0 5a01 	vstmia	r0!, {s11}
   d44b4:	eb01 0b02 	add.w	fp, r1, r2

            // Sum all values in each column
            for(int x = 0; x < accNum; x++){
            sumAccel[i] += accelBuffer[i][x];
   d44b8:	ecfe 7a01 	vldmia	lr!, {s15}
   d44bc:	ed17 7a01 	vldr	s14, [r7, #-4]
            sumGyro[i] += gyroBuffer[i][x];
   d44c0:	ed50 6a01 	vldr	s13, [r0, #-4]
            sumAccel[i] = 0;    
            sumGyro[i] = 0;

            // Sum all values in each column
            for(int x = 0; x < accNum; x++){
            sumAccel[i] += accelBuffer[i][x];
   d44c4:	ee37 7a87 	vadd.f32	s14, s15, s14
            // Reset sum buffers
            sumAccel[i] = 0;    
            sumGyro[i] = 0;

            // Sum all values in each column
            for(int x = 0; x < accNum; x++){
   d44c8:	45de      	cmp	lr, fp
            sumAccel[i] += accelBuffer[i][x];
   d44ca:	ed07 7a01 	vstr	s14, [r7, #-4]
            sumGyro[i] += gyroBuffer[i][x];
   d44ce:	ecfa 7a01 	vldmia	sl!, {s15}
   d44d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d44d6:	ed40 7a01 	vstr	s15, [r0, #-4]
            // Reset sum buffers
            sumAccel[i] = 0;    
            sumGyro[i] = 0;

            // Sum all values in each column
            for(int x = 0; x < accNum; x++){
   d44da:	d1ed      	bne.n	d44b8 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x70>
            sumAccel[i] += accelBuffer[i][x];
            sumGyro[i] += gyroBuffer[i][x];
            }

            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) accNum);
   d44dc:	eec7 6a06 	vdiv.f32	s13, s14, s12
        startup = 1;    // Set to 1 so this section is not repeated
    }
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
   d44e0:	2af0      	cmp	r2, #240	; 0xf0
            sumGyro[i] += gyroBuffer[i][x];
            }

            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) accNum);
            avgGyro[i] = sumGyro[i]/((float) accNum);
   d44e2:	ee87 7a86 	vdiv.f32	s14, s15, s12
            sumAccel[i] += accelBuffer[i][x];
            sumGyro[i] += gyroBuffer[i][x];
            }

            // Now take the average
            avgAccel[i] = sumAccel[i]/((float) accNum);
   d44e6:	ece9 6a01 	vstmia	r9!, {s13}
            avgGyro[i] = sumGyro[i]/((float) accNum);
   d44ea:	eca8 7a01 	vstmia	r8!, {s14}

            // Take a weighted average of accelerometer and gyroscope values to account for drift and random variances
            //estimates[i] = (avgAccel[i]*0.98) + (avgGyro[i]*(timestep/1000))*0.02; 
            estimates[i] = avgAccel[i];
   d44ee:	ecec 6a01 	vstmia	ip!, {s13}
        startup = 1;    // Set to 1 so this section is not repeated
    }
    else{
        // Take the average of each row element in accelBuffer and gyroBuffer
        // Work through x, y, z elements
        for(int i = 0; i < 3; i++){
   d44f2:	d1d6      	bne.n	d44a2 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x5a>
            //estimates[i] = (avgAccel[i]*0.98) + (avgGyro[i]*(timestep/1000))*0.02; 
            estimates[i] = avgAccel[i];
        }

        // Calculate angles based on estimate
        angles[0] = atan2(estimates[1], estimates[2]) * (180/3.14);     // Angle about x-axis
   d44f4:	68a8      	ldr	r0, [r5, #8]
   d44f6:	f002 fe19 	bl	d712c <__aeabi_f2d>
   d44fa:	e9cd 0100 	strd	r0, r1, [sp]
   d44fe:	6868      	ldr	r0, [r5, #4]
   d4500:	f002 fe14 	bl	d712c <__aeabi_f2d>
   d4504:	ed9d 1b00 	vldr	d1, [sp]
   d4508:	ec41 0b10 	vmov	d0, r0, r1
   d450c:	f002 f8ba 	bl	d6684 <atan2>
   d4510:	a32d      	add	r3, pc, #180	; (adr r3, d45c8 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x180>)
   d4512:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4516:	ec51 0b10 	vmov	r0, r1, d0
   d451a:	f002 fe5b 	bl	d71d4 <__aeabi_dmul>
   d451e:	f003 f909 	bl	d7734 <__aeabi_d2f>
   d4522:	6030      	str	r0, [r6, #0]
        angles[1] = atan2(estimates[0], estimates[2]) * (180/3.14);     // Angle about y-axis
   d4524:	68a8      	ldr	r0, [r5, #8]
   d4526:	f002 fe01 	bl	d712c <__aeabi_f2d>
   d452a:	e9cd 0100 	strd	r0, r1, [sp]
   d452e:	6828      	ldr	r0, [r5, #0]
   d4530:	f002 fdfc 	bl	d712c <__aeabi_f2d>
   d4534:	ed9d 1b00 	vldr	d1, [sp]
   d4538:	ec41 0b10 	vmov	d0, r0, r1
   d453c:	f002 f8a2 	bl	d6684 <atan2>
   d4540:	a321      	add	r3, pc, #132	; (adr r3, d45c8 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x180>)
   d4542:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4546:	ec51 0b10 	vmov	r0, r1, d0
   d454a:	f002 fe43 	bl	d71d4 <__aeabi_dmul>
   d454e:	f003 f8f1 	bl	d7734 <__aeabi_d2f>
   d4552:	6070      	str	r0, [r6, #4]
        angles[2] = atan2(estimates[1], estimates[0]) * (180/3.14);     // Angle about z-axis
   d4554:	6828      	ldr	r0, [r5, #0]
   d4556:	f002 fde9 	bl	d712c <__aeabi_f2d>
   d455a:	e9cd 0100 	strd	r0, r1, [sp]
   d455e:	6868      	ldr	r0, [r5, #4]
   d4560:	f002 fde4 	bl	d712c <__aeabi_f2d>
   d4564:	ed9d 1b00 	vldr	d1, [sp]
   d4568:	ec41 0b10 	vmov	d0, r0, r1
   d456c:	f002 f88a 	bl	d6684 <atan2>
   d4570:	a315      	add	r3, pc, #84	; (adr r3, d45c8 <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x180>)
   d4572:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4576:	ec51 0b10 	vmov	r0, r1, d0
   d457a:	f002 fe2b 	bl	d71d4 <__aeabi_dmul>
   d457e:	f003 f8d9 	bl	d7734 <__aeabi_d2f>
   d4582:	60b0      	str	r0, [r6, #8]

        y++;    // Increment row in accelBuffer and gyroBuffer to prepare for next iteration
   d4584:	6823      	ldr	r3, [r4, #0]
   d4586:	3301      	adds	r3, #1
        
        // If we reach the end of the buffers, reset to 0
        if(y >= accNum){
   d4588:	2b13      	cmp	r3, #19
            y = 0;
   d458a:	bfc8      	it	gt
   d458c:	2300      	movgt	r3, #0
   d458e:	6023      	str	r3, [r4, #0]
   d4590:	e014      	b.n	d45bc <_Z10filterDataPfPA20_fS_S1_RiS2_S_+0x174>
   
    // If this is the first time running the filter, there is no old data, so our best estimate is based on our current data
    if(startup == 0){
        // Store new accelBuffer values in estimate
        for(int i = 0; i < 3; i++){
            estimates[i] = accelBuffer[i][y];  // Use current accelerometer data to get current estimate
   d4592:	6823      	ldr	r3, [r4, #0]
   d4594:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	602b      	str	r3, [r5, #0]
   d459c:	6823      	ldr	r3, [r4, #0]
   d459e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d45a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d45a4:	606b      	str	r3, [r5, #4]
   d45a6:	6823      	ldr	r3, [r4, #0]
   d45a8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   d45ac:	f8d1 30a0 	ldr.w	r3, [r1, #160]	; 0xa0
   d45b0:	60ab      	str	r3, [r5, #8]
        }
        y++;            // Increment row in buffers
   d45b2:	6823      	ldr	r3, [r4, #0]
   d45b4:	3301      	adds	r3, #1
   d45b6:	6023      	str	r3, [r4, #0]
        startup = 1;    // Set to 1 so this section is not repeated
   d45b8:	2301      	movs	r3, #1
   d45ba:	603b      	str	r3, [r7, #0]
        // If we reach the end of the buffers, reset to 0
        if(y >= accNum){
            y = 0;
        }
    }
}
   d45bc:	b003      	add	sp, #12
   d45be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d45c2:	bf00      	nop
   d45c4:	f3af 8000 	nop.w
   d45c8:	61d59ae7 	.word	0x61d59ae7
   d45cc:	404ca994 	.word	0x404ca994
   d45d0:	2003e094 	.word	0x2003e094
   d45d4:	2003e39c 	.word	0x2003e39c
   d45d8:	2003e32c 	.word	0x2003e32c
   d45dc:	00000000 	.word	0x00000000
   d45e0:	2003e100 	.word	0x2003e100
   d45e4:	2003deec 	.word	0x2003deec

000d45e8 <_Z15strainGaugeReadiPiRiS0_>:

/*========== Read in and average values from strain gauges ==========*/
void strainGaugeRead(int sgPin, int *sgBuff, int &sgX, int &sgVal){
   d45e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sgBuff[sgX] = analogRead(sgPin);    // Place new reading at current index in buffer for averaging
   d45ea:	b280      	uxth	r0, r0
        }
    }
}

/*========== Read in and average values from strain gauges ==========*/
void strainGaugeRead(int sgPin, int *sgBuff, int &sgX, int &sgVal){
   d45ec:	460c      	mov	r4, r1
    sgBuff[sgX] = analogRead(sgPin);    // Place new reading at current index in buffer for averaging
   d45ee:	6817      	ldr	r7, [r2, #0]
        }
    }
}

/*========== Read in and average values from strain gauges ==========*/
void strainGaugeRead(int sgPin, int *sgBuff, int &sgX, int &sgVal){
   d45f0:	4615      	mov	r5, r2
   d45f2:	461e      	mov	r6, r3
    sgBuff[sgX] = analogRead(sgPin);    // Place new reading at current index in buffer for averaging
   d45f4:	f001 fe82 	bl	d62fc <analogRead>
   d45f8:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
    sumSG = 0;                            // Reset sum value
   d45fc:	480b      	ldr	r0, [pc, #44]	; (d462c <_Z15strainGaugeReadiPiRiS0_+0x44>)
   d45fe:	2300      	movs	r3, #0
   d4600:	1f22      	subs	r2, r4, #4
   d4602:	6003      	str	r3, [r0, #0]
   d4604:	344c      	adds	r4, #76	; 0x4c
    // For the entire buffer, iterate through and sum all values
    for(int i = 0; i < sgNum; i++){
        sumSG = sumSG + sgBuff[i];
   d4606:	f852 1f04 	ldr.w	r1, [r2, #4]!
   d460a:	6803      	ldr	r3, [r0, #0]
/*========== Read in and average values from strain gauges ==========*/
void strainGaugeRead(int sgPin, int *sgBuff, int &sgX, int &sgVal){
    sgBuff[sgX] = analogRead(sgPin);    // Place new reading at current index in buffer for averaging
    sumSG = 0;                            // Reset sum value
    // For the entire buffer, iterate through and sum all values
    for(int i = 0; i < sgNum; i++){
   d460c:	42a2      	cmp	r2, r4
        sumSG = sumSG + sgBuff[i];
   d460e:	440b      	add	r3, r1
   d4610:	6003      	str	r3, [r0, #0]
/*========== Read in and average values from strain gauges ==========*/
void strainGaugeRead(int sgPin, int *sgBuff, int &sgX, int &sgVal){
    sgBuff[sgX] = analogRead(sgPin);    // Place new reading at current index in buffer for averaging
    sumSG = 0;                            // Reset sum value
    // For the entire buffer, iterate through and sum all values
    for(int i = 0; i < sgNum; i++){
   d4612:	d1f8      	bne.n	d4606 <_Z15strainGaugeReadiPiRiS0_+0x1e>
        sumSG = sumSG + sgBuff[i];
    }
    sgX = sgX + 1;      // Increment index in buffer for next value saving
   d4614:	6829      	ldr	r1, [r5, #0]
   d4616:	3101      	adds	r1, #1
    // If we reach the end of the buffer, reset the value to the beginning
    if(sgX >= sgNum){
        sgX = 0;
   d4618:	2914      	cmp	r1, #20
   d461a:	bfa8      	it	ge
   d461c:	2100      	movge	r1, #0
   d461e:	6029      	str	r1, [r5, #0]
    }
    sgVal = sumSG/sgNum;  // Divide sum by number of values in buffer to calculate average
   d4620:	6802      	ldr	r2, [r0, #0]
   d4622:	2314      	movs	r3, #20
   d4624:	fb92 f2f3 	sdiv	r2, r2, r3
   d4628:	6032      	str	r2, [r6, #0]
   d462a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d462c:	2003ddb4 	.word	0x2003ddb4

000d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4630:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4632:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4634:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4636:	b17c      	cbz	r4, d4658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4638:	6863      	ldr	r3, [r4, #4]
   d463a:	3b01      	subs	r3, #1
   d463c:	6063      	str	r3, [r4, #4]
   d463e:	b95b      	cbnz	r3, d4658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4640:	6823      	ldr	r3, [r4, #0]
   d4642:	4620      	mov	r0, r4
   d4644:	689b      	ldr	r3, [r3, #8]
   d4646:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4648:	68a3      	ldr	r3, [r4, #8]
   d464a:	3b01      	subs	r3, #1
   d464c:	60a3      	str	r3, [r4, #8]
   d464e:	b91b      	cbnz	r3, d4658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4650:	6823      	ldr	r3, [r4, #0]
   d4652:	4620      	mov	r0, r4
   d4654:	68db      	ldr	r3, [r3, #12]
   d4656:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4658:	4628      	mov	r0, r5
   d465a:	bd38      	pop	{r3, r4, r5, pc}

000d465c <loop>:
  Particle.variable("angle1Y", angle1Y);
  Particle.variable("angle1Z", angle1Z);
}

/*========== Main Loop ===========*/
void loop(){
   d465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4660:	2414      	movs	r4, #20
   d4662:	b087      	sub	sp, #28
  // Get 20 readings at a time; average and filter data
  for(int i = 0; i < 20; i++){
    // Analog read and conversion
    strainGaugeRead(sgPinLi1, sgBuffLi1, sgXLi1, sgValLi1);
   d4664:	f8df b310 	ldr.w	fp, [pc, #784]	; d4978 <loop+0x31c>
    strainGaugeRead(sgPinLi2, sgBuffLi2, sgXLi2, sgValLi2);
   d4668:	f8df a310 	ldr.w	sl, [pc, #784]	; d497c <loop+0x320>
/*========== Main Loop ===========*/
void loop(){
  // Get 20 readings at a time; average and filter data
  for(int i = 0; i < 20; i++){
    // Analog read and conversion
    strainGaugeRead(sgPinLi1, sgBuffLi1, sgXLi1, sgValLi1);
   d466c:	4a8f      	ldr	r2, [pc, #572]	; (d48ac <loop+0x250>)
   d466e:	4990      	ldr	r1, [pc, #576]	; (d48b0 <loop+0x254>)
    strainGaugeRead(sgPinLi2, sgBuffLi2, sgXLi2, sgValLi2);
    strainGaugeRead(sgPinLo1, sgBuffLo1, sgXLo1, sgValLo1);
   d4670:	f8df 930c 	ldr.w	r9, [pc, #780]	; d4980 <loop+0x324>
    strainGaugeRead(sgPinRi1, sgBuffRi1, sgXRi1, sgValRi1);
   d4674:	f8df 830c 	ldr.w	r8, [pc, #780]	; d4984 <loop+0x328>
    strainGaugeRead(sgPinRi2, sgBuffRi2, sgXRi2, sgValRi2);
   d4678:	4f8e      	ldr	r7, [pc, #568]	; (d48b4 <loop+0x258>)
    strainGaugeRead(sgPinRo1, sgBuffRo1, sgXRo1, sgValRo1);  
   d467a:	4d8f      	ldr	r5, [pc, #572]	; (d48b8 <loop+0x25c>)
    
    // Read in data from MPU-6050's
    result = sensorRead(MPU_SLAVE_ADDR_1, accelData1, temp_C1, gyroData1);
   d467c:	4e8f      	ldr	r6, [pc, #572]	; (d48bc <loop+0x260>)
/*========== Main Loop ===========*/
void loop(){
  // Get 20 readings at a time; average and filter data
  for(int i = 0; i < 20; i++){
    // Analog read and conversion
    strainGaugeRead(sgPinLi1, sgBuffLi1, sgXLi1, sgValLi1);
   d467e:	465b      	mov	r3, fp
   d4680:	200f      	movs	r0, #15
   d4682:	f7ff ffb1 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    strainGaugeRead(sgPinLi2, sgBuffLi2, sgXLi2, sgValLi2);
   d4686:	4653      	mov	r3, sl
   d4688:	4a8d      	ldr	r2, [pc, #564]	; (d48c0 <loop+0x264>)
   d468a:	498e      	ldr	r1, [pc, #568]	; (d48c4 <loop+0x268>)
   d468c:	200e      	movs	r0, #14
   d468e:	f7ff ffab 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    strainGaugeRead(sgPinLo1, sgBuffLo1, sgXLo1, sgValLo1);
   d4692:	464b      	mov	r3, r9
   d4694:	4a8c      	ldr	r2, [pc, #560]	; (d48c8 <loop+0x26c>)
   d4696:	498d      	ldr	r1, [pc, #564]	; (d48cc <loop+0x270>)
   d4698:	2010      	movs	r0, #16
   d469a:	f7ff ffa5 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    strainGaugeRead(sgPinRi1, sgBuffRi1, sgXRi1, sgValRi1);
   d469e:	4643      	mov	r3, r8
   d46a0:	4a8b      	ldr	r2, [pc, #556]	; (d48d0 <loop+0x274>)
   d46a2:	498c      	ldr	r1, [pc, #560]	; (d48d4 <loop+0x278>)
   d46a4:	2013      	movs	r0, #19
   d46a6:	f7ff ff9f 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    strainGaugeRead(sgPinRi2, sgBuffRi2, sgXRi2, sgValRi2);
   d46aa:	463b      	mov	r3, r7
   d46ac:	4a8a      	ldr	r2, [pc, #552]	; (d48d8 <loop+0x27c>)
   d46ae:	498b      	ldr	r1, [pc, #556]	; (d48dc <loop+0x280>)
   d46b0:	2012      	movs	r0, #18
   d46b2:	f7ff ff99 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    strainGaugeRead(sgPinRo1, sgBuffRo1, sgXRo1, sgValRo1);  
   d46b6:	462b      	mov	r3, r5
   d46b8:	4a89      	ldr	r2, [pc, #548]	; (d48e0 <loop+0x284>)
   d46ba:	498a      	ldr	r1, [pc, #552]	; (d48e4 <loop+0x288>)
   d46bc:	2011      	movs	r0, #17
   d46be:	f7ff ff93 	bl	d45e8 <_Z15strainGaugeReadiPiRiS0_>
    
    // Read in data from MPU-6050's
    result = sensorRead(MPU_SLAVE_ADDR_1, accelData1, temp_C1, gyroData1);
   d46c2:	4b89      	ldr	r3, [pc, #548]	; (d48e8 <loop+0x28c>)
   d46c4:	4a89      	ldr	r2, [pc, #548]	; (d48ec <loop+0x290>)
   d46c6:	498a      	ldr	r1, [pc, #552]	; (d48f0 <loop+0x294>)
   d46c8:	2068      	movs	r0, #104	; 0x68
   d46ca:	f7ff fd87 	bl	d41dc <_Z10sensorReadiPfRfS_>
    result = sensorRead(MPU_SLAVE_ADDR_2, accelData2, temp_C2, gyroData2);
   d46ce:	4b89      	ldr	r3, [pc, #548]	; (d48f4 <loop+0x298>)
    strainGaugeRead(sgPinRi1, sgBuffRi1, sgXRi1, sgValRi1);
    strainGaugeRead(sgPinRi2, sgBuffRi2, sgXRi2, sgValRi2);
    strainGaugeRead(sgPinRo1, sgBuffRo1, sgXRo1, sgValRo1);  
    
    // Read in data from MPU-6050's
    result = sensorRead(MPU_SLAVE_ADDR_1, accelData1, temp_C1, gyroData1);
   d46d0:	6030      	str	r0, [r6, #0]
    result = sensorRead(MPU_SLAVE_ADDR_2, accelData2, temp_C2, gyroData2);
   d46d2:	4a89      	ldr	r2, [pc, #548]	; (d48f8 <loop+0x29c>)
   d46d4:	4989      	ldr	r1, [pc, #548]	; (d48fc <loop+0x2a0>)
   d46d6:	2069      	movs	r0, #105	; 0x69
   d46d8:	f7ff fd80 	bl	d41dc <_Z10sensorReadiPfRfS_>

    // Filter data and determine global angular orientation
    filterData(accelData1, accelBuffer1, gyroData1, gyroBuffer2, x1, startup1, angles1); 
   d46dc:	4b88      	ldr	r3, [pc, #544]	; (d4900 <loop+0x2a4>)
    strainGaugeRead(sgPinRi2, sgBuffRi2, sgXRi2, sgValRi2);
    strainGaugeRead(sgPinRo1, sgBuffRo1, sgXRo1, sgValRo1);  
    
    // Read in data from MPU-6050's
    result = sensorRead(MPU_SLAVE_ADDR_1, accelData1, temp_C1, gyroData1);
    result = sensorRead(MPU_SLAVE_ADDR_2, accelData2, temp_C2, gyroData2);
   d46de:	6030      	str	r0, [r6, #0]

    // Filter data and determine global angular orientation
    filterData(accelData1, accelBuffer1, gyroData1, gyroBuffer2, x1, startup1, angles1); 
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	4e88      	ldr	r6, [pc, #544]	; (d4904 <loop+0x2a8>)
   d46e4:	4b88      	ldr	r3, [pc, #544]	; (d4908 <loop+0x2ac>)
   d46e6:	9300      	str	r3, [sp, #0]
   d46e8:	4a7f      	ldr	r2, [pc, #508]	; (d48e8 <loop+0x28c>)
   d46ea:	4b88      	ldr	r3, [pc, #544]	; (d490c <loop+0x2b0>)
   d46ec:	4988      	ldr	r1, [pc, #544]	; (d4910 <loop+0x2b4>)
   d46ee:	4880      	ldr	r0, [pc, #512]	; (d48f0 <loop+0x294>)
   d46f0:	9602      	str	r6, [sp, #8]
   d46f2:	f7ff fea9 	bl	d4448 <_Z10filterDataPfPA20_fS_S1_RiS2_S_>
    filterData(accelData2, accelBuffer2, gyroData2, gyroBuffer2, x2, startup2, angles2);
   d46f6:	4b87      	ldr	r3, [pc, #540]	; (d4914 <loop+0x2b8>)
   d46f8:	9302      	str	r3, [sp, #8]
   d46fa:	4b87      	ldr	r3, [pc, #540]	; (d4918 <loop+0x2bc>)
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	4b87      	ldr	r3, [pc, #540]	; (d491c <loop+0x2c0>)
   d4700:	9300      	str	r3, [sp, #0]
   d4702:	4a7c      	ldr	r2, [pc, #496]	; (d48f4 <loop+0x298>)
   d4704:	4b81      	ldr	r3, [pc, #516]	; (d490c <loop+0x2b0>)
   d4706:	4986      	ldr	r1, [pc, #536]	; (d4920 <loop+0x2c4>)
   d4708:	487c      	ldr	r0, [pc, #496]	; (d48fc <loop+0x2a0>)
   d470a:	f7ff fe9d 	bl	d4448 <_Z10filterDataPfPA20_fS_S1_RiS2_S_>
}

/*========== Main Loop ===========*/
void loop(){
  // Get 20 readings at a time; average and filter data
  for(int i = 0; i < 20; i++){
   d470e:	3c01      	subs	r4, #1
   d4710:	d1a8      	bne.n	d4664 <loop+0x8>
    filterData(accelData2, accelBuffer2, gyroData2, gyroBuffer2, x2, startup2, angles2);
  }

  // Particle Event Publishing
  // Update strain gauge variables
  sprintf(sgLi1, "%d", sgValLi1);
   d4712:	f8db 2000 	ldr.w	r2, [fp]
   d4716:	4983      	ldr	r1, [pc, #524]	; (d4924 <loop+0x2c8>)
   d4718:	4883      	ldr	r0, [pc, #524]	; (d4928 <loop+0x2cc>)
   d471a:	f000 fcf3 	bl	d5104 <sprintf>
  sprintf(sgLi2, "%d", sgValLi2);
   d471e:	f8da 2000 	ldr.w	r2, [sl]
   d4722:	4980      	ldr	r1, [pc, #512]	; (d4924 <loop+0x2c8>)
   d4724:	4881      	ldr	r0, [pc, #516]	; (d492c <loop+0x2d0>)
   d4726:	f000 fced 	bl	d5104 <sprintf>
  sprintf(sgLo1, "%d", sgValLo1);
   d472a:	f8d9 2000 	ldr.w	r2, [r9]
   d472e:	497d      	ldr	r1, [pc, #500]	; (d4924 <loop+0x2c8>)
   d4730:	487f      	ldr	r0, [pc, #508]	; (d4930 <loop+0x2d4>)
   d4732:	f000 fce7 	bl	d5104 <sprintf>
  sprintf(sgRi1, "%d", sgValRi1);
   d4736:	f8d8 2000 	ldr.w	r2, [r8]
   d473a:	497a      	ldr	r1, [pc, #488]	; (d4924 <loop+0x2c8>)
   d473c:	487d      	ldr	r0, [pc, #500]	; (d4934 <loop+0x2d8>)
   d473e:	f000 fce1 	bl	d5104 <sprintf>
  sprintf(sgRi2, "%d", sgValRi2);
   d4742:	683a      	ldr	r2, [r7, #0]
   d4744:	4977      	ldr	r1, [pc, #476]	; (d4924 <loop+0x2c8>)
   d4746:	487c      	ldr	r0, [pc, #496]	; (d4938 <loop+0x2dc>)
   d4748:	f000 fcdc 	bl	d5104 <sprintf>
  sprintf(sgRo1, "%d", sgValRo1);
   d474c:	682a      	ldr	r2, [r5, #0]
   d474e:	4d7b      	ldr	r5, [pc, #492]	; (d493c <loop+0x2e0>)
   d4750:	4974      	ldr	r1, [pc, #464]	; (d4924 <loop+0x2c8>)
   d4752:	487b      	ldr	r0, [pc, #492]	; (d4940 <loop+0x2e4>)
   d4754:	f000 fcd6 	bl	d5104 <sprintf>
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4758:	782b      	ldrb	r3, [r5, #0]

  Particle.publish("sgLi1", sgLi1, PRIVATE);
   d475a:	4a73      	ldr	r2, [pc, #460]	; (d4928 <loop+0x2cc>)
   d475c:	4979      	ldr	r1, [pc, #484]	; (d4944 <loop+0x2e8>)
   d475e:	f88d 4000 	strb.w	r4, [sp]
   d4762:	a804      	add	r0, sp, #16
   d4764:	f7ff fcbb 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4768:	a805      	add	r0, sp, #20
   d476a:	f7ff ff61 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(15000);
   d476e:	f643 2098 	movw	r0, #15000	; 0x3a98
   d4772:	f000 fe29 	bl	d53c8 <delay>
   d4776:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgLi2", sgLi2, PRIVATE);
   d4778:	4a6c      	ldr	r2, [pc, #432]	; (d492c <loop+0x2d0>)
   d477a:	4973      	ldr	r1, [pc, #460]	; (d4948 <loop+0x2ec>)
   d477c:	f88d 4000 	strb.w	r4, [sp]
   d4780:	a804      	add	r0, sp, #16
   d4782:	f7ff fcac 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4786:	a805      	add	r0, sp, #20
   d4788:	f7ff ff52 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(15000);
   d478c:	f643 2098 	movw	r0, #15000	; 0x3a98
   d4790:	f000 fe1a 	bl	d53c8 <delay>
   d4794:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgLo1", sgLo1, PRIVATE);
   d4796:	4a66      	ldr	r2, [pc, #408]	; (d4930 <loop+0x2d4>)
   d4798:	496c      	ldr	r1, [pc, #432]	; (d494c <loop+0x2f0>)
   d479a:	f88d 4000 	strb.w	r4, [sp]
   d479e:	a804      	add	r0, sp, #16
   d47a0:	f7ff fc9d 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d47a4:	a805      	add	r0, sp, #20
   d47a6:	f7ff ff43 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(15000);
   d47aa:	f643 2098 	movw	r0, #15000	; 0x3a98
   d47ae:	f000 fe0b 	bl	d53c8 <delay>
   d47b2:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgRi1", sgRi1, PRIVATE);
   d47b4:	4a5f      	ldr	r2, [pc, #380]	; (d4934 <loop+0x2d8>)
   d47b6:	4966      	ldr	r1, [pc, #408]	; (d4950 <loop+0x2f4>)
   d47b8:	f88d 4000 	strb.w	r4, [sp]
   d47bc:	a804      	add	r0, sp, #16
   d47be:	f7ff fc8e 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d47c2:	a805      	add	r0, sp, #20
   d47c4:	f7ff ff34 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(15000);
   d47c8:	f643 2098 	movw	r0, #15000	; 0x3a98
   d47cc:	f000 fdfc 	bl	d53c8 <delay>
   d47d0:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgRi2", sgRi2, PRIVATE);
   d47d2:	4a59      	ldr	r2, [pc, #356]	; (d4938 <loop+0x2dc>)
   d47d4:	495f      	ldr	r1, [pc, #380]	; (d4954 <loop+0x2f8>)
   d47d6:	f88d 4000 	strb.w	r4, [sp]
   d47da:	a804      	add	r0, sp, #16
   d47dc:	f7ff fc7f 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d47e0:	a805      	add	r0, sp, #20
   d47e2:	f7ff ff25 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(15000);
   d47e6:	f643 2098 	movw	r0, #15000	; 0x3a98
   d47ea:	f000 fded 	bl	d53c8 <delay>
   d47ee:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgRo1", sgRo1, PRIVATE);
   d47f0:	4a53      	ldr	r2, [pc, #332]	; (d4940 <loop+0x2e4>)
   d47f2:	4959      	ldr	r1, [pc, #356]	; (d4958 <loop+0x2fc>)
   d47f4:	f88d 4000 	strb.w	r4, [sp]
   d47f8:	a804      	add	r0, sp, #16
   d47fa:	f7ff fc70 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d47fe:	a805      	add	r0, sp, #20
   d4800:	f7ff ff16 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(15000);
   d4804:	f643 2098 	movw	r0, #15000	; 0x3a98
   d4808:	f000 fdde 	bl	d53c8 <delay>
  
  // Update angle variables
  sprintf(angle1X, "%f", angles1[0]);
   d480c:	6830      	ldr	r0, [r6, #0]
   d480e:	f002 fc8d 	bl	d712c <__aeabi_f2d>
   d4812:	4602      	mov	r2, r0
   d4814:	460b      	mov	r3, r1
   d4816:	4851      	ldr	r0, [pc, #324]	; (d495c <loop+0x300>)
   d4818:	4951      	ldr	r1, [pc, #324]	; (d4960 <loop+0x304>)
   d481a:	f000 fc73 	bl	d5104 <sprintf>
  sprintf(angle1Y, "%f", angles1[1]);
   d481e:	6870      	ldr	r0, [r6, #4]
   d4820:	f002 fc84 	bl	d712c <__aeabi_f2d>
   d4824:	4602      	mov	r2, r0
   d4826:	460b      	mov	r3, r1
   d4828:	484e      	ldr	r0, [pc, #312]	; (d4964 <loop+0x308>)
   d482a:	494d      	ldr	r1, [pc, #308]	; (d4960 <loop+0x304>)
   d482c:	f000 fc6a 	bl	d5104 <sprintf>
  sprintf(angle1Z, "%f", angles1[2]);
   d4830:	68b0      	ldr	r0, [r6, #8]
   d4832:	f002 fc7b 	bl	d712c <__aeabi_f2d>
   d4836:	4602      	mov	r2, r0
   d4838:	460b      	mov	r3, r1
   d483a:	484b      	ldr	r0, [pc, #300]	; (d4968 <loop+0x30c>)
   d483c:	4948      	ldr	r1, [pc, #288]	; (d4960 <loop+0x304>)
   d483e:	f000 fc61 	bl	d5104 <sprintf>
   d4842:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("angle1X", angle1X, PRIVATE);
   d4844:	4a45      	ldr	r2, [pc, #276]	; (d495c <loop+0x300>)
   d4846:	4949      	ldr	r1, [pc, #292]	; (d496c <loop+0x310>)
   d4848:	f88d 4000 	strb.w	r4, [sp]
   d484c:	a804      	add	r0, sp, #16
   d484e:	f7ff fc46 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4852:	a805      	add	r0, sp, #20
   d4854:	f7ff feec 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1500);
   d4858:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d485c:	f000 fdb4 	bl	d53c8 <delay>
   d4860:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("angle1Y", angle1Y, PRIVATE);
   d4862:	4a40      	ldr	r2, [pc, #256]	; (d4964 <loop+0x308>)
   d4864:	4942      	ldr	r1, [pc, #264]	; (d4970 <loop+0x314>)
   d4866:	f88d 4000 	strb.w	r4, [sp]
   d486a:	a804      	add	r0, sp, #16
   d486c:	f7ff fc37 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4870:	a805      	add	r0, sp, #20
   d4872:	f7ff fedd 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1500);
   d4876:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d487a:	f000 fda5 	bl	d53c8 <delay>
   d487e:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("angle1Z", angle1Z, PRIVATE);
   d4880:	4a39      	ldr	r2, [pc, #228]	; (d4968 <loop+0x30c>)
   d4882:	493c      	ldr	r1, [pc, #240]	; (d4974 <loop+0x318>)
   d4884:	f88d 4000 	strb.w	r4, [sp]
   d4888:	a804      	add	r0, sp, #16
   d488a:	f7ff fc28 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d488e:	a805      	add	r0, sp, #20
   d4890:	f7ff fece 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1500);
   d4894:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d4898:	f000 fd96 	bl	d53c8 <delay>

  delay(timestep);  // Wait ten seconds
   d489c:	f242 7010 	movw	r0, #10000	; 0x2710
   d48a0:	f000 fd92 	bl	d53c8 <delay>
        .gpio(D3, RISING)
        .duration(300s)
        .network(NETWORK_INTERFACE_CELLULAR);
  SystemSleepResult result = System.sleep(config);
  */
   d48a4:	b007      	add	sp, #28
   d48a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d48aa:	bf00      	nop
   d48ac:	2003e0f8 	.word	0x2003e0f8
   d48b0:	2003e120 	.word	0x2003e120
   d48b4:	2003ddb0 	.word	0x2003ddb0
   d48b8:	2003dee8 	.word	0x2003dee8
   d48bc:	2003e338 	.word	0x2003e338
   d48c0:	2003e0fc 	.word	0x2003e0fc
   d48c4:	2003e170 	.word	0x2003e170
   d48c8:	2003e1cc 	.word	0x2003e1cc
   d48cc:	2003e038 	.word	0x2003e038
   d48d0:	2003e118 	.word	0x2003e118
   d48d4:	2003e1d8 	.word	0x2003e1d8
   d48d8:	2003e024 	.word	0x2003e024
   d48dc:	2003e0a8 	.word	0x2003e0a8
   d48e0:	2003e22c 	.word	0x2003e22c
   d48e4:	2003e340 	.word	0x2003e340
   d48e8:	2003e004 	.word	0x2003e004
   d48ec:	2003e028 	.word	0x2003e028
   d48f0:	2003e230 	.word	0x2003e230
   d48f4:	2003e010 	.word	0x2003e010
   d48f8:	2003e02c 	.word	0x2003e02c
   d48fc:	2003debc 	.word	0x2003debc
   d4900:	2003e0a0 	.word	0x2003e0a0
   d4904:	2003e390 	.word	0x2003e390
   d4908:	2003e030 	.word	0x2003e030
   d490c:	2003e23c 	.word	0x2003e23c
   d4910:	2003ddcc 	.word	0x2003ddcc
   d4914:	2003e1c0 	.word	0x2003e1c0
   d4918:	2003e0a4 	.word	0x2003e0a4
   d491c:	2003e034 	.word	0x2003e034
   d4920:	2003def8 	.word	0x2003def8
   d4924:	000d7981 	.word	0x000d7981
   d4928:	2003ddb8 	.word	0x2003ddb8
   d492c:	2003ddbd 	.word	0x2003ddbd
   d4930:	2003dffc 	.word	0x2003dffc
   d4934:	2003e1d0 	.word	0x2003e1d0
   d4938:	2003dec8 	.word	0x2003dec8
   d493c:	2003ddc8 	.word	0x2003ddc8
   d4940:	2003e01c 	.word	0x2003e01c
   d4944:	000d7984 	.word	0x000d7984
   d4948:	000d798a 	.word	0x000d798a
   d494c:	000d7990 	.word	0x000d7990
   d4950:	000d7996 	.word	0x000d7996
   d4954:	000d799c 	.word	0x000d799c
   d4958:	000d79a2 	.word	0x000d79a2
   d495c:	2003e088 	.word	0x2003e088
   d4960:	000d79a8 	.word	0x000d79a8
   d4964:	2003dfe8 	.word	0x2003dfe8
   d4968:	2003dff2 	.word	0x2003dff2
   d496c:	000d79ab 	.word	0x000d79ab
   d4970:	000d79b3 	.word	0x000d79b3
   d4974:	000d79bb 	.word	0x000d79bb
   d4978:	2003e33c 	.word	0x2003e33c
   d497c:	2003e11c 	.word	0x2003e11c
   d4980:	2003ddc4 	.word	0x2003ddc4
   d4984:	2003ddac 	.word	0x2003ddac

000d4988 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4988:	2300      	movs	r3, #0
   d498a:	2202      	movs	r2, #2
   d498c:	f000 bb8a 	b.w	d50a4 <spark_variable>

000d4990 <_ZN10CloudClass8variableIA8_cIRA10_cEEEbRKT_DpOT0_>:
   d4990:	2300      	movs	r3, #0
   d4992:	2204      	movs	r2, #4
   d4994:	f000 bb86 	b.w	d50a4 <spark_variable>

000d4998 <setup>:
int startup1 = 0;
int startup2 = 0;

/*========== START ==========*/
/*========== Setup ==========*/
void setup() {
   d4998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d499c:	b085      	sub	sp, #20
  Serial.begin(9600); // Initiate serial communication at 9600 BAUD
   d499e:	f001 f963 	bl	d5c68 <_Z16_fetch_usbserialv>
   d49a2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d49a6:	f001 f953 	bl	d5c50 <_ZN9USBSerial5beginEl>
  Wire.begin();       // Initiate Wire library
   d49aa:	f001 fcd9 	bl	d6360 <_Z19__fetch_global_Wirev>
   d49ae:	f001 faa1 	bl	d5ef4 <_ZN7TwoWire5beginEv>
  delay(100);         // delay 100 milliseconds for startup
   d49b2:	2064      	movs	r0, #100	; 0x64
   d49b4:	f000 fd08 	bl	d53c8 <delay>
  
  // Configure MPU-6050's with default settings
  configSensor(MPU_SLAVE_ADDR_1, PWR_MGMT_1, NRML_PWR);
   d49b8:	2200      	movs	r2, #0
   d49ba:	216b      	movs	r1, #107	; 0x6b
   d49bc:	2068      	movs	r0, #104	; 0x68
   d49be:	f7ff fb9f 	bl	d4100 <_Z12configSensoriii>
  configSensor(MPU_SLAVE_ADDR_2, PWR_MGMT_1, NRML_PWR);
   d49c2:	2200      	movs	r2, #0
   d49c4:	216b      	movs	r1, #107	; 0x6b
   d49c6:	2069      	movs	r0, #105	; 0x69
   d49c8:	f7ff fb9a 	bl	d4100 <_Z12configSensoriii>

  // Set up GPIO
  pinMode(Power, OUTPUT);   // Power pin for strain gauges
   d49cc:	2101      	movs	r1, #1
   d49ce:	2002      	movs	r0, #2
   d49d0:	f001 fc6a 	bl	d62a8 <pinMode>
  // Note: reading from analog pins does not require pinMode()
  digitalWrite(Power, HIGH);
   d49d4:	2101      	movs	r1, #1
   d49d6:	2002      	movs	r0, #2
   d49d8:	f001 fc77 	bl	d62ca <digitalWrite>
  
  // Particle Cloud Variables, Functions, and Publishing  
  // Update strain gauge variables
  sprintf(sgLi1, "%d", sgValLi1);
   d49dc:	4c86      	ldr	r4, [pc, #536]	; (d4bf8 <setup+0x260>)
   d49de:	f8df a25c 	ldr.w	sl, [pc, #604]	; d4c3c <setup+0x2a4>
   d49e2:	4b86      	ldr	r3, [pc, #536]	; (d4bfc <setup+0x264>)
  sprintf(sgLi2, "%d", sgValLi2);
   d49e4:	f8df 9258 	ldr.w	r9, [pc, #600]	; d4c40 <setup+0x2a8>
  // Note: reading from analog pins does not require pinMode()
  digitalWrite(Power, HIGH);
  
  // Particle Cloud Variables, Functions, and Publishing  
  // Update strain gauge variables
  sprintf(sgLi1, "%d", sgValLi1);
   d49e8:	681a      	ldr	r2, [r3, #0]
  sprintf(sgLi2, "%d", sgValLi2);
  sprintf(sgLo1, "%d", sgValLo1);
   d49ea:	f8df 8258 	ldr.w	r8, [pc, #600]	; d4c44 <setup+0x2ac>
  sprintf(sgRi1, "%d", sgValRi1);
   d49ee:	4f84      	ldr	r7, [pc, #528]	; (d4c00 <setup+0x268>)
  sprintf(sgRi2, "%d", sgValRi2);
   d49f0:	4e84      	ldr	r6, [pc, #528]	; (d4c04 <setup+0x26c>)
  sprintf(sgRo1, "%d", sgValRo1);
   d49f2:	f8df b254 	ldr.w	fp, [pc, #596]	; d4c48 <setup+0x2b0>
   d49f6:	4d84      	ldr	r5, [pc, #528]	; (d4c08 <setup+0x270>)
  // Note: reading from analog pins does not require pinMode()
  digitalWrite(Power, HIGH);
  
  // Particle Cloud Variables, Functions, and Publishing  
  // Update strain gauge variables
  sprintf(sgLi1, "%d", sgValLi1);
   d49f8:	4621      	mov	r1, r4
   d49fa:	4650      	mov	r0, sl
   d49fc:	f000 fb82 	bl	d5104 <sprintf>
  sprintf(sgLi2, "%d", sgValLi2);
   d4a00:	4b82      	ldr	r3, [pc, #520]	; (d4c0c <setup+0x274>)
   d4a02:	4621      	mov	r1, r4
   d4a04:	681a      	ldr	r2, [r3, #0]
   d4a06:	4648      	mov	r0, r9
   d4a08:	f000 fb7c 	bl	d5104 <sprintf>
  sprintf(sgLo1, "%d", sgValLo1);
   d4a0c:	4b80      	ldr	r3, [pc, #512]	; (d4c10 <setup+0x278>)
   d4a0e:	4621      	mov	r1, r4
   d4a10:	681a      	ldr	r2, [r3, #0]
   d4a12:	4640      	mov	r0, r8
   d4a14:	f000 fb76 	bl	d5104 <sprintf>
  sprintf(sgRi1, "%d", sgValRi1);
   d4a18:	4b7e      	ldr	r3, [pc, #504]	; (d4c14 <setup+0x27c>)
   d4a1a:	4621      	mov	r1, r4
   d4a1c:	681a      	ldr	r2, [r3, #0]
   d4a1e:	4638      	mov	r0, r7
   d4a20:	f000 fb70 	bl	d5104 <sprintf>
  sprintf(sgRi2, "%d", sgValRi2);
   d4a24:	4b7c      	ldr	r3, [pc, #496]	; (d4c18 <setup+0x280>)
   d4a26:	4621      	mov	r1, r4
   d4a28:	681a      	ldr	r2, [r3, #0]
   d4a2a:	4630      	mov	r0, r6
   d4a2c:	f000 fb6a 	bl	d5104 <sprintf>
  sprintf(sgRo1, "%d", sgValRo1);
   d4a30:	4b7a      	ldr	r3, [pc, #488]	; (d4c1c <setup+0x284>)
   d4a32:	4621      	mov	r1, r4
   d4a34:	681a      	ldr	r2, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4a36:	2400      	movs	r4, #0
   d4a38:	4658      	mov	r0, fp
   d4a3a:	f000 fb63 	bl	d5104 <sprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4a3e:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgLi1", sgLi1, PRIVATE);
   d4a40:	4977      	ldr	r1, [pc, #476]	; (d4c20 <setup+0x288>)
   d4a42:	f88d 4000 	strb.w	r4, [sp]
   d4a46:	4652      	mov	r2, sl
   d4a48:	a802      	add	r0, sp, #8
   d4a4a:	f7ff fb48 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
  delay(1500);
  Particle.publish("sgLi2", sgLi2, PRIVATE);
   d4a4e:	f8df a1fc 	ldr.w	sl, [pc, #508]	; d4c4c <setup+0x2b4>
   d4a52:	a803      	add	r0, sp, #12
   d4a54:	f7ff fdec 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sprintf(sgLo1, "%d", sgValLo1);
  sprintf(sgRi1, "%d", sgValRi1);
  sprintf(sgRi2, "%d", sgValRi2);
  sprintf(sgRo1, "%d", sgValRo1);
  Particle.publish("sgLi1", sgLi1, PRIVATE);
  delay(1500);
   d4a58:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d4a5c:	f000 fcb4 	bl	d53c8 <delay>
   d4a60:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgLi2", sgLi2, PRIVATE);
   d4a62:	f88d 4000 	strb.w	r4, [sp]
   d4a66:	464a      	mov	r2, r9
   d4a68:	4651      	mov	r1, sl
   d4a6a:	a802      	add	r0, sp, #8
   d4a6c:	f7ff fb37 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
  delay(1500);
  Particle.publish("sgLo1", sgLo1, PRIVATE);
   d4a70:	f8df 91dc 	ldr.w	r9, [pc, #476]	; d4c50 <setup+0x2b8>
   d4a74:	a803      	add	r0, sp, #12
   d4a76:	f7ff fddb 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sprintf(sgRi2, "%d", sgValRi2);
  sprintf(sgRo1, "%d", sgValRo1);
  Particle.publish("sgLi1", sgLi1, PRIVATE);
  delay(1500);
  Particle.publish("sgLi2", sgLi2, PRIVATE);
  delay(1500);
   d4a7a:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d4a7e:	f000 fca3 	bl	d53c8 <delay>
   d4a82:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgLo1", sgLo1, PRIVATE);
   d4a84:	f88d 4000 	strb.w	r4, [sp]
   d4a88:	4642      	mov	r2, r8
   d4a8a:	4649      	mov	r1, r9
   d4a8c:	a802      	add	r0, sp, #8
   d4a8e:	f7ff fb26 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
  delay(1500);
  Particle.publish("sgRi1", sgRi1, PRIVATE);
   d4a92:	f8df 81c0 	ldr.w	r8, [pc, #448]	; d4c54 <setup+0x2bc>
   d4a96:	a803      	add	r0, sp, #12
   d4a98:	f7ff fdca 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("sgLi1", sgLi1, PRIVATE);
  delay(1500);
  Particle.publish("sgLi2", sgLi2, PRIVATE);
  delay(1500);
  Particle.publish("sgLo1", sgLo1, PRIVATE);
  delay(1500);
   d4a9c:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d4aa0:	f000 fc92 	bl	d53c8 <delay>
   d4aa4:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgRi1", sgRi1, PRIVATE);
   d4aa6:	f88d 4000 	strb.w	r4, [sp]
   d4aaa:	463a      	mov	r2, r7
   d4aac:	4641      	mov	r1, r8
   d4aae:	a802      	add	r0, sp, #8
   d4ab0:	f7ff fb15 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
  delay(1500);
  Particle.publish("sgRi2", sgRi2, PRIVATE);
   d4ab4:	4f5b      	ldr	r7, [pc, #364]	; (d4c24 <setup+0x28c>)
   d4ab6:	a803      	add	r0, sp, #12
   d4ab8:	f7ff fdba 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("sgLi2", sgLi2, PRIVATE);
  delay(1500);
  Particle.publish("sgLo1", sgLo1, PRIVATE);
  delay(1500);
  Particle.publish("sgRi1", sgRi1, PRIVATE);
  delay(1500);
   d4abc:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d4ac0:	f000 fc82 	bl	d53c8 <delay>
   d4ac4:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgRi2", sgRi2, PRIVATE);
   d4ac6:	f88d 4000 	strb.w	r4, [sp]
   d4aca:	4632      	mov	r2, r6
   d4acc:	4639      	mov	r1, r7
   d4ace:	a802      	add	r0, sp, #8
   d4ad0:	f7ff fb05 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
  delay(1500);
  Particle.publish("sgRo1", sgRo1, PRIVATE);
   d4ad4:	4e54      	ldr	r6, [pc, #336]	; (d4c28 <setup+0x290>)
   d4ad6:	a803      	add	r0, sp, #12
   d4ad8:	f7ff fdaa 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("sgLo1", sgLo1, PRIVATE);
  delay(1500);
  Particle.publish("sgRi1", sgRi1, PRIVATE);
  delay(1500);
  Particle.publish("sgRi2", sgRi2, PRIVATE);
  delay(1500);
   d4adc:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d4ae0:	f000 fc72 	bl	d53c8 <delay>
   d4ae4:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("sgRo1", sgRo1, PRIVATE);
   d4ae6:	f88d 4000 	strb.w	r4, [sp]
   d4aea:	465a      	mov	r2, fp
   d4aec:	4631      	mov	r1, r6
   d4aee:	a802      	add	r0, sp, #8
   d4af0:	f7ff faf5 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4af4:	a803      	add	r0, sp, #12
   d4af6:	f7ff fd9b 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1500); 
   d4afa:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d4afe:	f000 fc63 	bl	d53c8 <delay>
  Particle.variable("sgLi1", sgValLi1); 
   d4b02:	493e      	ldr	r1, [pc, #248]	; (d4bfc <setup+0x264>)
   d4b04:	4846      	ldr	r0, [pc, #280]	; (d4c20 <setup+0x288>)
   d4b06:	f7ff ff3f 	bl	d4988 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>
  Particle.variable("sgLi2", sgValLi2); 
   d4b0a:	4940      	ldr	r1, [pc, #256]	; (d4c0c <setup+0x274>)
   d4b0c:	4650      	mov	r0, sl
   d4b0e:	f7ff ff3b 	bl	d4988 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>
  Particle.variable("sgLo1", sgValLo1); 
   d4b12:	493f      	ldr	r1, [pc, #252]	; (d4c10 <setup+0x278>)

  // Update angle variables
  sprintf(angle1X, "%f", angles1[0]);
  sprintf(angle1Y, "%f", angles1[1]);
  sprintf(angle1Z, "%f", angles1[2]);
  Particle.publish("angle1X", angle1X, PRIVATE);
   d4b14:	f8df a140 	ldr.w	sl, [pc, #320]	; d4c58 <setup+0x2c0>
  delay(1500);
  Particle.publish("sgRo1", sgRo1, PRIVATE);
  delay(1500); 
  Particle.variable("sgLi1", sgValLi1); 
  Particle.variable("sgLi2", sgValLi2); 
  Particle.variable("sgLo1", sgValLo1); 
   d4b18:	4648      	mov	r0, r9
   d4b1a:	f7ff ff35 	bl	d4988 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>
  Particle.variable("sgRi1", sgValRi1); 
   d4b1e:	493d      	ldr	r1, [pc, #244]	; (d4c14 <setup+0x27c>)
  Particle.variable("sgRi2", sgValRi2); 
  Particle.variable("sgRo1", sgValRo1); 

  // Update angle variables
  sprintf(angle1X, "%f", angles1[0]);
   d4b20:	f8df 9138 	ldr.w	r9, [pc, #312]	; d4c5c <setup+0x2c4>
  Particle.publish("sgRo1", sgRo1, PRIVATE);
  delay(1500); 
  Particle.variable("sgLi1", sgValLi1); 
  Particle.variable("sgLi2", sgValLi2); 
  Particle.variable("sgLo1", sgValLo1); 
  Particle.variable("sgRi1", sgValRi1); 
   d4b24:	4640      	mov	r0, r8
   d4b26:	f7ff ff2f 	bl	d4988 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>
  Particle.variable("sgRi2", sgValRi2); 
   d4b2a:	493b      	ldr	r1, [pc, #236]	; (d4c18 <setup+0x280>)
  Particle.variable("sgRo1", sgValRo1); 

  // Update angle variables
  sprintf(angle1X, "%f", angles1[0]);
   d4b2c:	f8df 8130 	ldr.w	r8, [pc, #304]	; d4c60 <setup+0x2c8>
  delay(1500); 
  Particle.variable("sgLi1", sgValLi1); 
  Particle.variable("sgLi2", sgValLi2); 
  Particle.variable("sgLo1", sgValLo1); 
  Particle.variable("sgRi1", sgValRi1); 
  Particle.variable("sgRi2", sgValRi2); 
   d4b30:	4638      	mov	r0, r7
   d4b32:	f7ff ff29 	bl	d4988 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>
  Particle.variable("sgRo1", sgValRo1); 
   d4b36:	4630      	mov	r0, r6

  // Update angle variables
  sprintf(angle1X, "%f", angles1[0]);
   d4b38:	4e3c      	ldr	r6, [pc, #240]	; (d4c2c <setup+0x294>)
  Particle.variable("sgLi1", sgValLi1); 
  Particle.variable("sgLi2", sgValLi2); 
  Particle.variable("sgLo1", sgValLo1); 
  Particle.variable("sgRi1", sgValRi1); 
  Particle.variable("sgRi2", sgValRi2); 
  Particle.variable("sgRo1", sgValRo1); 
   d4b3a:	4938      	ldr	r1, [pc, #224]	; (d4c1c <setup+0x284>)

  // Update angle variables
  sprintf(angle1X, "%f", angles1[0]);
  sprintf(angle1Y, "%f", angles1[1]);
   d4b3c:	4f3c      	ldr	r7, [pc, #240]	; (d4c30 <setup+0x298>)
  Particle.variable("sgLi1", sgValLi1); 
  Particle.variable("sgLi2", sgValLi2); 
  Particle.variable("sgLo1", sgValLo1); 
  Particle.variable("sgRi1", sgValRi1); 
  Particle.variable("sgRi2", sgValRi2); 
  Particle.variable("sgRo1", sgValRo1); 
   d4b3e:	f7ff ff23 	bl	d4988 <_ZN10CloudClass8variableIA6_cIRiEEEbRKT_DpOT0_>

  // Update angle variables
  sprintf(angle1X, "%f", angles1[0]);
   d4b42:	6830      	ldr	r0, [r6, #0]
   d4b44:	f002 faf2 	bl	d712c <__aeabi_f2d>
   d4b48:	4602      	mov	r2, r0
   d4b4a:	460b      	mov	r3, r1
   d4b4c:	4640      	mov	r0, r8
   d4b4e:	4649      	mov	r1, r9
   d4b50:	f000 fad8 	bl	d5104 <sprintf>
  sprintf(angle1Y, "%f", angles1[1]);
   d4b54:	6870      	ldr	r0, [r6, #4]
   d4b56:	f002 fae9 	bl	d712c <__aeabi_f2d>
   d4b5a:	4602      	mov	r2, r0
   d4b5c:	460b      	mov	r3, r1
   d4b5e:	4638      	mov	r0, r7
   d4b60:	4649      	mov	r1, r9
   d4b62:	f000 facf 	bl	d5104 <sprintf>
  sprintf(angle1Z, "%f", angles1[2]);
   d4b66:	68b0      	ldr	r0, [r6, #8]
   d4b68:	4e32      	ldr	r6, [pc, #200]	; (d4c34 <setup+0x29c>)
   d4b6a:	f002 fadf 	bl	d712c <__aeabi_f2d>
   d4b6e:	4602      	mov	r2, r0
   d4b70:	460b      	mov	r3, r1
   d4b72:	4630      	mov	r0, r6
   d4b74:	4649      	mov	r1, r9
   d4b76:	f000 fac5 	bl	d5104 <sprintf>
   d4b7a:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("angle1X", angle1X, PRIVATE);
   d4b7c:	f88d 4000 	strb.w	r4, [sp]
   d4b80:	4642      	mov	r2, r8
   d4b82:	4651      	mov	r1, sl
   d4b84:	a802      	add	r0, sp, #8
   d4b86:	f7ff faaa 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
  delay(1500);
  Particle.publish("angle1Y", angle1Y, PRIVATE);
   d4b8a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; d4c64 <setup+0x2cc>
   d4b8e:	a803      	add	r0, sp, #12
   d4b90:	f7ff fd4e 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  // Update angle variables
  sprintf(angle1X, "%f", angles1[0]);
  sprintf(angle1Y, "%f", angles1[1]);
  sprintf(angle1Z, "%f", angles1[2]);
  Particle.publish("angle1X", angle1X, PRIVATE);
  delay(1500);
   d4b94:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d4b98:	f000 fc16 	bl	d53c8 <delay>
   d4b9c:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("angle1Y", angle1Y, PRIVATE);
   d4b9e:	f88d 4000 	strb.w	r4, [sp]
   d4ba2:	463a      	mov	r2, r7
   d4ba4:	4649      	mov	r1, r9
   d4ba6:	a802      	add	r0, sp, #8
   d4ba8:	f7ff fa99 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4bac:	a803      	add	r0, sp, #12
   d4bae:	f7ff fd3f 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1500);
   d4bb2:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d4bb6:	f000 fc07 	bl	d53c8 <delay>
   d4bba:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("angle1Z", angle1Z, PRIVATE);
   d4bbc:	4d1e      	ldr	r5, [pc, #120]	; (d4c38 <setup+0x2a0>)
   d4bbe:	f88d 4000 	strb.w	r4, [sp]
   d4bc2:	4632      	mov	r2, r6
   d4bc4:	4629      	mov	r1, r5
   d4bc6:	a802      	add	r0, sp, #8
   d4bc8:	f7ff fa89 	bl	d40de <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.6.constprop.8>
   d4bcc:	a803      	add	r0, sp, #12
   d4bce:	f7ff fd2f 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1500);
   d4bd2:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d4bd6:	f000 fbf7 	bl	d53c8 <delay>
  Particle.variable("angle1X", angle1X);
   d4bda:	4641      	mov	r1, r8
   d4bdc:	4650      	mov	r0, sl
   d4bde:	f7ff fed7 	bl	d4990 <_ZN10CloudClass8variableIA8_cIRA10_cEEEbRKT_DpOT0_>
  Particle.variable("angle1Y", angle1Y);
   d4be2:	4639      	mov	r1, r7
   d4be4:	4648      	mov	r0, r9
   d4be6:	f7ff fed3 	bl	d4990 <_ZN10CloudClass8variableIA8_cIRA10_cEEEbRKT_DpOT0_>
  Particle.variable("angle1Z", angle1Z);
   d4bea:	4631      	mov	r1, r6
   d4bec:	4628      	mov	r0, r5
   d4bee:	f7ff fecf 	bl	d4990 <_ZN10CloudClass8variableIA8_cIRA10_cEEEbRKT_DpOT0_>
}
   d4bf2:	b005      	add	sp, #20
   d4bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4bf8:	000d7981 	.word	0x000d7981
   d4bfc:	2003e33c 	.word	0x2003e33c
   d4c00:	2003e1d0 	.word	0x2003e1d0
   d4c04:	2003dec8 	.word	0x2003dec8
   d4c08:	2003ddc8 	.word	0x2003ddc8
   d4c0c:	2003e11c 	.word	0x2003e11c
   d4c10:	2003ddc4 	.word	0x2003ddc4
   d4c14:	2003ddac 	.word	0x2003ddac
   d4c18:	2003ddb0 	.word	0x2003ddb0
   d4c1c:	2003dee8 	.word	0x2003dee8
   d4c20:	000d7984 	.word	0x000d7984
   d4c24:	000d799c 	.word	0x000d799c
   d4c28:	000d79a2 	.word	0x000d79a2
   d4c2c:	2003e390 	.word	0x2003e390
   d4c30:	2003dfe8 	.word	0x2003dfe8
   d4c34:	2003dff2 	.word	0x2003dff2
   d4c38:	000d79bb 	.word	0x000d79bb
   d4c3c:	2003ddb8 	.word	0x2003ddb8
   d4c40:	2003ddbd 	.word	0x2003ddbd
   d4c44:	2003dffc 	.word	0x2003dffc
   d4c48:	2003e01c 	.word	0x2003e01c
   d4c4c:	000d798a 	.word	0x000d798a
   d4c50:	000d7990 	.word	0x000d7990
   d4c54:	000d7996 	.word	0x000d7996
   d4c58:	000d79ab 	.word	0x000d79ab
   d4c5c:	000d79a8 	.word	0x000d79a8
   d4c60:	2003e088 	.word	0x2003e088
   d4c64:	000d79b3 	.word	0x000d79b3

000d4c68 <_GLOBAL__sub_I_result>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c68:	4b16      	ldr	r3, [pc, #88]	; (d4cc4 <_GLOBAL__sub_I_result+0x5c>)
        .gpio(D3, RISING)
        .duration(300s)
        .network(NETWORK_INTERFACE_CELLULAR);
  SystemSleepResult result = System.sleep(config);
  */
   d4c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c6e:	4c16      	ldr	r4, [pc, #88]	; (d4cc8 <_GLOBAL__sub_I_result+0x60>)
#include "Wire.h"                 // This library allows I2C communication
#include "PeripheralFunctions.h"  // Holds all peripheral functions for reading in data from MPU-6050, etc.

/*========== Device System Settings ==========*/
//SYSTEM_MODE(SEMI_AUTOMATIC);  // Uncomment this line when attempting to test locally 
SYSTEM_MODE(AUTOMATIC);             // Comment out this line when attempting to test locally
   d4c70:	4f16      	ldr	r7, [pc, #88]	; (d4ccc <_GLOBAL__sub_I_result+0x64>)
   d4c72:	2601      	movs	r6, #1
   d4c74:	2500      	movs	r5, #0
   d4c76:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4c78:	f000 f840 	bl	d4cfc <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4c80:	8163      	strh	r3, [r4, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c82:	6025      	str	r5, [r4, #0]
   d4c84:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4c86:	71a5      	strb	r5, [r4, #6]
   d4c88:	8125      	strh	r5, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c8a:	4630      	mov	r0, r6
   d4c8c:	f000 f986 	bl	d4f9c <set_system_mode>
   d4c90:	4620      	mov	r0, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4c92:	4c0f      	ldr	r4, [pc, #60]	; (d4cd0 <_GLOBAL__sub_I_result+0x68>)
   d4c94:	490f      	ldr	r1, [pc, #60]	; (d4cd4 <_GLOBAL__sub_I_result+0x6c>)
   d4c96:	463a      	mov	r2, r7
   d4c98:	f001 fb88 	bl	d63ac <__aeabi_atexit>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4c9c:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4ca0:	1d20      	adds	r0, r4, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4ca2:	4642      	mov	r2, r8
   d4ca4:	4629      	mov	r1, r5
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4ca6:	6020      	str	r0, [r4, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4ca8:	f002 fdad 	bl	d7806 <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d4cac:	2302      	movs	r3, #2
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4cae:	7526      	strb	r6, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d4cb0:	f8a4 8004 	strh.w	r8, [r4, #4]
        config_.version = HAL_SLEEP_VERSION;
   d4cb4:	80e3      	strh	r3, [r4, #6]
SystemSleepConfiguration config;    // Create instantiation of sleep configuration for use when making calls to sleep
   d4cb6:	463a      	mov	r2, r7
   d4cb8:	4620      	mov	r0, r4
   d4cba:	4907      	ldr	r1, [pc, #28]	; (d4cd8 <_GLOBAL__sub_I_result+0x70>)
        .gpio(D3, RISING)
        .duration(300s)
        .network(NETWORK_INTERFACE_CELLULAR);
  SystemSleepResult result = System.sleep(config);
  */
   d4cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#include "PeripheralFunctions.h"  // Holds all peripheral functions for reading in data from MPU-6050, etc.

/*========== Device System Settings ==========*/
//SYSTEM_MODE(SEMI_AUTOMATIC);  // Uncomment this line when attempting to test locally 
SYSTEM_MODE(AUTOMATIC);             // Comment out this line when attempting to test locally
SystemSleepConfiguration config;    // Create instantiation of sleep configuration for use when making calls to sleep
   d4cc0:	f001 bb74 	b.w	d63ac <__aeabi_atexit>
   d4cc4:	2003ddc8 	.word	0x2003ddc8
   d4cc8:	2003e10c 	.word	0x2003e10c
   d4ccc:	2003dda8 	.word	0x2003dda8
   d4cd0:	2003ded0 	.word	0x2003ded0
   d4cd4:	000d40cf 	.word	0x000d40cf
   d4cd8:	000d40b7 	.word	0x000d40b7

000d4cdc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <netdb_freeaddrinfo+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	689b      	ldr	r3, [r3, #8]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030268 	.word	0x00030268

000d4cec <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <netdb_getaddrinfo+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	68db      	ldr	r3, [r3, #12]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030268 	.word	0x00030268

000d4cfc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <HAL_Pin_Map+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	681b      	ldr	r3, [r3, #0]
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	0003022c 	.word	0x0003022c

000d4d0c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <HAL_Validate_Pin_Function+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	685b      	ldr	r3, [r3, #4]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	0003022c 	.word	0x0003022c

000d4d1c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <HAL_Pin_Mode+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	689b      	ldr	r3, [r3, #8]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	0003022c 	.word	0x0003022c

000d4d2c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <HAL_Get_Pin_Mode+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	68db      	ldr	r3, [r3, #12]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	0003022c 	.word	0x0003022c

000d4d3c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <HAL_GPIO_Write+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	691b      	ldr	r3, [r3, #16]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	0003022c 	.word	0x0003022c

000d4d4c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <HAL_ADC_Read+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	0003022c 	.word	0x0003022c

000d4d5c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <HAL_SPI_Init+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	69db      	ldr	r3, [r3, #28]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	00030230 	.word	0x00030230

000d4d6c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <HAL_SPI_Is_Enabled+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	6a1b      	ldr	r3, [r3, #32]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	00030230 	.word	0x00030230

000d4d7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <HAL_RNG_GetRandomNumber+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	685b      	ldr	r3, [r3, #4]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030218 	.word	0x00030218

000d4d8c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	695b      	ldr	r3, [r3, #20]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	00030218 	.word	0x00030218

000d4d9c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <os_thread_is_current+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	689b      	ldr	r3, [r3, #8]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030248 	.word	0x00030248

000d4dac <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <os_thread_join+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	691b      	ldr	r3, [r3, #16]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030248 	.word	0x00030248

000d4dbc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <os_thread_cleanup+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	695b      	ldr	r3, [r3, #20]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030248 	.word	0x00030248

000d4dcc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <os_mutex_recursive_create+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030248 	.word	0x00030248

000d4ddc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <os_mutex_recursive_destroy+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030248 	.word	0x00030248

000d4dec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <inet_inet_ntop+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	695b      	ldr	r3, [r3, #20]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030264 	.word	0x00030264

000d4dfc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <HAL_USART_Init+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	681b      	ldr	r3, [r3, #0]
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	0003023c 	.word	0x0003023c

000d4e0c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <HAL_USART_Write_Data+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	68db      	ldr	r3, [r3, #12]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	0003023c 	.word	0x0003023c

000d4e1c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <HAL_USART_Available_Data+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	691b      	ldr	r3, [r3, #16]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	0003023c 	.word	0x0003023c

000d4e2c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <HAL_USART_Read_Data+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	695b      	ldr	r3, [r3, #20]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	0003023c 	.word	0x0003023c

000d4e3c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <HAL_USART_Peek_Data+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	699b      	ldr	r3, [r3, #24]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	0003023c 	.word	0x0003023c

000d4e4c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <HAL_USART_Flush_Data+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	69db      	ldr	r3, [r3, #28]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	0003023c 	.word	0x0003023c

000d4e5c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <HAL_USART_Is_Enabled+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	6a1b      	ldr	r3, [r3, #32]
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	0003023c 	.word	0x0003023c

000d4e6c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <HAL_USART_Available_Data_For_Write+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	0003023c 	.word	0x0003023c

000d4e7c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <HAL_I2C_Begin+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	68db      	ldr	r3, [r3, #12]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030228 	.word	0x00030228

000d4e8c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <HAL_I2C_Begin_Transmission+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	699b      	ldr	r3, [r3, #24]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	00030228 	.word	0x00030228

000d4e9c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <HAL_I2C_End_Transmission+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	69db      	ldr	r3, [r3, #28]
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	00030228 	.word	0x00030228

000d4eac <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <HAL_I2C_Write_Data+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	6a1b      	ldr	r3, [r3, #32]
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030228 	.word	0x00030228

000d4ebc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <HAL_I2C_Available_Data+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030228 	.word	0x00030228

000d4ecc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <HAL_I2C_Read_Data+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030228 	.word	0x00030228

000d4edc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <HAL_I2C_Peek_Data+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030228 	.word	0x00030228

000d4eec <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <HAL_I2C_Flush_Data+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	00030228 	.word	0x00030228

000d4efc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <HAL_I2C_Is_Enabled+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	00030228 	.word	0x00030228

000d4f0c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <HAL_I2C_Init+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	00030228 	.word	0x00030228

000d4f1c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <HAL_I2C_Request_Data_Ex+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	00030228 	.word	0x00030228

000d4f2c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <HAL_USB_USART_Init+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	681b      	ldr	r3, [r3, #0]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	0003024c 	.word	0x0003024c

000d4f3c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <HAL_USB_USART_Begin+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	685b      	ldr	r3, [r3, #4]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	0003024c 	.word	0x0003024c

000d4f4c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <HAL_USB_USART_Available_Data+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	691b      	ldr	r3, [r3, #16]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	0003024c 	.word	0x0003024c

000d4f5c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	695b      	ldr	r3, [r3, #20]
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	0003024c 	.word	0x0003024c

000d4f6c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <HAL_USB_USART_Receive_Data+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	699b      	ldr	r3, [r3, #24]
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	0003024c 	.word	0x0003024c

000d4f7c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <HAL_USB_USART_Send_Data+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	69db      	ldr	r3, [r3, #28]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	0003024c 	.word	0x0003024c

000d4f8c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <HAL_USB_USART_Flush_Data+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	6a1b      	ldr	r3, [r3, #32]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	0003024c 	.word	0x0003024c

000d4f9c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <set_system_mode+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	685b      	ldr	r3, [r3, #4]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030220 	.word	0x00030220

000d4fac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <system_delay_ms+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	695b      	ldr	r3, [r3, #20]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030220 	.word	0x00030220

000d4fbc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <application_thread_current+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030220 	.word	0x00030220

000d4fcc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <application_thread_invoke+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	00030220 	.word	0x00030220

000d4fdc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b03      	ldr	r3, [pc, #12]	; (d4fec <system_ctrl_set_app_request_handler+0x10>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4fe6:	9301      	str	r3, [sp, #4]
   d4fe8:	bd08      	pop	{r3, pc}
   d4fea:	0000      	.short	0x0000
   d4fec:	00030220 	.word	0x00030220

000d4ff0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b03      	ldr	r3, [pc, #12]	; (d5000 <system_ctrl_set_result+0x10>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4ffa:	9301      	str	r3, [sp, #4]
   d4ffc:	bd08      	pop	{r3, pc}
   d4ffe:	0000      	.short	0x0000
   d5000:	00030220 	.word	0x00030220

000d5004 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <network_connect+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	685b      	ldr	r3, [r3, #4]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030240 	.word	0x00030240

000d5014 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <network_connecting+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	689b      	ldr	r3, [r3, #8]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030240 	.word	0x00030240

000d5024 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <network_disconnect+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	68db      	ldr	r3, [r3, #12]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030240 	.word	0x00030240

000d5034 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <network_ready+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	691b      	ldr	r3, [r3, #16]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030240 	.word	0x00030240

000d5044 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <network_on+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	695b      	ldr	r3, [r3, #20]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030240 	.word	0x00030240

000d5054 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <network_off+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	699b      	ldr	r3, [r3, #24]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030240 	.word	0x00030240

000d5064 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <network_listen+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	69db      	ldr	r3, [r3, #28]
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030240 	.word	0x00030240

000d5074 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <network_listening+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6a1b      	ldr	r3, [r3, #32]
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030240 	.word	0x00030240

000d5084 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <network_set_listen_timeout+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030240 	.word	0x00030240

000d5094 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <network_get_listen_timeout+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030240 	.word	0x00030240

000d50a4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <spark_variable+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	681b      	ldr	r3, [r3, #0]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030244 	.word	0x00030244

000d50b4 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <spark_cloud_flag_connected+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	695b      	ldr	r3, [r3, #20]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030244 	.word	0x00030244

000d50c4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <spark_send_event+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	6a1b      	ldr	r3, [r3, #32]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030244 	.word	0x00030244

000d50d4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030244 	.word	0x00030244

000d50e4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <malloc+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	681b      	ldr	r3, [r3, #0]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	0003021c 	.word	0x0003021c

000d50f4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <free+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	685b      	ldr	r3, [r3, #4]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	0003021c 	.word	0x0003021c

000d5104 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <sprintf+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	68db      	ldr	r3, [r3, #12]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	0003021c 	.word	0x0003021c

000d5114 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <vsnprintf+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003021c 	.word	0x0003021c

000d5124 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <abort+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003021c 	.word	0x0003021c

000d5134 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <_malloc_r+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003021c 	.word	0x0003021c

000d5144 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <__errno+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003021c 	.word	0x0003021c

000d5154 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5154:	2200      	movs	r2, #0
   d5156:	4611      	mov	r1, r2
   d5158:	6840      	ldr	r0, [r0, #4]
   d515a:	f7ff bf8b 	b.w	d5074 <network_listening>

000d515e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d515e:	2200      	movs	r2, #0
   d5160:	4611      	mov	r1, r2
   d5162:	6840      	ldr	r0, [r0, #4]
   d5164:	f7ff bf96 	b.w	d5094 <network_get_listen_timeout>

000d5168 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5168:	2200      	movs	r2, #0
   d516a:	6840      	ldr	r0, [r0, #4]
   d516c:	f7ff bf8a 	b.w	d5084 <network_set_listen_timeout>

000d5170 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5170:	2200      	movs	r2, #0
   d5172:	f081 0101 	eor.w	r1, r1, #1
   d5176:	6840      	ldr	r0, [r0, #4]
   d5178:	f7ff bf74 	b.w	d5064 <network_listen>

000d517c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d517c:	2300      	movs	r3, #0
   d517e:	461a      	mov	r2, r3
   d5180:	4619      	mov	r1, r3
   d5182:	6840      	ldr	r0, [r0, #4]
   d5184:	f7ff bf66 	b.w	d5054 <network_off>

000d5188 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5188:	2300      	movs	r3, #0
   d518a:	461a      	mov	r2, r3
   d518c:	4619      	mov	r1, r3
   d518e:	6840      	ldr	r0, [r0, #4]
   d5190:	f7ff bf58 	b.w	d5044 <network_on>

000d5194 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5194:	2200      	movs	r2, #0
   d5196:	4611      	mov	r1, r2
   d5198:	6840      	ldr	r0, [r0, #4]
   d519a:	f7ff bf4b 	b.w	d5034 <network_ready>

000d519e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d519e:	2200      	movs	r2, #0
   d51a0:	4611      	mov	r1, r2
   d51a2:	6840      	ldr	r0, [r0, #4]
   d51a4:	f7ff bf36 	b.w	d5014 <network_connecting>

000d51a8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51a8:	2200      	movs	r2, #0
   d51aa:	2102      	movs	r1, #2
   d51ac:	6840      	ldr	r0, [r0, #4]
   d51ae:	f7ff bf39 	b.w	d5024 <network_disconnect>

000d51b2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d51b2:	2300      	movs	r3, #0
   d51b4:	461a      	mov	r2, r3
   d51b6:	6840      	ldr	r0, [r0, #4]
   d51b8:	f7ff bf24 	b.w	d5004 <network_connect>

000d51bc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d51bc:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d51be:	2203      	movs	r2, #3
   d51c0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d51c2:	4a02      	ldr	r2, [pc, #8]	; (d51cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d51c4:	601a      	str	r2, [r3, #0]
   d51c6:	4770      	bx	lr
   d51c8:	2003e3a8 	.word	0x2003e3a8
   d51cc:	000d79cc 	.word	0x000d79cc

000d51d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d51d0:	b510      	push	{r4, lr}
   d51d2:	4604      	mov	r4, r0
{
    _spi = spi;
   d51d4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d51d6:	4608      	mov	r0, r1
   d51d8:	f7ff fdc0 	bl	d4d5c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d51dc:	2300      	movs	r3, #0
   d51de:	6063      	str	r3, [r4, #4]
}
   d51e0:	4620      	mov	r0, r4
   d51e2:	bd10      	pop	{r4, pc}

000d51e4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d51e4:	7800      	ldrb	r0, [r0, #0]
   d51e6:	f7ff bdc1 	b.w	d4d6c <HAL_SPI_Is_Enabled>
	...

000d51ec <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d51ec:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d51ee:	4c09      	ldr	r4, [pc, #36]	; (d5214 <_GLOBAL__sub_I_System+0x28>)
   d51f0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d51f2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d51f6:	6020      	str	r0, [r4, #0]
   d51f8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d51fa:	71a0      	strb	r0, [r4, #6]
   d51fc:	8120      	strh	r0, [r4, #8]
   d51fe:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5200:	f7ff fecc 	bl	d4f9c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5204:	4620      	mov	r0, r4
   d5206:	4a04      	ldr	r2, [pc, #16]	; (d5218 <_GLOBAL__sub_I_System+0x2c>)
   d5208:	4904      	ldr	r1, [pc, #16]	; (d521c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d520a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d520e:	f001 b8cd 	b.w	d63ac <__aeabi_atexit>
   d5212:	bf00      	nop
   d5214:	2003e3b0 	.word	0x2003e3b0
   d5218:	2003dda8 	.word	0x2003dda8
   d521c:	000d40cf 	.word	0x000d40cf

000d5220 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5220:	b510      	push	{r4, lr}
   d5222:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5224:	6800      	ldr	r0, [r0, #0]
   d5226:	b108      	cbz	r0, d522c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5228:	f7ff fdd8 	bl	d4ddc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d522c:	4620      	mov	r0, r4
   d522e:	bd10      	pop	{r4, pc}

000d5230 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5230:	680b      	ldr	r3, [r1, #0]
   d5232:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5234:	b113      	cbz	r3, d523c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5236:	685a      	ldr	r2, [r3, #4]
   d5238:	3201      	adds	r2, #1
   d523a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d523c:	4770      	bx	lr
	...

000d5240 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5240:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5242:	4c06      	ldr	r4, [pc, #24]	; (d525c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5244:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5246:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5248:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d524a:	f7ff fdbf 	bl	d4dcc <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d524e:	4620      	mov	r0, r4
   d5250:	4a03      	ldr	r2, [pc, #12]	; (d5260 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5252:	4904      	ldr	r1, [pc, #16]	; (d5264 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5258:	f001 b8a8 	b.w	d63ac <__aeabi_atexit>
   d525c:	2003e3bc 	.word	0x2003e3bc
   d5260:	2003dda8 	.word	0x2003dda8
   d5264:	000d5221 	.word	0x000d5221

000d5268 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d526a:	4606      	mov	r6, r0
   d526c:	460d      	mov	r5, r1
   d526e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5270:	2400      	movs	r4, #0
  while (size--) {
   d5272:	42bd      	cmp	r5, r7
   d5274:	d00c      	beq.n	d5290 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5276:	6833      	ldr	r3, [r6, #0]
   d5278:	f815 1b01 	ldrb.w	r1, [r5], #1
   d527c:	689b      	ldr	r3, [r3, #8]
   d527e:	4630      	mov	r0, r6
   d5280:	4798      	blx	r3
     if (chunk>=0)
   d5282:	2800      	cmp	r0, #0
   d5284:	db01      	blt.n	d528a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5286:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5288:	e7f3      	b.n	d5272 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d528a:	2c00      	cmp	r4, #0
   d528c:	bf08      	it	eq
   d528e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5290:	4620      	mov	r0, r4
   d5292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5294 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5294:	b570      	push	{r4, r5, r6, lr}
   d5296:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5298:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d529a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d529c:	b149      	cbz	r1, d52b2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d529e:	f002 fafe 	bl	d789e <strlen>
   d52a2:	682b      	ldr	r3, [r5, #0]
   d52a4:	4602      	mov	r2, r0
   d52a6:	4621      	mov	r1, r4
   d52a8:	4628      	mov	r0, r5
   d52aa:	68db      	ldr	r3, [r3, #12]
    }
   d52ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d52b0:	4718      	bx	r3
    }
   d52b2:	bd70      	pop	{r4, r5, r6, pc}

000d52b4 <_ZN5Print5printEPKc>:
   d52b4:	b508      	push	{r3, lr}
   d52b6:	f7ff ffed 	bl	d5294 <_ZN5Print5writeEPKc>
   d52ba:	bd08      	pop	{r3, pc}

000d52bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d52bc:	6803      	ldr	r3, [r0, #0]
   d52be:	689b      	ldr	r3, [r3, #8]
   d52c0:	4718      	bx	r3

000d52c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d52c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d52c4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d52c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d52c8:	f7ff fff8 	bl	d52bc <_ZN5Print5printEc>
  n += print('\n');
   d52cc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d52ce:	4604      	mov	r4, r0
  n += print('\n');
   d52d0:	4628      	mov	r0, r5
   d52d2:	f7ff fff3 	bl	d52bc <_ZN5Print5printEc>
  return n;
}
   d52d6:	4420      	add	r0, r4
   d52d8:	bd38      	pop	{r3, r4, r5, pc}

000d52da <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d52da:	b538      	push	{r3, r4, r5, lr}
   d52dc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d52de:	f7ff ffd9 	bl	d5294 <_ZN5Print5writeEPKc>
   d52e2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d52e4:	4628      	mov	r0, r5
   d52e6:	f7ff ffec 	bl	d52c2 <_ZN5Print7printlnEv>
  return n;
}
   d52ea:	4420      	add	r0, r4
   d52ec:	bd38      	pop	{r3, r4, r5, pc}

000d52ee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d52ee:	b530      	push	{r4, r5, lr}
   d52f0:	b08b      	sub	sp, #44	; 0x2c
   d52f2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d52f4:	2100      	movs	r1, #0
   d52f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d52fa:	2a01      	cmp	r2, #1
   d52fc:	bf98      	it	ls
   d52fe:	220a      	movls	r2, #10
   d5300:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5304:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5308:	fb05 3312 	mls	r3, r5, r2, r3
   d530c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5310:	2b09      	cmp	r3, #9
   d5312:	bf94      	ite	ls
   d5314:	3330      	addls	r3, #48	; 0x30
   d5316:	3337      	addhi	r3, #55	; 0x37
   d5318:	b2db      	uxtb	r3, r3
   d531a:	4621      	mov	r1, r4
   d531c:	f804 3901 	strb.w	r3, [r4], #-1
   d5320:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5322:	2d00      	cmp	r5, #0
   d5324:	d1ee      	bne.n	d5304 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5326:	f7ff ffb5 	bl	d5294 <_ZN5Print5writeEPKc>
}
   d532a:	b00b      	add	sp, #44	; 0x2c
   d532c:	bd30      	pop	{r4, r5, pc}

000d532e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d532e:	b40c      	push	{r2, r3}
   d5330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5334:	b087      	sub	sp, #28
   d5336:	af00      	add	r7, sp, #0
   d5338:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d533c:	4605      	mov	r5, r0
   d533e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5342:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5344:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5346:	4623      	mov	r3, r4
   d5348:	464a      	mov	r2, r9
   d534a:	2114      	movs	r1, #20
   d534c:	1d38      	adds	r0, r7, #4
   d534e:	f7ff fee1 	bl	d5114 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5352:	2813      	cmp	r0, #19
   d5354:	d805      	bhi.n	d5362 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5356:	1d39      	adds	r1, r7, #4
   d5358:	4628      	mov	r0, r5
   d535a:	f7ff ff9b 	bl	d5294 <_ZN5Print5writeEPKc>
   d535e:	4604      	mov	r4, r0
   d5360:	e013      	b.n	d538a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5362:	f100 0308 	add.w	r3, r0, #8
   d5366:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d536a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d536c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5370:	1c41      	adds	r1, r0, #1
   d5372:	4623      	mov	r3, r4
   d5374:	464a      	mov	r2, r9
   d5376:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5378:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d537a:	f7ff fecb 	bl	d5114 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d537e:	4669      	mov	r1, sp
   d5380:	4628      	mov	r0, r5
   d5382:	f7ff ff87 	bl	d5294 <_ZN5Print5writeEPKc>
   d5386:	4604      	mov	r4, r0
   d5388:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d538a:	b11e      	cbz	r6, d5394 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d538c:	4628      	mov	r0, r5
   d538e:	f7ff ff98 	bl	d52c2 <_ZN5Print7printlnEv>
   d5392:	4404      	add	r4, r0
    return n;
}
   d5394:	4620      	mov	r0, r4
   d5396:	371c      	adds	r7, #28
   d5398:	46bd      	mov	sp, r7
   d539a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d539e:	b002      	add	sp, #8
   d53a0:	4770      	bx	lr
	...

000d53a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d53a4:	4b01      	ldr	r3, [pc, #4]	; (d53ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d53a6:	4a02      	ldr	r2, [pc, #8]	; (d53b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d53a8:	601a      	str	r2, [r3, #0]
   d53aa:	4770      	bx	lr
   d53ac:	2003e3c0 	.word	0x2003e3c0
   d53b0:	000d7a6b 	.word	0x000d7a6b

000d53b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d53b4:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d53b6:	681a      	ldr	r2, [r3, #0]
   d53b8:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d53ba:	601a      	str	r2, [r3, #0]
   d53bc:	4770      	bx	lr
   d53be:	bf00      	nop
   d53c0:	2003dd3c 	.word	0x2003dd3c
   d53c4:	2003e3c4 	.word	0x2003e3c4

000d53c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d53c8:	2100      	movs	r1, #0
   d53ca:	f7ff bdef 	b.w	d4fac <system_delay_ms>

000d53ce <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d53ce:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d53d0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d53d2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d53d4:	b113      	cbz	r3, d53dc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d53d6:	2203      	movs	r2, #3
   d53d8:	4601      	mov	r1, r0
   d53da:	4798      	blx	r3
    }
   d53dc:	4620      	mov	r0, r4
   d53de:	bd10      	pop	{r4, pc}

000d53e0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d53e0:	b510      	push	{r4, lr}
   d53e2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53e4:	f7ff fff3 	bl	d53ce <_ZNSt14_Function_baseD1Ev>
   d53e8:	4620      	mov	r0, r4
   d53ea:	bd10      	pop	{r4, pc}

000d53ec <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d53ec:	b513      	push	{r0, r1, r4, lr}
   d53ee:	460b      	mov	r3, r1
   d53f0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53f2:	c803      	ldmia	r0, {r0, r1}
   d53f4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d53f8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d53fc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5400:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5404:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5408:	b002      	add	sp, #8
   d540a:	bd10      	pop	{r4, pc}

000d540c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d540c:	4803      	ldr	r0, [pc, #12]	; (d541c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d540e:	4a04      	ldr	r2, [pc, #16]	; (d5420 <_GLOBAL__sub_I_RGB+0x14>)
   d5410:	4904      	ldr	r1, [pc, #16]	; (d5424 <_GLOBAL__sub_I_RGB+0x18>)
   d5412:	2300      	movs	r3, #0
   d5414:	6083      	str	r3, [r0, #8]
   d5416:	f000 bfc9 	b.w	d63ac <__aeabi_atexit>
   d541a:	bf00      	nop
   d541c:	2003e3c8 	.word	0x2003e3c8
   d5420:	2003dda8 	.word	0x2003dda8
   d5424:	000d53e1 	.word	0x000d53e1

000d5428 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5428:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d542a:	4b0c      	ldr	r3, [pc, #48]	; (d545c <serialEventRun+0x34>)
   d542c:	b133      	cbz	r3, d543c <serialEventRun+0x14>
   d542e:	f000 fc1b 	bl	d5c68 <_Z16_fetch_usbserialv>
   d5432:	6803      	ldr	r3, [r0, #0]
   d5434:	691b      	ldr	r3, [r3, #16]
   d5436:	4798      	blx	r3
   d5438:	2800      	cmp	r0, #0
   d543a:	dc09      	bgt.n	d5450 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d543c:	4b08      	ldr	r3, [pc, #32]	; (d5460 <serialEventRun+0x38>)
   d543e:	b163      	cbz	r3, d545a <serialEventRun+0x32>
   d5440:	f000 fce0 	bl	d5e04 <_Z22__fetch_global_Serial1v>
   d5444:	6803      	ldr	r3, [r0, #0]
   d5446:	691b      	ldr	r3, [r3, #16]
   d5448:	4798      	blx	r3
   d544a:	2800      	cmp	r0, #0
   d544c:	dc03      	bgt.n	d5456 <serialEventRun+0x2e>
   d544e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5450:	f3af 8000 	nop.w
   d5454:	e7f2      	b.n	d543c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5456:	f3af 8000 	nop.w
   d545a:	bd08      	pop	{r3, pc}
	...

000d5464 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5464:	b508      	push	{r3, lr}
	serialEventRun();
   d5466:	f7ff ffdf 	bl	d5428 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d546a:	f7ff fc8f 	bl	d4d8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d546e:	4b01      	ldr	r3, [pc, #4]	; (d5474 <_post_loop+0x10>)
   d5470:	6018      	str	r0, [r3, #0]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	2003e730 	.word	0x2003e730

000d5478 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5478:	4802      	ldr	r0, [pc, #8]	; (d5484 <_Z33system_initialize_user_backup_ramv+0xc>)
   d547a:	4a03      	ldr	r2, [pc, #12]	; (d5488 <_Z33system_initialize_user_backup_ramv+0x10>)
   d547c:	4903      	ldr	r1, [pc, #12]	; (d548c <_Z33system_initialize_user_backup_ramv+0x14>)
   d547e:	1a12      	subs	r2, r2, r0
   d5480:	f002 b9b6 	b.w	d77f0 <memcpy>
   d5484:	2003f400 	.word	0x2003f400
   d5488:	2003f404 	.word	0x2003f404
   d548c:	000d7d40 	.word	0x000d7d40

000d5490 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5490:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5492:	2300      	movs	r3, #0
   d5494:	9300      	str	r3, [sp, #0]
   d5496:	461a      	mov	r2, r3
   d5498:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d549c:	f7ff fda8 	bl	d4ff0 <system_ctrl_set_result>
}
   d54a0:	b003      	add	sp, #12
   d54a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d54a8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d54a8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d54aa:	8843      	ldrh	r3, [r0, #2]
   d54ac:	2b0a      	cmp	r3, #10
   d54ae:	d008      	beq.n	d54c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d54b0:	2b50      	cmp	r3, #80	; 0x50
   d54b2:	d109      	bne.n	d54c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d54b4:	4b09      	ldr	r3, [pc, #36]	; (d54dc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d54b6:	681b      	ldr	r3, [r3, #0]
   d54b8:	b13b      	cbz	r3, d54ca <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d54ba:	b003      	add	sp, #12
   d54bc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d54c0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d54c2:	f7ff ffe5 	bl	d5490 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d54c6:	e006      	b.n	d54d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d54c8:	2300      	movs	r3, #0
   d54ca:	9300      	str	r3, [sp, #0]
   d54cc:	461a      	mov	r2, r3
   d54ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d54d2:	f7ff fd8d 	bl	d4ff0 <system_ctrl_set_result>
        break;
    }
}
   d54d6:	b003      	add	sp, #12
   d54d8:	f85d fb04 	ldr.w	pc, [sp], #4
   d54dc:	2003e3d8 	.word	0x2003e3d8

000d54e0 <module_user_init_hook>:

void module_user_init_hook()
{
   d54e0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d54e2:	4c10      	ldr	r4, [pc, #64]	; (d5524 <module_user_init_hook+0x44>)
   d54e4:	4d10      	ldr	r5, [pc, #64]	; (d5528 <module_user_init_hook+0x48>)
   d54e6:	6823      	ldr	r3, [r4, #0]
   d54e8:	42ab      	cmp	r3, r5
   d54ea:	4b10      	ldr	r3, [pc, #64]	; (d552c <module_user_init_hook+0x4c>)
   d54ec:	bf0c      	ite	eq
   d54ee:	2201      	moveq	r2, #1
   d54f0:	2200      	movne	r2, #0
   d54f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d54f4:	d002      	beq.n	d54fc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d54f6:	f7ff ffbf 	bl	d5478 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d54fa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d54fc:	f7ff fc3e 	bl	d4d7c <HAL_RNG_GetRandomNumber>
   d5500:	4604      	mov	r4, r0
    srand(seed);
   d5502:	f002 f989 	bl	d7818 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5506:	4b0a      	ldr	r3, [pc, #40]	; (d5530 <module_user_init_hook+0x50>)
   d5508:	b113      	cbz	r3, d5510 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d550a:	4620      	mov	r0, r4
   d550c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5510:	2100      	movs	r1, #0
   d5512:	4807      	ldr	r0, [pc, #28]	; (d5530 <module_user_init_hook+0x50>)
   d5514:	f7ff fdde 	bl	d50d4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5518:	2100      	movs	r1, #0
   d551a:	4806      	ldr	r0, [pc, #24]	; (d5534 <module_user_init_hook+0x54>)
}
   d551c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5520:	f7ff bd5c 	b.w	d4fdc <system_ctrl_set_app_request_handler>
   d5524:	2003f400 	.word	0x2003f400
   d5528:	9a271c1e 	.word	0x9a271c1e
   d552c:	2003e3dc 	.word	0x2003e3dc
   d5530:	00000000 	.word	0x00000000
   d5534:	000d54a9 	.word	0x000d54a9

000d5538 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5538:	4770      	bx	lr

000d553a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d553a:	2000      	movs	r0, #0
   d553c:	4770      	bx	lr

000d553e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d553e:	b510      	push	{r4, lr}
   d5540:	2110      	movs	r1, #16
   d5542:	4604      	mov	r4, r0
   d5544:	f000 ff40 	bl	d63c8 <_ZdlPvj>
   d5548:	4620      	mov	r0, r4
   d554a:	bd10      	pop	{r4, pc}

000d554c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d554c:	b508      	push	{r3, lr}
      { delete this; }
   d554e:	b108      	cbz	r0, d5554 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5550:	f7ff fff5 	bl	d553e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5554:	bd08      	pop	{r3, pc}

000d5556 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5556:	2200      	movs	r2, #0
   d5558:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d555a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d555c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5560:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5562:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5566:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5568:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d556a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d556c:	680c      	ldr	r4, [r1, #0]
   d556e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5570:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5572:	bd10      	pop	{r4, pc}

000d5574 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5574:	b510      	push	{r4, lr}
   d5576:	4604      	mov	r4, r0
    free((void*)msg_);
   d5578:	6800      	ldr	r0, [r0, #0]
   d557a:	f7ff fdbb 	bl	d50f4 <free>
}
   d557e:	4620      	mov	r0, r4
   d5580:	bd10      	pop	{r4, pc}

000d5582 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5582:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5584:	68c4      	ldr	r4, [r0, #12]
   d5586:	b1f4      	cbz	r4, d55c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5588:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d558a:	2b02      	cmp	r3, #2
   d558c:	d103      	bne.n	d5596 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d558e:	f104 000c 	add.w	r0, r4, #12
   d5592:	f7ff ffef 	bl	d5574 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5596:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5598:	b135      	cbz	r5, d55a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d559a:	4628      	mov	r0, r5
   d559c:	f7ff ff17 	bl	d53ce <_ZNSt14_Function_baseD1Ev>
   d55a0:	2110      	movs	r1, #16
   d55a2:	4628      	mov	r0, r5
   d55a4:	f000 ff10 	bl	d63c8 <_ZdlPvj>
   d55a8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d55aa:	b135      	cbz	r5, d55ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d55ac:	4628      	mov	r0, r5
   d55ae:	f7ff ff0e 	bl	d53ce <_ZNSt14_Function_baseD1Ev>
   d55b2:	2110      	movs	r1, #16
   d55b4:	4628      	mov	r0, r5
   d55b6:	f000 ff07 	bl	d63c8 <_ZdlPvj>
   d55ba:	4620      	mov	r0, r4
   d55bc:	2114      	movs	r1, #20
   d55be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d55c2:	f000 bf01 	b.w	d63c8 <_ZdlPvj>
   d55c6:	bd38      	pop	{r3, r4, r5, pc}

000d55c8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d55c8:	b513      	push	{r0, r1, r4, lr}
   d55ca:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d55cc:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d55d0:	2300      	movs	r3, #0
   d55d2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d55d4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d55d6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d55d8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55da:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d55dc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d55de:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55e0:	f7ff f826 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55e4:	4620      	mov	r0, r4
   d55e6:	b002      	add	sp, #8
   d55e8:	bd10      	pop	{r4, pc}

000d55ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d55ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55ec:	460c      	mov	r4, r1
   d55ee:	ad02      	add	r5, sp, #8
   d55f0:	f854 3b04 	ldr.w	r3, [r4], #4
   d55f4:	f845 3d08 	str.w	r3, [r5, #-8]!
   d55f8:	4606      	mov	r6, r0
   d55fa:	460f      	mov	r7, r1
   d55fc:	a801      	add	r0, sp, #4
   d55fe:	4621      	mov	r1, r4
   d5600:	f7ff fe16 	bl	d5230 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5604:	4629      	mov	r1, r5
   d5606:	4630      	mov	r0, r6
   d5608:	f7ff ffde 	bl	d55c8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d560c:	a801      	add	r0, sp, #4
   d560e:	f7ff f80f 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5612:	4620      	mov	r0, r4
   d5614:	f7ff f80c 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5618:	4638      	mov	r0, r7
   d561a:	2108      	movs	r1, #8
   d561c:	f000 fed4 	bl	d63c8 <_ZdlPvj>
        return p;
    }
   d5620:	4630      	mov	r0, r6
   d5622:	b003      	add	sp, #12
   d5624:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5628 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5628:	b538      	push	{r3, r4, r5, lr}
   d562a:	2300      	movs	r3, #0
   d562c:	4604      	mov	r4, r0
   d562e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5630:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5632:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5634:	f7fe fd31 	bl	d409a <_Znwj>
   d5638:	b128      	cbz	r0, d5646 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d563a:	2301      	movs	r3, #1
   d563c:	6043      	str	r3, [r0, #4]
   d563e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5640:	4b02      	ldr	r3, [pc, #8]	; (d564c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5642:	6003      	str	r3, [r0, #0]
   d5644:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5646:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5648:	4620      	mov	r0, r4
   d564a:	bd38      	pop	{r3, r4, r5, pc}
   d564c:	000d7b04 	.word	0x000d7b04

000d5650 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5650:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5652:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5654:	b90a      	cbnz	r2, d565a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5656:	f000 feca 	bl	d63ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d565a:	68c3      	ldr	r3, [r0, #12]
    }
   d565c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5660:	4718      	bx	r3

000d5662 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5662:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5664:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5666:	f100 0110 	add.w	r1, r0, #16
   d566a:	f7ff fff1 	bl	d5650 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d566e:	bd08      	pop	{r3, pc}

000d5670 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5670:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5672:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5674:	b90a      	cbnz	r2, d567a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5676:	f000 feba 	bl	d63ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d567a:	68c3      	ldr	r3, [r0, #12]
    }
   d567c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5680:	4718      	bx	r3

000d5682 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5682:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5684:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5686:	f100 0110 	add.w	r1, r0, #16
   d568a:	f7ff fff1 	bl	d5670 <_ZNKSt8functionIFvRKbEEclES1_>
   d568e:	bd08      	pop	{r3, pc}

000d5690 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5690:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5692:	2300      	movs	r3, #0
   d5694:	6083      	str	r3, [r0, #8]
   d5696:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5698:	4604      	mov	r4, r0
   d569a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d569c:	b12b      	cbz	r3, d56aa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d569e:	2202      	movs	r2, #2
   d56a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d56a2:	68eb      	ldr	r3, [r5, #12]
   d56a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d56a6:	68ab      	ldr	r3, [r5, #8]
   d56a8:	60a3      	str	r3, [r4, #8]
	}
    }
   d56aa:	4620      	mov	r0, r4
   d56ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d56b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d56b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56b2:	b089      	sub	sp, #36	; 0x24
   d56b4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d56b6:	4668      	mov	r0, sp
   d56b8:	f7ff ff4d 	bl	d5556 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d56bc:	2300      	movs	r3, #0
   d56be:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d56c2:	f04f 0202 	mov.w	r2, #2
   d56c6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d56ca:	2b00      	cmp	r3, #0
   d56cc:	d103      	bne.n	d56d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d56ce:	e8c4 2f41 	strexb	r1, r2, [r4]
   d56d2:	2900      	cmp	r1, #0
   d56d4:	d1f7      	bne.n	d56c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d56d6:	d002      	beq.n	d56de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d56d8:	f88d 3008 	strb.w	r3, [sp, #8]
   d56dc:	e063      	b.n	d57a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d56de:	f114 050c 	adds.w	r5, r4, #12
   d56e2:	d003      	beq.n	d56ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d56e4:	4669      	mov	r1, sp
   d56e6:	4628      	mov	r0, r5
   d56e8:	f7ff ff35 	bl	d5556 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d56ec:	f3bf 8f5f 	dmb	sy
   d56f0:	2301      	movs	r3, #1
   d56f2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d56f4:	2000      	movs	r0, #0
   d56f6:	f104 0308 	add.w	r3, r4, #8
   d56fa:	f3bf 8f5f 	dmb	sy
   d56fe:	e853 6f00 	ldrex	r6, [r3]
   d5702:	e843 0200 	strex	r2, r0, [r3]
   d5706:	2a00      	cmp	r2, #0
   d5708:	d1f9      	bne.n	d56fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d570a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d570e:	2e00      	cmp	r6, #0
   d5710:	d049      	beq.n	d57a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5712:	f7ff fc53 	bl	d4fbc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5716:	b120      	cbz	r0, d5722 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5718:	4629      	mov	r1, r5
   d571a:	4630      	mov	r0, r6
   d571c:	f7ff ff98 	bl	d5650 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5720:	e03a      	b.n	d5798 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5722:	4631      	mov	r1, r6
   d5724:	a802      	add	r0, sp, #8
   d5726:	f7ff ffb3 	bl	d5690 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d572a:	68e0      	ldr	r0, [r4, #12]
   d572c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5730:	b108      	cbz	r0, d5736 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5732:	f002 f899 	bl	d7868 <strdup>
   d5736:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5738:	2010      	movs	r0, #16
   d573a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d573e:	f7fe fcac 	bl	d409a <_Znwj>
   d5742:	4605      	mov	r5, r0
   d5744:	b1e8      	cbz	r0, d5782 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5746:	2700      	movs	r7, #0
   d5748:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d574a:	2018      	movs	r0, #24
   d574c:	f7fe fca5 	bl	d409a <_Znwj>
   d5750:	4604      	mov	r4, r0
   d5752:	b188      	cbz	r0, d5778 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5754:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5756:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5758:	a802      	add	r0, sp, #8
   d575a:	f7ff fe47 	bl	d53ec <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d575e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5760:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5762:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5764:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5766:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5768:	a906      	add	r1, sp, #24
   d576a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d576c:	60e3      	str	r3, [r4, #12]
   d576e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5772:	9205      	str	r2, [sp, #20]
   d5774:	f7ff feef 	bl	d5556 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5778:	4b0d      	ldr	r3, [pc, #52]	; (d57b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d577a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d577c:	4b0d      	ldr	r3, [pc, #52]	; (d57b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d577e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5780:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5782:	a806      	add	r0, sp, #24
   d5784:	f7ff fef6 	bl	d5574 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5788:	a802      	add	r0, sp, #8
   d578a:	f7ff fe20 	bl	d53ce <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d578e:	2200      	movs	r2, #0
   d5790:	4629      	mov	r1, r5
   d5792:	4809      	ldr	r0, [pc, #36]	; (d57b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5794:	f7ff fc1a 	bl	d4fcc <application_thread_invoke>
   d5798:	4630      	mov	r0, r6
   d579a:	f7ff fe18 	bl	d53ce <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d579e:	2110      	movs	r1, #16
   d57a0:	4630      	mov	r0, r6
   d57a2:	f000 fe11 	bl	d63c8 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d57a6:	4668      	mov	r0, sp
   d57a8:	f7ff fee4 	bl	d5574 <_ZN8particle5ErrorD1Ev>
    }
   d57ac:	b009      	add	sp, #36	; 0x24
   d57ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57b0:	000d5663 	.word	0x000d5663
   d57b4:	000d58d9 	.word	0x000d58d9
   d57b8:	000d5e51 	.word	0x000d5e51

000d57bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d57bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57c0:	b08b      	sub	sp, #44	; 0x2c
   d57c2:	4606      	mov	r6, r0
   d57c4:	460f      	mov	r7, r1
   d57c6:	4690      	mov	r8, r2
   d57c8:	4699      	mov	r9, r3
   d57ca:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d57ce:	f7ff fc71 	bl	d50b4 <spark_cloud_flag_connected>
   d57d2:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d57d4:	4683      	mov	fp, r0
   d57d6:	bb30      	cbnz	r0, d5826 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d57d8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d57dc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d57de:	a905      	add	r1, sp, #20
   d57e0:	4628      	mov	r0, r5
   d57e2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d57e6:	f7ff feb6 	bl	d5556 <_ZN8particle5ErrorC1EOS0_>
   d57ea:	2014      	movs	r0, #20
   d57ec:	f7fe fc55 	bl	d409a <_Znwj>
   d57f0:	4604      	mov	r4, r0
   d57f2:	b158      	cbz	r0, d580c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d57f4:	2302      	movs	r3, #2
   d57f6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d57f8:	2301      	movs	r3, #1
   d57fa:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d57fc:	f8c0 b004 	str.w	fp, [r0, #4]
   d5800:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5804:	4629      	mov	r1, r5
   d5806:	300c      	adds	r0, #12
   d5808:	f7ff fea5 	bl	d5556 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d580c:	4630      	mov	r0, r6
   d580e:	4621      	mov	r1, r4
   d5810:	f840 4b04 	str.w	r4, [r0], #4
   d5814:	f7ff ff08 	bl	d5628 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5818:	4628      	mov	r0, r5
   d581a:	f7ff feab 	bl	d5574 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d581e:	a805      	add	r0, sp, #20
   d5820:	f7ff fea8 	bl	d5574 <_ZN8particle5ErrorD1Ev>
   d5824:	e052      	b.n	d58cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5826:	2400      	movs	r4, #0
   d5828:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d582a:	2014      	movs	r0, #20
   d582c:	606c      	str	r4, [r5, #4]
   d582e:	60ac      	str	r4, [r5, #8]
   d5830:	9307      	str	r3, [sp, #28]
   d5832:	f7fe fc32 	bl	d409a <_Znwj>
   d5836:	4601      	mov	r1, r0
   d5838:	b118      	cbz	r0, d5842 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d583a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d583c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d583e:	6044      	str	r4, [r0, #4]
   d5840:	6084      	str	r4, [r0, #8]
   d5842:	a804      	add	r0, sp, #16
   d5844:	9103      	str	r1, [sp, #12]
   d5846:	f7ff feef 	bl	d5628 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d584a:	4b22      	ldr	r3, [pc, #136]	; (d58d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d584c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d584e:	2008      	movs	r0, #8
   d5850:	f7fe fc23 	bl	d409a <_Znwj>
   d5854:	4604      	mov	r4, r0
   d5856:	b128      	cbz	r0, d5864 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5858:	9b03      	ldr	r3, [sp, #12]
   d585a:	f840 3b04 	str.w	r3, [r0], #4
   d585e:	a904      	add	r1, sp, #16
   d5860:	f7ff fce6 	bl	d5230 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5864:	9500      	str	r5, [sp, #0]
   d5866:	fa5f f38a 	uxtb.w	r3, sl
   d586a:	464a      	mov	r2, r9
   d586c:	4641      	mov	r1, r8
   d586e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5870:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5872:	f7ff fc27 	bl	d50c4 <spark_send_event>
   d5876:	b920      	cbnz	r0, d5882 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5878:	9b03      	ldr	r3, [sp, #12]
   d587a:	785b      	ldrb	r3, [r3, #1]
   d587c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5880:	b183      	cbz	r3, d58a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5882:	9b03      	ldr	r3, [sp, #12]
   d5884:	9305      	str	r3, [sp, #20]
   d5886:	a904      	add	r1, sp, #16
   d5888:	a806      	add	r0, sp, #24
   d588a:	f7ff fcd1 	bl	d5230 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d588e:	a905      	add	r1, sp, #20
   d5890:	4630      	mov	r0, r6
   d5892:	f7ff fe99 	bl	d55c8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5896:	a806      	add	r0, sp, #24
   d5898:	f7fe feca 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d589c:	a804      	add	r0, sp, #16
   d589e:	f7fe fec7 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58a2:	e013      	b.n	d58cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d58a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d58a8:	a905      	add	r1, sp, #20
   d58aa:	a803      	add	r0, sp, #12
   d58ac:	9205      	str	r2, [sp, #20]
   d58ae:	f8ad 3018 	strh.w	r3, [sp, #24]
   d58b2:	f7ff fefd 	bl	d56b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d58b6:	a805      	add	r0, sp, #20
   d58b8:	f7ff fe5c 	bl	d5574 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d58bc:	a805      	add	r0, sp, #20
   d58be:	9909      	ldr	r1, [sp, #36]	; 0x24
   d58c0:	f7ff fe93 	bl	d55ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d58c4:	a806      	add	r0, sp, #24
   d58c6:	f7fe feb3 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58ca:	e7da      	b.n	d5882 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d58cc:	4630      	mov	r0, r6
   d58ce:	b00b      	add	sp, #44	; 0x2c
   d58d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d58d4:	000d5a49 	.word	0x000d5a49

000d58d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d58d8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d58da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58dc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d58de:	d006      	beq.n	d58ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d58e0:	2a03      	cmp	r2, #3
   d58e2:	d017      	beq.n	d5914 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d58e4:	2a01      	cmp	r2, #1
   d58e6:	d122      	bne.n	d592e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d58e8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d58ea:	6003      	str	r3, [r0, #0]
	      break;
   d58ec:	e01f      	b.n	d592e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d58ee:	2018      	movs	r0, #24
   d58f0:	680e      	ldr	r6, [r1, #0]
   d58f2:	f7fe fbd2 	bl	d409a <_Znwj>
   d58f6:	4605      	mov	r5, r0
   d58f8:	b150      	cbz	r0, d5910 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d58fa:	4631      	mov	r1, r6
   d58fc:	f7ff fec8 	bl	d5690 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5900:	6930      	ldr	r0, [r6, #16]
   d5902:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5906:	b108      	cbz	r0, d590c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5908:	f001 ffae 	bl	d7868 <strdup>
   d590c:	6128      	str	r0, [r5, #16]
   d590e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5910:	6025      	str	r5, [r4, #0]
   d5912:	e00c      	b.n	d592e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5914:	6804      	ldr	r4, [r0, #0]
   d5916:	b154      	cbz	r4, d592e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5918:	f104 0010 	add.w	r0, r4, #16
   d591c:	f7ff fe2a 	bl	d5574 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5920:	4620      	mov	r0, r4
   d5922:	f7ff fd54 	bl	d53ce <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5926:	2118      	movs	r1, #24
   d5928:	4620      	mov	r0, r4
   d592a:	f000 fd4d 	bl	d63c8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d592e:	2000      	movs	r0, #0
   d5930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5932 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5932:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5934:	2300      	movs	r3, #0
   d5936:	6083      	str	r3, [r0, #8]
   d5938:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d593a:	4604      	mov	r4, r0
   d593c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d593e:	b12b      	cbz	r3, d594c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5940:	2202      	movs	r2, #2
   d5942:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5944:	68eb      	ldr	r3, [r5, #12]
   d5946:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5948:	68ab      	ldr	r3, [r5, #8]
   d594a:	60a3      	str	r3, [r4, #8]
	}
    }
   d594c:	4620      	mov	r0, r4
   d594e:	bd38      	pop	{r3, r4, r5, pc}

000d5950 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5950:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5952:	b570      	push	{r4, r5, r6, lr}
   d5954:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5956:	d006      	beq.n	d5966 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5958:	2a03      	cmp	r2, #3
   d595a:	d011      	beq.n	d5980 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d595c:	2a01      	cmp	r2, #1
   d595e:	d118      	bne.n	d5992 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5960:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5962:	6003      	str	r3, [r0, #0]
	      break;
   d5964:	e015      	b.n	d5992 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5966:	2014      	movs	r0, #20
   d5968:	680e      	ldr	r6, [r1, #0]
   d596a:	f7fe fb96 	bl	d409a <_Znwj>
   d596e:	4605      	mov	r5, r0
   d5970:	b120      	cbz	r0, d597c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5972:	4631      	mov	r1, r6
   d5974:	f7ff ffdd 	bl	d5932 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5978:	7c33      	ldrb	r3, [r6, #16]
   d597a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d597c:	6025      	str	r5, [r4, #0]
   d597e:	e008      	b.n	d5992 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5980:	6804      	ldr	r4, [r0, #0]
   d5982:	b134      	cbz	r4, d5992 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5984:	4620      	mov	r0, r4
   d5986:	f7ff fd22 	bl	d53ce <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d598a:	2114      	movs	r1, #20
   d598c:	4620      	mov	r0, r4
   d598e:	f000 fd1b 	bl	d63c8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5992:	2000      	movs	r0, #0
   d5994:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5998 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5998:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d599a:	2300      	movs	r3, #0
   d599c:	b087      	sub	sp, #28
   d599e:	460c      	mov	r4, r1
   d59a0:	f3bf 8f5f 	dmb	sy
   d59a4:	e850 6f00 	ldrex	r6, [r0]
   d59a8:	e840 3200 	strex	r2, r3, [r0]
   d59ac:	2a00      	cmp	r2, #0
   d59ae:	d1f9      	bne.n	d59a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d59b0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d59b4:	2e00      	cmp	r6, #0
   d59b6:	d03f      	beq.n	d5a38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d59b8:	4618      	mov	r0, r3
   d59ba:	f7ff faff 	bl	d4fbc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d59be:	4607      	mov	r7, r0
   d59c0:	b120      	cbz	r0, d59cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d59c2:	4621      	mov	r1, r4
   d59c4:	4630      	mov	r0, r6
   d59c6:	f7ff fe53 	bl	d5670 <_ZNKSt8functionIFvRKbEEclES1_>
   d59ca:	e02e      	b.n	d5a2a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d59cc:	4631      	mov	r1, r6
   d59ce:	a801      	add	r0, sp, #4
   d59d0:	f7ff ffaf 	bl	d5932 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d59d4:	7823      	ldrb	r3, [r4, #0]
   d59d6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d59da:	2010      	movs	r0, #16
   d59dc:	f7fe fb5d 	bl	d409a <_Znwj>
   d59e0:	4605      	mov	r5, r0
   d59e2:	b1d0      	cbz	r0, d5a1a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59e4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59e6:	2014      	movs	r0, #20
   d59e8:	f7fe fb57 	bl	d409a <_Znwj>
   d59ec:	4604      	mov	r4, r0
   d59ee:	b178      	cbz	r0, d5a10 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59f0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d59f2:	4601      	mov	r1, r0
   d59f4:	a801      	add	r0, sp, #4
   d59f6:	f7ff fcf9 	bl	d53ec <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59fa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d59fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d59fe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a00:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a02:	9203      	str	r2, [sp, #12]
   d5a04:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a06:	60e3      	str	r3, [r4, #12]
   d5a08:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a0c:	9204      	str	r2, [sp, #16]
   d5a0e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a10:	4b0a      	ldr	r3, [pc, #40]	; (d5a3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5a12:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a14:	4b0a      	ldr	r3, [pc, #40]	; (d5a40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a16:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5a18:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a1a:	a801      	add	r0, sp, #4
   d5a1c:	f7ff fcd7 	bl	d53ce <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5a20:	2200      	movs	r2, #0
   d5a22:	4629      	mov	r1, r5
   d5a24:	4807      	ldr	r0, [pc, #28]	; (d5a44 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5a26:	f7ff fad1 	bl	d4fcc <application_thread_invoke>
   d5a2a:	4630      	mov	r0, r6
   d5a2c:	f7ff fccf 	bl	d53ce <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5a30:	2110      	movs	r1, #16
   d5a32:	4630      	mov	r0, r6
   d5a34:	f000 fcc8 	bl	d63c8 <_ZdlPvj>
        }
    }
   d5a38:	b007      	add	sp, #28
   d5a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a3c:	000d5683 	.word	0x000d5683
   d5a40:	000d5951 	.word	0x000d5951
   d5a44:	000d5e51 	.word	0x000d5e51

000d5a48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5a48:	b530      	push	{r4, r5, lr}
   d5a4a:	b085      	sub	sp, #20
   d5a4c:	4604      	mov	r4, r0
   d5a4e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5a50:	4668      	mov	r0, sp
   d5a52:	4611      	mov	r1, r2
   d5a54:	f7ff fdc9 	bl	d55ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5a58:	b17c      	cbz	r4, d5a7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5a5a:	b224      	sxth	r4, r4
   d5a5c:	4628      	mov	r0, r5
   d5a5e:	b10d      	cbz	r5, d5a64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5a60:	f001 ff02 	bl	d7868 <strdup>
   d5a64:	9002      	str	r0, [sp, #8]
   d5a66:	a902      	add	r1, sp, #8
   d5a68:	4668      	mov	r0, sp
   d5a6a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5a6e:	f7ff fe1f 	bl	d56b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5a72:	a802      	add	r0, sp, #8
   d5a74:	f7ff fd7e 	bl	d5574 <_ZN8particle5ErrorD1Ev>
   d5a78:	e01d      	b.n	d5ab6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5a7a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5a7c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5a80:	f04f 0201 	mov.w	r2, #1
   d5a84:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5a88:	42a3      	cmp	r3, r4
   d5a8a:	d103      	bne.n	d5a94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5a8c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5a90:	2900      	cmp	r1, #0
   d5a92:	d1f7      	bne.n	d5a84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5a94:	d002      	beq.n	d5a9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5a96:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a9a:	e00c      	b.n	d5ab6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5a9c:	f110 010c 	adds.w	r1, r0, #12
   d5aa0:	f04f 0301 	mov.w	r3, #1
   d5aa4:	bf18      	it	ne
   d5aa6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5aa8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5aac:	3004      	adds	r0, #4
   d5aae:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5ab2:	f7ff ff71 	bl	d5998 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5ab6:	a801      	add	r0, sp, #4
   d5ab8:	f7fe fdba 	bl	d4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5abc:	b005      	add	sp, #20
   d5abe:	bd30      	pop	{r4, r5, pc}

000d5ac0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5ac0:	4770      	bx	lr

000d5ac2 <_ZN9IPAddressD0Ev>:
   d5ac2:	b510      	push	{r4, lr}
   d5ac4:	2118      	movs	r1, #24
   d5ac6:	4604      	mov	r4, r0
   d5ac8:	f000 fc7e 	bl	d63c8 <_ZdlPvj>
   d5acc:	4620      	mov	r0, r4
   d5ace:	bd10      	pop	{r4, pc}

000d5ad0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5ad2:	7d03      	ldrb	r3, [r0, #20]
   d5ad4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ad6:	b08d      	sub	sp, #52	; 0x34
   d5ad8:	460e      	mov	r6, r1
   d5ada:	f100 0704 	add.w	r7, r0, #4
   d5ade:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5ae2:	d002      	beq.n	d5aea <_ZNK9IPAddress7printToER5Print+0x1a>
   d5ae4:	f100 0508 	add.w	r5, r0, #8
   d5ae8:	e018      	b.n	d5b1c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5aea:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5aec:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5aee:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5af2:	232f      	movs	r3, #47	; 0x2f
   d5af4:	462a      	mov	r2, r5
   d5af6:	200a      	movs	r0, #10
   d5af8:	f7ff f978 	bl	d4dec <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5afc:	4628      	mov	r0, r5
   d5afe:	f001 fece 	bl	d789e <strlen>
   d5b02:	6833      	ldr	r3, [r6, #0]
   d5b04:	4602      	mov	r2, r0
   d5b06:	68db      	ldr	r3, [r3, #12]
   d5b08:	4629      	mov	r1, r5
   d5b0a:	4630      	mov	r0, r6
   d5b0c:	4798      	blx	r3
   d5b0e:	e00f      	b.n	d5b30 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5b10:	b124      	cbz	r4, d5b1c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5b12:	212e      	movs	r1, #46	; 0x2e
   d5b14:	4630      	mov	r0, r6
   d5b16:	f7ff fbd1 	bl	d52bc <_ZN5Print5printEc>
   d5b1a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5b1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5b20:	220a      	movs	r2, #10
   d5b22:	4630      	mov	r0, r6
   d5b24:	f7ff fbe3 	bl	d52ee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b28:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b2a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b2c:	d1f0      	bne.n	d5b10 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b2e:	4620      	mov	r0, r4
    }
    return n;
}
   d5b30:	b00d      	add	sp, #52	; 0x34
   d5b32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b34 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5b34:	b510      	push	{r4, lr}
   d5b36:	4b05      	ldr	r3, [pc, #20]	; (d5b4c <_ZN9IPAddressC1Ev+0x18>)
   d5b38:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5b3a:	2211      	movs	r2, #17
   d5b3c:	f840 3b04 	str.w	r3, [r0], #4
   d5b40:	2100      	movs	r1, #0
   d5b42:	f001 fe60 	bl	d7806 <memset>
{
    clear();
}
   d5b46:	4620      	mov	r0, r4
   d5b48:	bd10      	pop	{r4, pc}
   d5b4a:	bf00      	nop
   d5b4c:	000d7b20 	.word	0x000d7b20

000d5b50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5b50:	4603      	mov	r3, r0
   d5b52:	4a07      	ldr	r2, [pc, #28]	; (d5b70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5b54:	b510      	push	{r4, lr}
   d5b56:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5b5a:	f101 0210 	add.w	r2, r1, #16
   d5b5e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5b62:	f843 4b04 	str.w	r4, [r3], #4
   d5b66:	4291      	cmp	r1, r2
   d5b68:	d1f9      	bne.n	d5b5e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5b6a:	780a      	ldrb	r2, [r1, #0]
   d5b6c:	701a      	strb	r2, [r3, #0]
}
   d5b6e:	bd10      	pop	{r4, pc}
   d5b70:	000d7b20 	.word	0x000d7b20

000d5b74 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5b74:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5b76:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5b7a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5b7e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5b82:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5b86:	2304      	movs	r3, #4
   d5b88:	6041      	str	r1, [r0, #4]
   d5b8a:	7503      	strb	r3, [r0, #20]
   d5b8c:	bd10      	pop	{r4, pc}

000d5b8e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5b8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5b90:	780d      	ldrb	r5, [r1, #0]
   d5b92:	788b      	ldrb	r3, [r1, #2]
   d5b94:	784a      	ldrb	r2, [r1, #1]
   d5b96:	78c9      	ldrb	r1, [r1, #3]
   d5b98:	9100      	str	r1, [sp, #0]
   d5b9a:	4629      	mov	r1, r5
   d5b9c:	f7ff ffea 	bl	d5b74 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5ba0:	b003      	add	sp, #12
   d5ba2:	bd30      	pop	{r4, r5, pc}

000d5ba4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ba4:	7441      	strb	r1, [r0, #17]
   d5ba6:	4770      	bx	lr

000d5ba8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5ba8:	4770      	bx	lr

000d5baa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5baa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5bac:	2100      	movs	r1, #0
   d5bae:	7c00      	ldrb	r0, [r0, #16]
   d5bb0:	f7ff f9dc 	bl	d4f6c <HAL_USB_USART_Receive_Data>
}
   d5bb4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bb8:	bf28      	it	cs
   d5bba:	f04f 30ff 	movcs.w	r0, #4294967295
   d5bbe:	bd08      	pop	{r3, pc}

000d5bc0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5bc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5bc2:	2101      	movs	r1, #1
   d5bc4:	7c00      	ldrb	r0, [r0, #16]
   d5bc6:	f7ff f9d1 	bl	d4f6c <HAL_USB_USART_Receive_Data>
}
   d5bca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bce:	bf28      	it	cs
   d5bd0:	f04f 30ff 	movcs.w	r0, #4294967295
   d5bd4:	bd08      	pop	{r3, pc}

000d5bd6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5bd6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5bd8:	7c00      	ldrb	r0, [r0, #16]
   d5bda:	f7ff f9bf 	bl	d4f5c <HAL_USB_USART_Available_Data_For_Write>
}
   d5bde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5be2:	bd08      	pop	{r3, pc}

000d5be4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5be4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5be6:	7c00      	ldrb	r0, [r0, #16]
   d5be8:	f7ff f9b0 	bl	d4f4c <HAL_USB_USART_Available_Data>
}
   d5bec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bf0:	bd08      	pop	{r3, pc}

000d5bf2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5bf2:	7c00      	ldrb	r0, [r0, #16]
   d5bf4:	f7ff b9ca 	b.w	d4f8c <HAL_USB_USART_Flush_Data>

000d5bf8 <_ZN9USBSerialD0Ev>:
   d5bf8:	b510      	push	{r4, lr}
   d5bfa:	2114      	movs	r1, #20
   d5bfc:	4604      	mov	r4, r0
   d5bfe:	f000 fbe3 	bl	d63c8 <_ZdlPvj>
   d5c02:	4620      	mov	r0, r4
   d5c04:	bd10      	pop	{r4, pc}

000d5c06 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5c06:	b538      	push	{r3, r4, r5, lr}
   d5c08:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c0a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5c0c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c0e:	f7ff f9a5 	bl	d4f5c <HAL_USB_USART_Available_Data_For_Write>
   d5c12:	2800      	cmp	r0, #0
   d5c14:	dc01      	bgt.n	d5c1a <_ZN9USBSerial5writeEh+0x14>
   d5c16:	7c60      	ldrb	r0, [r4, #17]
   d5c18:	b128      	cbz	r0, d5c26 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5c1a:	4629      	mov	r1, r5
   d5c1c:	7c20      	ldrb	r0, [r4, #16]
   d5c1e:	f7ff f9ad 	bl	d4f7c <HAL_USB_USART_Send_Data>
   d5c22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5c26:	bd38      	pop	{r3, r4, r5, pc}

000d5c28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c28:	b510      	push	{r4, lr}
   d5c2a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5c2c:	2300      	movs	r3, #0
   d5c2e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c34:	60a3      	str	r3, [r4, #8]
   d5c36:	4b05      	ldr	r3, [pc, #20]	; (d5c4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5c38:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5c3a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c3c:	4608      	mov	r0, r1
{
  _serial = serial;
   d5c3e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5c40:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5c42:	4611      	mov	r1, r2
   d5c44:	f7ff f972 	bl	d4f2c <HAL_USB_USART_Init>
}
   d5c48:	4620      	mov	r0, r4
   d5c4a:	bd10      	pop	{r4, pc}
   d5c4c:	000d7b34 	.word	0x000d7b34

000d5c50 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5c50:	2200      	movs	r2, #0
   d5c52:	7c00      	ldrb	r0, [r0, #16]
   d5c54:	f7ff b972 	b.w	d4f3c <HAL_USB_USART_Begin>

000d5c58 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c58:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5c5a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c5c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5c5e:	2100      	movs	r1, #0
   d5c60:	f001 fdd1 	bl	d7806 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5c64:	4620      	mov	r0, r4
   d5c66:	bd10      	pop	{r4, pc}

000d5c68 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5c68:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c6a:	4d0e      	ldr	r5, [pc, #56]	; (d5ca4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5c6c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5c6e:	a801      	add	r0, sp, #4
   d5c70:	f7ff fff2 	bl	d5c58 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c74:	6829      	ldr	r1, [r5, #0]
   d5c76:	f011 0401 	ands.w	r4, r1, #1
   d5c7a:	d110      	bne.n	d5c9e <_Z16_fetch_usbserialv+0x36>
   d5c7c:	4628      	mov	r0, r5
   d5c7e:	f7fe fa12 	bl	d40a6 <__cxa_guard_acquire>
   d5c82:	b160      	cbz	r0, d5c9e <_Z16_fetch_usbserialv+0x36>
   d5c84:	aa01      	add	r2, sp, #4
   d5c86:	4621      	mov	r1, r4
   d5c88:	4807      	ldr	r0, [pc, #28]	; (d5ca8 <_Z16_fetch_usbserialv+0x40>)
   d5c8a:	f7ff ffcd 	bl	d5c28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c8e:	4628      	mov	r0, r5
   d5c90:	f7fe fa0e 	bl	d40b0 <__cxa_guard_release>
   d5c94:	4a05      	ldr	r2, [pc, #20]	; (d5cac <_Z16_fetch_usbserialv+0x44>)
   d5c96:	4906      	ldr	r1, [pc, #24]	; (d5cb0 <_Z16_fetch_usbserialv+0x48>)
   d5c98:	4803      	ldr	r0, [pc, #12]	; (d5ca8 <_Z16_fetch_usbserialv+0x40>)
   d5c9a:	f000 fb87 	bl	d63ac <__aeabi_atexit>
	return _usbserial;
}
   d5c9e:	4802      	ldr	r0, [pc, #8]	; (d5ca8 <_Z16_fetch_usbserialv+0x40>)
   d5ca0:	b007      	add	sp, #28
   d5ca2:	bd30      	pop	{r4, r5, pc}
   d5ca4:	2003e3e0 	.word	0x2003e3e0
   d5ca8:	2003e3e4 	.word	0x2003e3e4
   d5cac:	2003dda8 	.word	0x2003dda8
   d5cb0:	000d5ba9 	.word	0x000d5ba9

000d5cb4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5cb4:	2200      	movs	r2, #0
   d5cb6:	4611      	mov	r1, r2
   d5cb8:	6840      	ldr	r0, [r0, #4]
   d5cba:	f7ff b9bb 	b.w	d5034 <network_ready>

000d5cbe <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5cbe:	2200      	movs	r2, #0
   d5cc0:	4611      	mov	r1, r2
   d5cc2:	6840      	ldr	r0, [r0, #4]
   d5cc4:	f7ff b9d6 	b.w	d5074 <network_listening>

000d5cc8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5cc8:	2200      	movs	r2, #0
   d5cca:	4611      	mov	r1, r2
   d5ccc:	6840      	ldr	r0, [r0, #4]
   d5cce:	f7ff b9e1 	b.w	d5094 <network_get_listen_timeout>

000d5cd2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5cd2:	2200      	movs	r2, #0
   d5cd4:	6840      	ldr	r0, [r0, #4]
   d5cd6:	f7ff b9d5 	b.w	d5084 <network_set_listen_timeout>

000d5cda <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cda:	2200      	movs	r2, #0
   d5cdc:	f081 0101 	eor.w	r1, r1, #1
   d5ce0:	6840      	ldr	r0, [r0, #4]
   d5ce2:	f7ff b9bf 	b.w	d5064 <network_listen>

000d5ce6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5ce6:	2300      	movs	r3, #0
   d5ce8:	461a      	mov	r2, r3
   d5cea:	4619      	mov	r1, r3
   d5cec:	6840      	ldr	r0, [r0, #4]
   d5cee:	f7ff b9b1 	b.w	d5054 <network_off>

000d5cf2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5cf2:	2300      	movs	r3, #0
   d5cf4:	461a      	mov	r2, r3
   d5cf6:	4619      	mov	r1, r3
   d5cf8:	6840      	ldr	r0, [r0, #4]
   d5cfa:	f7ff b9a3 	b.w	d5044 <network_on>

000d5cfe <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5cfe:	2200      	movs	r2, #0
   d5d00:	4611      	mov	r1, r2
   d5d02:	6840      	ldr	r0, [r0, #4]
   d5d04:	f7ff b986 	b.w	d5014 <network_connecting>

000d5d08 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d08:	2200      	movs	r2, #0
   d5d0a:	2102      	movs	r1, #2
   d5d0c:	6840      	ldr	r0, [r0, #4]
   d5d0e:	f7ff b989 	b.w	d5024 <network_disconnect>

000d5d12 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5d12:	2300      	movs	r3, #0
   d5d14:	461a      	mov	r2, r3
   d5d16:	6840      	ldr	r0, [r0, #4]
   d5d18:	f7ff b974 	b.w	d5004 <network_connect>

000d5d1c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5d1c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5d1e:	4c08      	ldr	r4, [pc, #32]	; (d5d40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5d20:	2528      	movs	r5, #40	; 0x28
   d5d22:	462a      	mov	r2, r5
   d5d24:	2100      	movs	r1, #0
   d5d26:	4620      	mov	r0, r4
   d5d28:	f001 fd6d 	bl	d7806 <memset>
        cid = -1;
   d5d2c:	f04f 33ff 	mov.w	r3, #4294967295
   d5d30:	6063      	str	r3, [r4, #4]
   d5d32:	4b04      	ldr	r3, [pc, #16]	; (d5d44 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5d34:	8025      	strh	r5, [r4, #0]
   d5d36:	2204      	movs	r2, #4
   d5d38:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5d3a:	4a03      	ldr	r2, [pc, #12]	; (d5d48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5d3c:	601a      	str	r2, [r3, #0]
   d5d3e:	bd38      	pop	{r3, r4, r5, pc}
   d5d40:	2003e400 	.word	0x2003e400
   d5d44:	2003e3f8 	.word	0x2003e3f8
   d5d48:	000d7b64 	.word	0x000d7b64

000d5d4c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5d4c:	4770      	bx	lr

000d5d4e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5d4e:	7441      	strb	r1, [r0, #17]
   d5d50:	4770      	bx	lr

000d5d52 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5d52:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5d54:	7c00      	ldrb	r0, [r0, #16]
   d5d56:	f7ff f889 	bl	d4e6c <HAL_USART_Available_Data_For_Write>
}
   d5d5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d5e:	bd08      	pop	{r3, pc}

000d5d60 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5d60:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5d62:	7c00      	ldrb	r0, [r0, #16]
   d5d64:	f7ff f85a 	bl	d4e1c <HAL_USART_Available_Data>
}
   d5d68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d6c:	bd08      	pop	{r3, pc}

000d5d6e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5d6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5d70:	7c00      	ldrb	r0, [r0, #16]
   d5d72:	f7ff f863 	bl	d4e3c <HAL_USART_Peek_Data>
}
   d5d76:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d7a:	bf28      	it	cs
   d5d7c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5d80:	bd08      	pop	{r3, pc}

000d5d82 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5d82:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5d84:	7c00      	ldrb	r0, [r0, #16]
   d5d86:	f7ff f851 	bl	d4e2c <HAL_USART_Read_Data>
}
   d5d8a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d8e:	bf28      	it	cs
   d5d90:	f04f 30ff 	movcs.w	r0, #4294967295
   d5d94:	bd08      	pop	{r3, pc}

000d5d96 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5d96:	7c00      	ldrb	r0, [r0, #16]
   d5d98:	f7ff b858 	b.w	d4e4c <HAL_USART_Flush_Data>

000d5d9c <_ZN11USARTSerialD0Ev>:
   d5d9c:	b510      	push	{r4, lr}
   d5d9e:	2114      	movs	r1, #20
   d5da0:	4604      	mov	r4, r0
   d5da2:	f000 fb11 	bl	d63c8 <_ZdlPvj>
   d5da6:	4620      	mov	r0, r4
   d5da8:	bd10      	pop	{r4, pc}

000d5daa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5daa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5dac:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5dae:	4604      	mov	r4, r0
   d5db0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5db2:	b925      	cbnz	r5, d5dbe <_ZN11USARTSerial5writeEh+0x14>
   d5db4:	7c00      	ldrb	r0, [r0, #16]
   d5db6:	f7ff f859 	bl	d4e6c <HAL_USART_Available_Data_For_Write>
   d5dba:	2800      	cmp	r0, #0
   d5dbc:	dd05      	ble.n	d5dca <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5dbe:	4631      	mov	r1, r6
   d5dc0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5dc6:	f7ff b821 	b.w	d4e0c <HAL_USART_Write_Data>
  }
  return 0;
}
   d5dca:	4628      	mov	r0, r5
   d5dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5dd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5dd0:	b510      	push	{r4, lr}
   d5dd2:	4604      	mov	r4, r0
   d5dd4:	4608      	mov	r0, r1
   d5dd6:	4611      	mov	r1, r2
   d5dd8:	2200      	movs	r2, #0
   d5dda:	6062      	str	r2, [r4, #4]
   d5ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5de0:	60a2      	str	r2, [r4, #8]
   d5de2:	4a05      	ldr	r2, [pc, #20]	; (d5df8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5de4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5de6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5de8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5dea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5dec:	461a      	mov	r2, r3
   d5dee:	f7ff f805 	bl	d4dfc <HAL_USART_Init>
}
   d5df2:	4620      	mov	r0, r4
   d5df4:	bd10      	pop	{r4, pc}
   d5df6:	bf00      	nop
   d5df8:	000d7b98 	.word	0x000d7b98

000d5dfc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5dfc:	7c00      	ldrb	r0, [r0, #16]
   d5dfe:	f7ff b82d 	b.w	d4e5c <HAL_USART_Is_Enabled>
	...

000d5e04 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5e04:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5e06:	4d0c      	ldr	r5, [pc, #48]	; (d5e38 <_Z22__fetch_global_Serial1v+0x34>)
   d5e08:	6829      	ldr	r1, [r5, #0]
   d5e0a:	f011 0401 	ands.w	r4, r1, #1
   d5e0e:	d111      	bne.n	d5e34 <_Z22__fetch_global_Serial1v+0x30>
   d5e10:	4628      	mov	r0, r5
   d5e12:	f7fe f948 	bl	d40a6 <__cxa_guard_acquire>
   d5e16:	b168      	cbz	r0, d5e34 <_Z22__fetch_global_Serial1v+0x30>
   d5e18:	4a08      	ldr	r2, [pc, #32]	; (d5e3c <_Z22__fetch_global_Serial1v+0x38>)
   d5e1a:	4b09      	ldr	r3, [pc, #36]	; (d5e40 <_Z22__fetch_global_Serial1v+0x3c>)
   d5e1c:	4809      	ldr	r0, [pc, #36]	; (d5e44 <_Z22__fetch_global_Serial1v+0x40>)
   d5e1e:	4621      	mov	r1, r4
   d5e20:	f7ff ffd6 	bl	d5dd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5e24:	4628      	mov	r0, r5
   d5e26:	f7fe f943 	bl	d40b0 <__cxa_guard_release>
   d5e2a:	4a07      	ldr	r2, [pc, #28]	; (d5e48 <_Z22__fetch_global_Serial1v+0x44>)
   d5e2c:	4907      	ldr	r1, [pc, #28]	; (d5e4c <_Z22__fetch_global_Serial1v+0x48>)
   d5e2e:	4805      	ldr	r0, [pc, #20]	; (d5e44 <_Z22__fetch_global_Serial1v+0x40>)
   d5e30:	f000 fabc 	bl	d63ac <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5e34:	4803      	ldr	r0, [pc, #12]	; (d5e44 <_Z22__fetch_global_Serial1v+0x40>)
   d5e36:	bd38      	pop	{r3, r4, r5, pc}
   d5e38:	2003e4c0 	.word	0x2003e4c0
   d5e3c:	2003e4c4 	.word	0x2003e4c4
   d5e40:	2003e43c 	.word	0x2003e43c
   d5e44:	2003e428 	.word	0x2003e428
   d5e48:	2003dda8 	.word	0x2003dda8
   d5e4c:	000d5d4d 	.word	0x000d5d4d

000d5e50 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5e50:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e52:	6883      	ldr	r3, [r0, #8]
   d5e54:	4604      	mov	r4, r0
   d5e56:	b90b      	cbnz	r3, d5e5c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5e58:	f000 fac9 	bl	d63ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e5c:	68c3      	ldr	r3, [r0, #12]
   d5e5e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5e60:	68a3      	ldr	r3, [r4, #8]
   d5e62:	b11b      	cbz	r3, d5e6c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e64:	2203      	movs	r2, #3
   d5e66:	4621      	mov	r1, r4
   d5e68:	4620      	mov	r0, r4
   d5e6a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5e6c:	4620      	mov	r0, r4
   d5e6e:	2110      	movs	r1, #16
}
   d5e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5e74:	f000 baa8 	b.w	d63c8 <_ZdlPvj>

000d5e78 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5e78:	4770      	bx	lr

000d5e7a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e7c:	4606      	mov	r6, r0
   d5e7e:	4615      	mov	r5, r2
   d5e80:	460c      	mov	r4, r1
   d5e82:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5e84:	42bc      	cmp	r4, r7
   d5e86:	d006      	beq.n	d5e96 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5e88:	6833      	ldr	r3, [r6, #0]
   d5e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5e8e:	689b      	ldr	r3, [r3, #8]
   d5e90:	4630      	mov	r0, r6
   d5e92:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5e94:	e7f6      	b.n	d5e84 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5e96:	4628      	mov	r0, r5
   d5e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e9a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5e9a:	2200      	movs	r2, #0
   d5e9c:	7c00      	ldrb	r0, [r0, #16]
   d5e9e:	f7ff b805 	b.w	d4eac <HAL_I2C_Write_Data>

000d5ea2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5ea2:	2100      	movs	r1, #0
   d5ea4:	7c00      	ldrb	r0, [r0, #16]
   d5ea6:	f7ff b809 	b.w	d4ebc <HAL_I2C_Available_Data>

000d5eaa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5eaa:	2100      	movs	r1, #0
   d5eac:	7c00      	ldrb	r0, [r0, #16]
   d5eae:	f7ff b80d 	b.w	d4ecc <HAL_I2C_Read_Data>

000d5eb2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5eb2:	2100      	movs	r1, #0
   d5eb4:	7c00      	ldrb	r0, [r0, #16]
   d5eb6:	f7ff b811 	b.w	d4edc <HAL_I2C_Peek_Data>

000d5eba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5eba:	2100      	movs	r1, #0
   d5ebc:	7c00      	ldrb	r0, [r0, #16]
   d5ebe:	f7ff b815 	b.w	d4eec <HAL_I2C_Flush_Data>

000d5ec2 <_ZN7TwoWireD0Ev>:
   d5ec2:	b510      	push	{r4, lr}
   d5ec4:	2114      	movs	r1, #20
   d5ec6:	4604      	mov	r4, r0
   d5ec8:	f000 fa7e 	bl	d63c8 <_ZdlPvj>
   d5ecc:	4620      	mov	r0, r4
   d5ece:	bd10      	pop	{r4, pc}

000d5ed0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5ed0:	b510      	push	{r4, lr}
   d5ed2:	4604      	mov	r4, r0
   d5ed4:	2300      	movs	r3, #0
   d5ed6:	6063      	str	r3, [r4, #4]
   d5ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5edc:	60a3      	str	r3, [r4, #8]
   d5ede:	4b04      	ldr	r3, [pc, #16]	; (d5ef0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5ee0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5ee2:	4608      	mov	r0, r1
   d5ee4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5ee6:	4611      	mov	r1, r2
   d5ee8:	f7ff f810 	bl	d4f0c <HAL_I2C_Init>
}
   d5eec:	4620      	mov	r0, r4
   d5eee:	bd10      	pop	{r4, pc}
   d5ef0:	000d7bc8 	.word	0x000d7bc8

000d5ef4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5ef4:	2300      	movs	r3, #0
   d5ef6:	461a      	mov	r2, r3
   d5ef8:	4619      	mov	r1, r3
   d5efa:	7c00      	ldrb	r0, [r0, #16]
   d5efc:	f7fe bfbe 	b.w	d4e7c <HAL_I2C_Begin>

000d5f00 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5f00:	b570      	push	{r4, r5, r6, lr}
   d5f02:	460c      	mov	r4, r1
   d5f04:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5f06:	2514      	movs	r5, #20
   d5f08:	4606      	mov	r6, r0
   d5f0a:	462a      	mov	r2, r5
   d5f0c:	2100      	movs	r1, #0
   d5f0e:	a801      	add	r0, sp, #4
   d5f10:	f001 fc79 	bl	d7806 <memset>
   d5f14:	7823      	ldrb	r3, [r4, #0]
   d5f16:	f88d 3008 	strb.w	r3, [sp, #8]
   d5f1a:	6863      	ldr	r3, [r4, #4]
   d5f1c:	9303      	str	r3, [sp, #12]
   d5f1e:	68e3      	ldr	r3, [r4, #12]
   d5f20:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5f22:	2200      	movs	r2, #0
   d5f24:	7a23      	ldrb	r3, [r4, #8]
   d5f26:	7c30      	ldrb	r0, [r6, #16]
   d5f28:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5f2c:	a901      	add	r1, sp, #4
   d5f2e:	9305      	str	r3, [sp, #20]
   d5f30:	f7fe fff4 	bl	d4f1c <HAL_I2C_Request_Data_Ex>
}
   d5f34:	b006      	add	sp, #24
   d5f36:	bd70      	pop	{r4, r5, r6, pc}

000d5f38 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5f3a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5f3c:	f88d 1000 	strb.w	r1, [sp]
   d5f40:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5f44:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5f46:	bf18      	it	ne
   d5f48:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5f4a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5f4c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5f4e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5f52:	f7ff ffd5 	bl	d5f00 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5f56:	b005      	add	sp, #20
   d5f58:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f5c <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5f5c:	2200      	movs	r2, #0
   d5f5e:	7c00      	ldrb	r0, [r0, #16]
   d5f60:	f7fe bf94 	b.w	d4e8c <HAL_I2C_Begin_Transmission>

000d5f64 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5f64:	b2c9      	uxtb	r1, r1
   d5f66:	f7ff bff9 	b.w	d5f5c <_ZN7TwoWire17beginTransmissionEh>

000d5f6a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5f6a:	2200      	movs	r2, #0
   d5f6c:	7c00      	ldrb	r0, [r0, #16]
   d5f6e:	f7fe bf95 	b.w	d4e9c <HAL_I2C_End_Transmission>

000d5f72 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5f72:	2100      	movs	r1, #0
   d5f74:	7c00      	ldrb	r0, [r0, #16]
   d5f76:	f7fe bfc1 	b.w	d4efc <HAL_I2C_Is_Enabled>

000d5f7a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f7a:	2200      	movs	r2, #0
   d5f7c:	4611      	mov	r1, r2
   d5f7e:	6840      	ldr	r0, [r0, #4]
   d5f80:	f7ff b878 	b.w	d5074 <network_listening>

000d5f84 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5f84:	2200      	movs	r2, #0
   d5f86:	4611      	mov	r1, r2
   d5f88:	6840      	ldr	r0, [r0, #4]
   d5f8a:	f7ff b883 	b.w	d5094 <network_get_listen_timeout>

000d5f8e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5f8e:	2200      	movs	r2, #0
   d5f90:	6840      	ldr	r0, [r0, #4]
   d5f92:	f7ff b877 	b.w	d5084 <network_set_listen_timeout>

000d5f96 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f96:	2200      	movs	r2, #0
   d5f98:	f081 0101 	eor.w	r1, r1, #1
   d5f9c:	6840      	ldr	r0, [r0, #4]
   d5f9e:	f7ff b861 	b.w	d5064 <network_listen>

000d5fa2 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5fa2:	2300      	movs	r3, #0
   d5fa4:	461a      	mov	r2, r3
   d5fa6:	2101      	movs	r1, #1
   d5fa8:	6840      	ldr	r0, [r0, #4]
   d5faa:	f7ff b853 	b.w	d5054 <network_off>

000d5fae <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5fae:	2300      	movs	r3, #0
   d5fb0:	461a      	mov	r2, r3
   d5fb2:	4619      	mov	r1, r3
   d5fb4:	6840      	ldr	r0, [r0, #4]
   d5fb6:	f7ff b845 	b.w	d5044 <network_on>

000d5fba <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5fba:	2200      	movs	r2, #0
   d5fbc:	4611      	mov	r1, r2
   d5fbe:	6840      	ldr	r0, [r0, #4]
   d5fc0:	f7ff b838 	b.w	d5034 <network_ready>

000d5fc4 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5fc4:	2200      	movs	r2, #0
   d5fc6:	4611      	mov	r1, r2
   d5fc8:	6840      	ldr	r0, [r0, #4]
   d5fca:	f7ff b823 	b.w	d5014 <network_connecting>

000d5fce <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5fce:	2200      	movs	r2, #0
   d5fd0:	2102      	movs	r1, #2
   d5fd2:	6840      	ldr	r0, [r0, #4]
   d5fd4:	f7ff b826 	b.w	d5024 <network_disconnect>

000d5fd8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5fd8:	2300      	movs	r3, #0
   d5fda:	461a      	mov	r2, r3
   d5fdc:	6840      	ldr	r0, [r0, #4]
   d5fde:	f7ff b811 	b.w	d5004 <network_connect>

000d5fe2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5fe2:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5fe4:	4605      	mov	r5, r0
   d5fe6:	b188      	cbz	r0, d600c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fe8:	6804      	ldr	r4, [r0, #0]
   d5fea:	b14c      	cbz	r4, d6000 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5fec:	68a3      	ldr	r3, [r4, #8]
   d5fee:	b11b      	cbz	r3, d5ff8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5ff0:	2203      	movs	r2, #3
   d5ff2:	4621      	mov	r1, r4
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5ff8:	2110      	movs	r1, #16
   d5ffa:	4620      	mov	r0, r4
   d5ffc:	f000 f9e4 	bl	d63c8 <_ZdlPvj>
   d6000:	4628      	mov	r0, r5
   d6002:	2114      	movs	r1, #20
      }
   d6004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6008:	f000 b9de 	b.w	d63c8 <_ZdlPvj>
   d600c:	bd38      	pop	{r3, r4, r5, pc}

000d600e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d600e:	b110      	cbz	r0, d6016 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6010:	6803      	ldr	r3, [r0, #0]
   d6012:	685b      	ldr	r3, [r3, #4]
   d6014:	4718      	bx	r3
   d6016:	4770      	bx	lr

000d6018 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6018:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d601a:	6803      	ldr	r3, [r0, #0]
   d601c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d601e:	b1bb      	cbz	r3, d6050 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6020:	6858      	ldr	r0, [r3, #4]
   d6022:	f7fe febb 	bl	d4d9c <os_thread_is_current>
   d6026:	b978      	cbnz	r0, d6048 <_ZN6ThreadD1Ev+0x30>
   d6028:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d602a:	7c5a      	ldrb	r2, [r3, #17]
   d602c:	b912      	cbnz	r2, d6034 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d602e:	6858      	ldr	r0, [r3, #4]
   d6030:	f7fe febc 	bl	d4dac <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6034:	6823      	ldr	r3, [r4, #0]
   d6036:	6858      	ldr	r0, [r3, #4]
   d6038:	f7fe fec0 	bl	d4dbc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d603c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d603e:	2300      	movs	r3, #0
   d6040:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6042:	b128      	cbz	r0, d6050 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6044:	f7ff ffcd 	bl	d5fe2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6048:	6820      	ldr	r0, [r4, #0]
   d604a:	b108      	cbz	r0, d6050 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d604c:	f7ff ffc9 	bl	d5fe2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6050:	4620      	mov	r0, r4
   d6052:	bd10      	pop	{r4, pc}

000d6054 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6054:	b538      	push	{r3, r4, r5, lr}
   d6056:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6058:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d605c:	b108      	cbz	r0, d6062 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d605e:	f7fe f820 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6062:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6066:	b108      	cbz	r0, d606c <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6068:	f7fe feb8 	bl	d4ddc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d606c:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6070:	b135      	cbz	r5, d6080 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6072:	4628      	mov	r0, r5
   d6074:	f7ff ffd0 	bl	d6018 <_ZN6ThreadD1Ev>
   d6078:	2104      	movs	r1, #4
   d607a:	4628      	mov	r0, r5
   d607c:	f000 f9a4 	bl	d63c8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6080:	6820      	ldr	r0, [r4, #0]
   d6082:	b108      	cbz	r0, d6088 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6084:	f7ff ffc3 	bl	d600e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6088:	4620      	mov	r0, r4
   d608a:	bd38      	pop	{r3, r4, r5, pc}

000d608c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d608c:	b510      	push	{r4, lr}
   d608e:	4b04      	ldr	r3, [pc, #16]	; (d60a0 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6090:	4604      	mov	r4, r0
   d6092:	f840 3b08 	str.w	r3, [r0], #8
   d6096:	f7ff ffdd 	bl	d6054 <_ZN5spark11MeshPublishD1Ev>
   d609a:	4620      	mov	r0, r4
   d609c:	bd10      	pop	{r4, pc}
   d609e:	bf00      	nop
   d60a0:	000d7bf0 	.word	0x000d7bf0

000d60a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d60a4:	b538      	push	{r3, r4, r5, lr}
   d60a6:	4c0e      	ldr	r4, [pc, #56]	; (d60e0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d60a8:	4b0e      	ldr	r3, [pc, #56]	; (d60e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d60aa:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d60ac:	2500      	movs	r5, #0
   d60ae:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d60b0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d60b4:	6063      	str	r3, [r4, #4]
   d60b6:	60a5      	str	r5, [r4, #8]
   d60b8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d60bc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d60c0:	f7fe fe84 	bl	d4dcc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d60c4:	4b08      	ldr	r3, [pc, #32]	; (d60e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d60c6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d60ca:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d60ce:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d60d0:	4620      	mov	r0, r4
   d60d2:	4a06      	ldr	r2, [pc, #24]	; (d60ec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d60d4:	4906      	ldr	r1, [pc, #24]	; (d60f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d60d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d60da:	f000 b967 	b.w	d63ac <__aeabi_atexit>
   d60de:	bf00      	nop
   d60e0:	2003e548 	.word	0x2003e548
   d60e4:	000d7c24 	.word	0x000d7c24
   d60e8:	000d7bf0 	.word	0x000d7bf0
   d60ec:	2003dda8 	.word	0x2003dda8
   d60f0:	000d608d 	.word	0x000d608d

000d60f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d60f4:	2300      	movs	r3, #0
   d60f6:	461a      	mov	r2, r3
   d60f8:	6840      	ldr	r0, [r0, #4]
   d60fa:	f7fe bf83 	b.w	d5004 <network_connect>

000d60fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d60fe:	2200      	movs	r2, #0
   d6100:	2102      	movs	r1, #2
   d6102:	6840      	ldr	r0, [r0, #4]
   d6104:	f7fe bf8e 	b.w	d5024 <network_disconnect>

000d6108 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6108:	2200      	movs	r2, #0
   d610a:	4611      	mov	r1, r2
   d610c:	6840      	ldr	r0, [r0, #4]
   d610e:	f7fe bf81 	b.w	d5014 <network_connecting>

000d6112 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6112:	2200      	movs	r2, #0
   d6114:	4611      	mov	r1, r2
   d6116:	6840      	ldr	r0, [r0, #4]
   d6118:	f7fe bf8c 	b.w	d5034 <network_ready>

000d611c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d611c:	2300      	movs	r3, #0
   d611e:	461a      	mov	r2, r3
   d6120:	4619      	mov	r1, r3
   d6122:	6840      	ldr	r0, [r0, #4]
   d6124:	f7fe bf8e 	b.w	d5044 <network_on>

000d6128 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6128:	2300      	movs	r3, #0
   d612a:	461a      	mov	r2, r3
   d612c:	4619      	mov	r1, r3
   d612e:	6840      	ldr	r0, [r0, #4]
   d6130:	f7fe bf90 	b.w	d5054 <network_off>

000d6134 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6134:	2200      	movs	r2, #0
   d6136:	f081 0101 	eor.w	r1, r1, #1
   d613a:	6840      	ldr	r0, [r0, #4]
   d613c:	f7fe bf92 	b.w	d5064 <network_listen>

000d6140 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6140:	2200      	movs	r2, #0
   d6142:	6840      	ldr	r0, [r0, #4]
   d6144:	f7fe bf9e 	b.w	d5084 <network_set_listen_timeout>

000d6148 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6148:	2200      	movs	r2, #0
   d614a:	4611      	mov	r1, r2
   d614c:	6840      	ldr	r0, [r0, #4]
   d614e:	f7fe bfa1 	b.w	d5094 <network_get_listen_timeout>

000d6152 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6152:	2200      	movs	r2, #0
   d6154:	4611      	mov	r1, r2
   d6156:	6840      	ldr	r0, [r0, #4]
   d6158:	f7fe bf8c 	b.w	d5074 <network_listening>

000d615c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d615c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6160:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6162:	b095      	sub	sp, #84	; 0x54
   d6164:	4616      	mov	r6, r2
   d6166:	460d      	mov	r5, r1
   d6168:	4607      	mov	r7, r0
    IPAddress addr;
   d616a:	f7ff fce3 	bl	d5b34 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d616e:	4621      	mov	r1, r4
   d6170:	2220      	movs	r2, #32
   d6172:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6174:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6176:	f001 fb46 	bl	d7806 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d617a:	2340      	movs	r3, #64	; 0x40
   d617c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d617e:	4621      	mov	r1, r4
   d6180:	466b      	mov	r3, sp
   d6182:	aa0c      	add	r2, sp, #48	; 0x30
   d6184:	4630      	mov	r0, r6
   d6186:	f7fe fdb1 	bl	d4cec <netdb_getaddrinfo>
    if (!r) {
   d618a:	4604      	mov	r4, r0
   d618c:	2800      	cmp	r0, #0
   d618e:	d144      	bne.n	d621a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6190:	4602      	mov	r2, r0
   d6192:	2101      	movs	r1, #1
   d6194:	6868      	ldr	r0, [r5, #4]
   d6196:	f7fe ff4d 	bl	d5034 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d619a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d619c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d619e:	4622      	mov	r2, r4
   d61a0:	6868      	ldr	r0, [r5, #4]
   d61a2:	f7fe ff47 	bl	d5034 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d61a6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61a8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d61aa:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d61ac:	2e00      	cmp	r6, #0
   d61ae:	d034      	beq.n	d621a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d61b0:	2900      	cmp	r1, #0
   d61b2:	d132      	bne.n	d621a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d61b4:	6873      	ldr	r3, [r6, #4]
   d61b6:	2b02      	cmp	r3, #2
   d61b8:	d002      	beq.n	d61c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d61ba:	2b0a      	cmp	r3, #10
   d61bc:	d009      	beq.n	d61d2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d61be:	e02a      	b.n	d6216 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d61c0:	f1b8 0f00 	cmp.w	r8, #0
   d61c4:	d027      	beq.n	d6216 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d61c6:	6971      	ldr	r1, [r6, #20]
   d61c8:	4638      	mov	r0, r7
   d61ca:	3104      	adds	r1, #4
   d61cc:	f7ff fcdf 	bl	d5b8e <_ZN9IPAddressaSEPKh>
   d61d0:	e020      	b.n	d6214 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d61d2:	f1b9 0f00 	cmp.w	r9, #0
   d61d6:	d01e      	beq.n	d6216 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d61d8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d61da:	2211      	movs	r2, #17
   d61dc:	a801      	add	r0, sp, #4
   d61de:	f001 fb12 	bl	d7806 <memset>
                    a.v = 6;
   d61e2:	2306      	movs	r3, #6
   d61e4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d61e8:	ad01      	add	r5, sp, #4
   d61ea:	f104 0308 	add.w	r3, r4, #8
   d61ee:	3418      	adds	r4, #24
   d61f0:	6818      	ldr	r0, [r3, #0]
   d61f2:	6859      	ldr	r1, [r3, #4]
   d61f4:	462a      	mov	r2, r5
   d61f6:	c203      	stmia	r2!, {r0, r1}
   d61f8:	3308      	adds	r3, #8
   d61fa:	42a3      	cmp	r3, r4
   d61fc:	4615      	mov	r5, r2
   d61fe:	d1f7      	bne.n	d61f0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6200:	a901      	add	r1, sp, #4
   d6202:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6204:	ad07      	add	r5, sp, #28
   d6206:	f7ff fca3 	bl	d5b50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d620a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d620c:	1d3c      	adds	r4, r7, #4
   d620e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6210:	682b      	ldr	r3, [r5, #0]
   d6212:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6214:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6216:	69f6      	ldr	r6, [r6, #28]
   d6218:	e7c8      	b.n	d61ac <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d621a:	9800      	ldr	r0, [sp, #0]
   d621c:	f7fe fd5e 	bl	d4cdc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6220:	4638      	mov	r0, r7
   d6222:	b015      	add	sp, #84	; 0x54
   d6224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6228 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6228:	4b02      	ldr	r3, [pc, #8]	; (d6234 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d622a:	4a03      	ldr	r2, [pc, #12]	; (d6238 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d622c:	601a      	str	r2, [r3, #0]
   d622e:	2200      	movs	r2, #0
   d6230:	605a      	str	r2, [r3, #4]
   d6232:	4770      	bx	lr
   d6234:	2003e71c 	.word	0x2003e71c
   d6238:	000d7c24 	.word	0x000d7c24

000d623c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d623c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d623e:	4e18      	ldr	r6, [pc, #96]	; (d62a0 <pinAvailable+0x64>)
   d6240:	6831      	ldr	r1, [r6, #0]
   d6242:	f011 0501 	ands.w	r5, r1, #1
   d6246:	4604      	mov	r4, r0
   d6248:	d10a      	bne.n	d6260 <pinAvailable+0x24>
   d624a:	4630      	mov	r0, r6
   d624c:	f7fd ff2b 	bl	d40a6 <__cxa_guard_acquire>
   d6250:	b130      	cbz	r0, d6260 <pinAvailable+0x24>
   d6252:	4629      	mov	r1, r5
   d6254:	4813      	ldr	r0, [pc, #76]	; (d62a4 <pinAvailable+0x68>)
   d6256:	f7fe ffbb 	bl	d51d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d625a:	4630      	mov	r0, r6
   d625c:	f7fd ff28 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6260:	4810      	ldr	r0, [pc, #64]	; (d62a4 <pinAvailable+0x68>)
   d6262:	f7fe ffbf 	bl	d51e4 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6266:	b128      	cbz	r0, d6274 <pinAvailable+0x38>
   d6268:	f1a4 030b 	sub.w	r3, r4, #11
   d626c:	2b02      	cmp	r3, #2
   d626e:	d801      	bhi.n	d6274 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6270:	2000      	movs	r0, #0
   d6272:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6274:	f000 f874 	bl	d6360 <_Z19__fetch_global_Wirev>
   d6278:	f7ff fe7b 	bl	d5f72 <_ZN7TwoWire9isEnabledEv>
   d627c:	b108      	cbz	r0, d6282 <pinAvailable+0x46>
   d627e:	2c01      	cmp	r4, #1
   d6280:	d9f6      	bls.n	d6270 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6282:	f7ff fdbf 	bl	d5e04 <_Z22__fetch_global_Serial1v>
   d6286:	f7ff fdb9 	bl	d5dfc <_ZN11USARTSerial9isEnabledEv>
   d628a:	b118      	cbz	r0, d6294 <pinAvailable+0x58>
   d628c:	f1a4 0309 	sub.w	r3, r4, #9
   d6290:	2b01      	cmp	r3, #1
   d6292:	d9ed      	bls.n	d6270 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6294:	2c23      	cmp	r4, #35	; 0x23
   d6296:	bf8c      	ite	hi
   d6298:	2000      	movhi	r0, #0
   d629a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d629c:	bd70      	pop	{r4, r5, r6, pc}
   d629e:	bf00      	nop
   d62a0:	2003e724 	.word	0x2003e724
   d62a4:	2003e728 	.word	0x2003e728

000d62a8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62a8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d62aa:	b538      	push	{r3, r4, r5, lr}
   d62ac:	4604      	mov	r4, r0
   d62ae:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62b0:	d80a      	bhi.n	d62c8 <pinMode+0x20>
   d62b2:	29ff      	cmp	r1, #255	; 0xff
   d62b4:	d008      	beq.n	d62c8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d62b6:	f7ff ffc1 	bl	d623c <pinAvailable>
   d62ba:	b128      	cbz	r0, d62c8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62bc:	4629      	mov	r1, r5
   d62be:	4620      	mov	r0, r4
}
   d62c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62c4:	f7fe bd2a 	b.w	d4d1c <HAL_Pin_Mode>
   d62c8:	bd38      	pop	{r3, r4, r5, pc}

000d62ca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d62ca:	b538      	push	{r3, r4, r5, lr}
   d62cc:	4604      	mov	r4, r0
   d62ce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d62d0:	f7fe fd2c 	bl	d4d2c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d62d4:	28ff      	cmp	r0, #255	; 0xff
   d62d6:	d010      	beq.n	d62fa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d62d8:	2806      	cmp	r0, #6
   d62da:	d804      	bhi.n	d62e6 <digitalWrite+0x1c>
   d62dc:	234d      	movs	r3, #77	; 0x4d
   d62de:	fa23 f000 	lsr.w	r0, r3, r0
   d62e2:	07c3      	lsls	r3, r0, #31
   d62e4:	d409      	bmi.n	d62fa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d62e6:	4620      	mov	r0, r4
   d62e8:	f7ff ffa8 	bl	d623c <pinAvailable>
   d62ec:	b128      	cbz	r0, d62fa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d62ee:	4629      	mov	r1, r5
   d62f0:	4620      	mov	r0, r4
}
   d62f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d62f6:	f7fe bd21 	b.w	d4d3c <HAL_GPIO_Write>
   d62fa:	bd38      	pop	{r3, r4, r5, pc}

000d62fc <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d62fc:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d62fe:	b510      	push	{r4, lr}
   d6300:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6302:	bf9c      	itt	ls
   d6304:	340e      	addls	r4, #14
   d6306:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6308:	4620      	mov	r0, r4
   d630a:	f7ff ff97 	bl	d623c <pinAvailable>
   d630e:	b150      	cbz	r0, d6326 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6310:	2103      	movs	r1, #3
   d6312:	4620      	mov	r0, r4
   d6314:	f7fe fcfa 	bl	d4d0c <HAL_Validate_Pin_Function>
   d6318:	2803      	cmp	r0, #3
   d631a:	d104      	bne.n	d6326 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d631c:	4620      	mov	r0, r4
}
   d631e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6322:	f7fe bd13 	b.w	d4d4c <HAL_ADC_Read>
}
   d6326:	2000      	movs	r0, #0
   d6328:	bd10      	pop	{r4, pc}
	...

000d632c <_Z17acquireWireBufferv>:
   d632c:	b570      	push	{r4, r5, r6, lr}
   d632e:	4604      	mov	r4, r0
   d6330:	2514      	movs	r5, #20
   d6332:	462a      	mov	r2, r5
   d6334:	4e09      	ldr	r6, [pc, #36]	; (d635c <_Z17acquireWireBufferv+0x30>)
   d6336:	2100      	movs	r1, #0
   d6338:	f001 fa65 	bl	d7806 <memset>
   d633c:	8025      	strh	r5, [r4, #0]
   d633e:	2520      	movs	r5, #32
   d6340:	4631      	mov	r1, r6
   d6342:	60a5      	str	r5, [r4, #8]
   d6344:	6125      	str	r5, [r4, #16]
   d6346:	4628      	mov	r0, r5
   d6348:	f000 f840 	bl	d63cc <_ZnajRKSt9nothrow_t>
   d634c:	4631      	mov	r1, r6
   d634e:	6060      	str	r0, [r4, #4]
   d6350:	4628      	mov	r0, r5
   d6352:	f000 f83b 	bl	d63cc <_ZnajRKSt9nothrow_t>
   d6356:	60e0      	str	r0, [r4, #12]
   d6358:	4620      	mov	r0, r4
   d635a:	bd70      	pop	{r4, r5, r6, pc}
   d635c:	000d7c50 	.word	0x000d7c50

000d6360 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6360:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6362:	4d0e      	ldr	r5, [pc, #56]	; (d639c <_Z19__fetch_global_Wirev+0x3c>)
   d6364:	6829      	ldr	r1, [r5, #0]
   d6366:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d636a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d636c:	d113      	bne.n	d6396 <_Z19__fetch_global_Wirev+0x36>
   d636e:	4628      	mov	r0, r5
   d6370:	f7fd fe99 	bl	d40a6 <__cxa_guard_acquire>
   d6374:	b178      	cbz	r0, d6396 <_Z19__fetch_global_Wirev+0x36>
   d6376:	a801      	add	r0, sp, #4
   d6378:	f7ff ffd8 	bl	d632c <_Z17acquireWireBufferv>
   d637c:	aa01      	add	r2, sp, #4
   d637e:	4621      	mov	r1, r4
   d6380:	4807      	ldr	r0, [pc, #28]	; (d63a0 <_Z19__fetch_global_Wirev+0x40>)
   d6382:	f7ff fda5 	bl	d5ed0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6386:	4628      	mov	r0, r5
   d6388:	f7fd fe92 	bl	d40b0 <__cxa_guard_release>
   d638c:	4a05      	ldr	r2, [pc, #20]	; (d63a4 <_Z19__fetch_global_Wirev+0x44>)
   d638e:	4906      	ldr	r1, [pc, #24]	; (d63a8 <_Z19__fetch_global_Wirev+0x48>)
   d6390:	4803      	ldr	r0, [pc, #12]	; (d63a0 <_Z19__fetch_global_Wirev+0x40>)
   d6392:	f000 f80b 	bl	d63ac <__aeabi_atexit>
	return wire;
}
   d6396:	4802      	ldr	r0, [pc, #8]	; (d63a0 <_Z19__fetch_global_Wirev+0x40>)
   d6398:	b007      	add	sp, #28
   d639a:	bd30      	pop	{r4, r5, pc}
   d639c:	2003e734 	.word	0x2003e734
   d63a0:	2003e738 	.word	0x2003e738
   d63a4:	2003dda8 	.word	0x2003dda8
   d63a8:	000d5e79 	.word	0x000d5e79

000d63ac <__aeabi_atexit>:
   d63ac:	460b      	mov	r3, r1
   d63ae:	4601      	mov	r1, r0
   d63b0:	4618      	mov	r0, r3
   d63b2:	f001 ba0f 	b.w	d77d4 <__cxa_atexit>
	...

000d63b8 <_ZSt15get_new_handlerv>:
   d63b8:	4b02      	ldr	r3, [pc, #8]	; (d63c4 <_ZSt15get_new_handlerv+0xc>)
   d63ba:	6818      	ldr	r0, [r3, #0]
   d63bc:	f3bf 8f5f 	dmb	sy
   d63c0:	4770      	bx	lr
   d63c2:	bf00      	nop
   d63c4:	2003e74c 	.word	0x2003e74c

000d63c8 <_ZdlPvj>:
   d63c8:	f7fd be69 	b.w	d409e <_ZdlPv>

000d63cc <_ZnajRKSt9nothrow_t>:
   d63cc:	f000 b800 	b.w	d63d0 <_ZnwjRKSt9nothrow_t>

000d63d0 <_ZnwjRKSt9nothrow_t>:
   d63d0:	b510      	push	{r4, lr}
   d63d2:	2800      	cmp	r0, #0
   d63d4:	bf14      	ite	ne
   d63d6:	4604      	movne	r4, r0
   d63d8:	2401      	moveq	r4, #1
   d63da:	4620      	mov	r0, r4
   d63dc:	f7fe fe82 	bl	d50e4 <malloc>
   d63e0:	b920      	cbnz	r0, d63ec <_ZnwjRKSt9nothrow_t+0x1c>
   d63e2:	f7ff ffe9 	bl	d63b8 <_ZSt15get_new_handlerv>
   d63e6:	b108      	cbz	r0, d63ec <_ZnwjRKSt9nothrow_t+0x1c>
   d63e8:	4780      	blx	r0
   d63ea:	e7f6      	b.n	d63da <_ZnwjRKSt9nothrow_t+0xa>
   d63ec:	bd10      	pop	{r4, pc}

000d63ee <_ZSt25__throw_bad_function_callv>:
   d63ee:	b508      	push	{r3, lr}
   d63f0:	f7fe fe98 	bl	d5124 <abort>

000d63f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d63f4:	4b18      	ldr	r3, [pc, #96]	; (d6458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d63f6:	681a      	ldr	r2, [r3, #0]
   d63f8:	07d1      	lsls	r1, r2, #31
   d63fa:	bf5c      	itt	pl
   d63fc:	2201      	movpl	r2, #1
   d63fe:	601a      	strpl	r2, [r3, #0]
   d6400:	4b16      	ldr	r3, [pc, #88]	; (d645c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6402:	681a      	ldr	r2, [r3, #0]
   d6404:	07d2      	lsls	r2, r2, #31
   d6406:	bf5c      	itt	pl
   d6408:	2201      	movpl	r2, #1
   d640a:	601a      	strpl	r2, [r3, #0]
   d640c:	4b14      	ldr	r3, [pc, #80]	; (d6460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d640e:	681a      	ldr	r2, [r3, #0]
   d6410:	07d0      	lsls	r0, r2, #31
   d6412:	bf5c      	itt	pl
   d6414:	2201      	movpl	r2, #1
   d6416:	601a      	strpl	r2, [r3, #0]
   d6418:	4b12      	ldr	r3, [pc, #72]	; (d6464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d641a:	681a      	ldr	r2, [r3, #0]
   d641c:	07d1      	lsls	r1, r2, #31
   d641e:	bf5c      	itt	pl
   d6420:	2201      	movpl	r2, #1
   d6422:	601a      	strpl	r2, [r3, #0]
   d6424:	4b10      	ldr	r3, [pc, #64]	; (d6468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6426:	681a      	ldr	r2, [r3, #0]
   d6428:	07d2      	lsls	r2, r2, #31
   d642a:	bf5c      	itt	pl
   d642c:	2201      	movpl	r2, #1
   d642e:	601a      	strpl	r2, [r3, #0]
   d6430:	4b0e      	ldr	r3, [pc, #56]	; (d646c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6432:	681a      	ldr	r2, [r3, #0]
   d6434:	07d0      	lsls	r0, r2, #31
   d6436:	bf5c      	itt	pl
   d6438:	2201      	movpl	r2, #1
   d643a:	601a      	strpl	r2, [r3, #0]
   d643c:	4b0c      	ldr	r3, [pc, #48]	; (d6470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d643e:	681a      	ldr	r2, [r3, #0]
   d6440:	07d1      	lsls	r1, r2, #31
   d6442:	bf5c      	itt	pl
   d6444:	2201      	movpl	r2, #1
   d6446:	601a      	strpl	r2, [r3, #0]
   d6448:	4b0a      	ldr	r3, [pc, #40]	; (d6474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d644a:	681a      	ldr	r2, [r3, #0]
   d644c:	07d2      	lsls	r2, r2, #31
   d644e:	bf5c      	itt	pl
   d6450:	2201      	movpl	r2, #1
   d6452:	601a      	strpl	r2, [r3, #0]
   d6454:	4770      	bx	lr
   d6456:	bf00      	nop
   d6458:	2003e76c 	.word	0x2003e76c
   d645c:	2003e768 	.word	0x2003e768
   d6460:	2003e764 	.word	0x2003e764
   d6464:	2003e760 	.word	0x2003e760
   d6468:	2003e75c 	.word	0x2003e75c
   d646c:	2003e758 	.word	0x2003e758
   d6470:	2003e754 	.word	0x2003e754
   d6474:	2003e750 	.word	0x2003e750

000d6478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6478:	4b24      	ldr	r3, [pc, #144]	; (d650c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d647a:	681a      	ldr	r2, [r3, #0]
   d647c:	07d0      	lsls	r0, r2, #31
   d647e:	bf5c      	itt	pl
   d6480:	2201      	movpl	r2, #1
   d6482:	601a      	strpl	r2, [r3, #0]
   d6484:	4b22      	ldr	r3, [pc, #136]	; (d6510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6486:	681a      	ldr	r2, [r3, #0]
   d6488:	07d1      	lsls	r1, r2, #31
   d648a:	bf5c      	itt	pl
   d648c:	2201      	movpl	r2, #1
   d648e:	601a      	strpl	r2, [r3, #0]
   d6490:	4b20      	ldr	r3, [pc, #128]	; (d6514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6492:	681a      	ldr	r2, [r3, #0]
   d6494:	07d2      	lsls	r2, r2, #31
   d6496:	bf5c      	itt	pl
   d6498:	2201      	movpl	r2, #1
   d649a:	601a      	strpl	r2, [r3, #0]
   d649c:	4b1e      	ldr	r3, [pc, #120]	; (d6518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d649e:	681a      	ldr	r2, [r3, #0]
   d64a0:	07d0      	lsls	r0, r2, #31
   d64a2:	bf5c      	itt	pl
   d64a4:	2201      	movpl	r2, #1
   d64a6:	601a      	strpl	r2, [r3, #0]
   d64a8:	4b1c      	ldr	r3, [pc, #112]	; (d651c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d64aa:	681a      	ldr	r2, [r3, #0]
   d64ac:	07d1      	lsls	r1, r2, #31
   d64ae:	bf5c      	itt	pl
   d64b0:	2201      	movpl	r2, #1
   d64b2:	601a      	strpl	r2, [r3, #0]
   d64b4:	4b1a      	ldr	r3, [pc, #104]	; (d6520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d64b6:	681a      	ldr	r2, [r3, #0]
   d64b8:	07d2      	lsls	r2, r2, #31
   d64ba:	bf5c      	itt	pl
   d64bc:	2201      	movpl	r2, #1
   d64be:	601a      	strpl	r2, [r3, #0]
   d64c0:	4b18      	ldr	r3, [pc, #96]	; (d6524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d64c2:	681a      	ldr	r2, [r3, #0]
   d64c4:	07d0      	lsls	r0, r2, #31
   d64c6:	bf5c      	itt	pl
   d64c8:	2201      	movpl	r2, #1
   d64ca:	601a      	strpl	r2, [r3, #0]
   d64cc:	4b16      	ldr	r3, [pc, #88]	; (d6528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d64ce:	681a      	ldr	r2, [r3, #0]
   d64d0:	07d1      	lsls	r1, r2, #31
   d64d2:	bf5c      	itt	pl
   d64d4:	2201      	movpl	r2, #1
   d64d6:	601a      	strpl	r2, [r3, #0]
   d64d8:	4b14      	ldr	r3, [pc, #80]	; (d652c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d64da:	681a      	ldr	r2, [r3, #0]
   d64dc:	07d2      	lsls	r2, r2, #31
   d64de:	bf5c      	itt	pl
   d64e0:	2201      	movpl	r2, #1
   d64e2:	601a      	strpl	r2, [r3, #0]
   d64e4:	4b12      	ldr	r3, [pc, #72]	; (d6530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	07d0      	lsls	r0, r2, #31
   d64ea:	bf5c      	itt	pl
   d64ec:	2201      	movpl	r2, #1
   d64ee:	601a      	strpl	r2, [r3, #0]
   d64f0:	4b10      	ldr	r3, [pc, #64]	; (d6534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d64f2:	681a      	ldr	r2, [r3, #0]
   d64f4:	07d1      	lsls	r1, r2, #31
   d64f6:	bf5c      	itt	pl
   d64f8:	2201      	movpl	r2, #1
   d64fa:	601a      	strpl	r2, [r3, #0]
   d64fc:	4b0e      	ldr	r3, [pc, #56]	; (d6538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d64fe:	681a      	ldr	r2, [r3, #0]
   d6500:	07d2      	lsls	r2, r2, #31
   d6502:	bf5c      	itt	pl
   d6504:	2201      	movpl	r2, #1
   d6506:	601a      	strpl	r2, [r3, #0]
   d6508:	4770      	bx	lr
   d650a:	bf00      	nop
   d650c:	2003e79c 	.word	0x2003e79c
   d6510:	2003e798 	.word	0x2003e798
   d6514:	2003e794 	.word	0x2003e794
   d6518:	2003e790 	.word	0x2003e790
   d651c:	2003e78c 	.word	0x2003e78c
   d6520:	2003e788 	.word	0x2003e788
   d6524:	2003e784 	.word	0x2003e784
   d6528:	2003e780 	.word	0x2003e780
   d652c:	2003e77c 	.word	0x2003e77c
   d6530:	2003e778 	.word	0x2003e778
   d6534:	2003e774 	.word	0x2003e774
   d6538:	2003e770 	.word	0x2003e770

000d653c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d653c:	4b24      	ldr	r3, [pc, #144]	; (d65d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d653e:	681a      	ldr	r2, [r3, #0]
   d6540:	07d0      	lsls	r0, r2, #31
   d6542:	bf5c      	itt	pl
   d6544:	2201      	movpl	r2, #1
   d6546:	601a      	strpl	r2, [r3, #0]
   d6548:	4b22      	ldr	r3, [pc, #136]	; (d65d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d654a:	681a      	ldr	r2, [r3, #0]
   d654c:	07d1      	lsls	r1, r2, #31
   d654e:	bf5c      	itt	pl
   d6550:	2201      	movpl	r2, #1
   d6552:	601a      	strpl	r2, [r3, #0]
   d6554:	4b20      	ldr	r3, [pc, #128]	; (d65d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6556:	681a      	ldr	r2, [r3, #0]
   d6558:	07d2      	lsls	r2, r2, #31
   d655a:	bf5c      	itt	pl
   d655c:	2201      	movpl	r2, #1
   d655e:	601a      	strpl	r2, [r3, #0]
   d6560:	4b1e      	ldr	r3, [pc, #120]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6562:	681a      	ldr	r2, [r3, #0]
   d6564:	07d0      	lsls	r0, r2, #31
   d6566:	bf5c      	itt	pl
   d6568:	2201      	movpl	r2, #1
   d656a:	601a      	strpl	r2, [r3, #0]
   d656c:	4b1c      	ldr	r3, [pc, #112]	; (d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d656e:	681a      	ldr	r2, [r3, #0]
   d6570:	07d1      	lsls	r1, r2, #31
   d6572:	bf5c      	itt	pl
   d6574:	2201      	movpl	r2, #1
   d6576:	601a      	strpl	r2, [r3, #0]
   d6578:	4b1a      	ldr	r3, [pc, #104]	; (d65e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d657a:	681a      	ldr	r2, [r3, #0]
   d657c:	07d2      	lsls	r2, r2, #31
   d657e:	bf5c      	itt	pl
   d6580:	2201      	movpl	r2, #1
   d6582:	601a      	strpl	r2, [r3, #0]
   d6584:	4b18      	ldr	r3, [pc, #96]	; (d65e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6586:	681a      	ldr	r2, [r3, #0]
   d6588:	07d0      	lsls	r0, r2, #31
   d658a:	bf5c      	itt	pl
   d658c:	2201      	movpl	r2, #1
   d658e:	601a      	strpl	r2, [r3, #0]
   d6590:	4b16      	ldr	r3, [pc, #88]	; (d65ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6592:	681a      	ldr	r2, [r3, #0]
   d6594:	07d1      	lsls	r1, r2, #31
   d6596:	bf5c      	itt	pl
   d6598:	2201      	movpl	r2, #1
   d659a:	601a      	strpl	r2, [r3, #0]
   d659c:	4b14      	ldr	r3, [pc, #80]	; (d65f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d659e:	681a      	ldr	r2, [r3, #0]
   d65a0:	07d2      	lsls	r2, r2, #31
   d65a2:	bf5c      	itt	pl
   d65a4:	2201      	movpl	r2, #1
   d65a6:	601a      	strpl	r2, [r3, #0]
   d65a8:	4b12      	ldr	r3, [pc, #72]	; (d65f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d65aa:	681a      	ldr	r2, [r3, #0]
   d65ac:	07d0      	lsls	r0, r2, #31
   d65ae:	bf5c      	itt	pl
   d65b0:	2201      	movpl	r2, #1
   d65b2:	601a      	strpl	r2, [r3, #0]
   d65b4:	4b10      	ldr	r3, [pc, #64]	; (d65f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d65b6:	681a      	ldr	r2, [r3, #0]
   d65b8:	07d1      	lsls	r1, r2, #31
   d65ba:	bf5c      	itt	pl
   d65bc:	2201      	movpl	r2, #1
   d65be:	601a      	strpl	r2, [r3, #0]
   d65c0:	4b0e      	ldr	r3, [pc, #56]	; (d65fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d65c2:	681a      	ldr	r2, [r3, #0]
   d65c4:	07d2      	lsls	r2, r2, #31
   d65c6:	bf5c      	itt	pl
   d65c8:	2201      	movpl	r2, #1
   d65ca:	601a      	strpl	r2, [r3, #0]
   d65cc:	4770      	bx	lr
   d65ce:	bf00      	nop
   d65d0:	2003e7cc 	.word	0x2003e7cc
   d65d4:	2003e7c8 	.word	0x2003e7c8
   d65d8:	2003e7c4 	.word	0x2003e7c4
   d65dc:	2003e7c0 	.word	0x2003e7c0
   d65e0:	2003e7bc 	.word	0x2003e7bc
   d65e4:	2003e7b8 	.word	0x2003e7b8
   d65e8:	2003e7b4 	.word	0x2003e7b4
   d65ec:	2003e7b0 	.word	0x2003e7b0
   d65f0:	2003e7ac 	.word	0x2003e7ac
   d65f4:	2003e7a8 	.word	0x2003e7a8
   d65f8:	2003e7a4 	.word	0x2003e7a4
   d65fc:	2003e7a0 	.word	0x2003e7a0

000d6600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6600:	4b18      	ldr	r3, [pc, #96]	; (d6664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6602:	681a      	ldr	r2, [r3, #0]
   d6604:	07d1      	lsls	r1, r2, #31
   d6606:	bf5c      	itt	pl
   d6608:	2201      	movpl	r2, #1
   d660a:	601a      	strpl	r2, [r3, #0]
   d660c:	4b16      	ldr	r3, [pc, #88]	; (d6668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d660e:	681a      	ldr	r2, [r3, #0]
   d6610:	07d2      	lsls	r2, r2, #31
   d6612:	bf5c      	itt	pl
   d6614:	2201      	movpl	r2, #1
   d6616:	601a      	strpl	r2, [r3, #0]
   d6618:	4b14      	ldr	r3, [pc, #80]	; (d666c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d661a:	681a      	ldr	r2, [r3, #0]
   d661c:	07d0      	lsls	r0, r2, #31
   d661e:	bf5c      	itt	pl
   d6620:	2201      	movpl	r2, #1
   d6622:	601a      	strpl	r2, [r3, #0]
   d6624:	4b12      	ldr	r3, [pc, #72]	; (d6670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6626:	681a      	ldr	r2, [r3, #0]
   d6628:	07d1      	lsls	r1, r2, #31
   d662a:	bf5c      	itt	pl
   d662c:	2201      	movpl	r2, #1
   d662e:	601a      	strpl	r2, [r3, #0]
   d6630:	4b10      	ldr	r3, [pc, #64]	; (d6674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6632:	681a      	ldr	r2, [r3, #0]
   d6634:	07d2      	lsls	r2, r2, #31
   d6636:	bf5c      	itt	pl
   d6638:	2201      	movpl	r2, #1
   d663a:	601a      	strpl	r2, [r3, #0]
   d663c:	4b0e      	ldr	r3, [pc, #56]	; (d6678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d663e:	681a      	ldr	r2, [r3, #0]
   d6640:	07d0      	lsls	r0, r2, #31
   d6642:	bf5c      	itt	pl
   d6644:	2201      	movpl	r2, #1
   d6646:	601a      	strpl	r2, [r3, #0]
   d6648:	4b0c      	ldr	r3, [pc, #48]	; (d667c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d664a:	681a      	ldr	r2, [r3, #0]
   d664c:	07d1      	lsls	r1, r2, #31
   d664e:	bf5c      	itt	pl
   d6650:	2201      	movpl	r2, #1
   d6652:	601a      	strpl	r2, [r3, #0]
   d6654:	4b0a      	ldr	r3, [pc, #40]	; (d6680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6656:	681a      	ldr	r2, [r3, #0]
   d6658:	07d2      	lsls	r2, r2, #31
   d665a:	bf5c      	itt	pl
   d665c:	2201      	movpl	r2, #1
   d665e:	601a      	strpl	r2, [r3, #0]
   d6660:	4770      	bx	lr
   d6662:	bf00      	nop
   d6664:	2003e7ec 	.word	0x2003e7ec
   d6668:	2003e7e8 	.word	0x2003e7e8
   d666c:	2003e7e4 	.word	0x2003e7e4
   d6670:	2003e7e0 	.word	0x2003e7e0
   d6674:	2003e7dc 	.word	0x2003e7dc
   d6678:	2003e7d8 	.word	0x2003e7d8
   d667c:	2003e7d4 	.word	0x2003e7d4
   d6680:	2003e7d0 	.word	0x2003e7d0

000d6684 <atan2>:
   d6684:	f000 b860 	b.w	d6748 <__ieee754_atan2>

000d6688 <sqrt>:
   d6688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d668c:	ed2d 8b02 	vpush	{d8}
   d6690:	b08b      	sub	sp, #44	; 0x2c
   d6692:	ec55 4b10 	vmov	r4, r5, d0
   d6696:	f000 f94d 	bl	d6934 <__ieee754_sqrt>
   d669a:	4b29      	ldr	r3, [pc, #164]	; (d6740 <sqrt+0xb8>)
   d669c:	eeb0 8a40 	vmov.f32	s16, s0
   d66a0:	eef0 8a60 	vmov.f32	s17, s1
   d66a4:	f993 6000 	ldrsb.w	r6, [r3]
   d66a8:	1c73      	adds	r3, r6, #1
   d66aa:	d012      	beq.n	d66d2 <sqrt+0x4a>
   d66ac:	4622      	mov	r2, r4
   d66ae:	462b      	mov	r3, r5
   d66b0:	4620      	mov	r0, r4
   d66b2:	4629      	mov	r1, r5
   d66b4:	f001 f828 	bl	d7708 <__aeabi_dcmpun>
   d66b8:	4607      	mov	r7, r0
   d66ba:	b950      	cbnz	r0, d66d2 <sqrt+0x4a>
   d66bc:	f04f 0800 	mov.w	r8, #0
   d66c0:	f04f 0900 	mov.w	r9, #0
   d66c4:	4620      	mov	r0, r4
   d66c6:	4629      	mov	r1, r5
   d66c8:	4642      	mov	r2, r8
   d66ca:	464b      	mov	r3, r9
   d66cc:	f000 fff4 	bl	d76b8 <__aeabi_dcmplt>
   d66d0:	b940      	cbnz	r0, d66e4 <sqrt+0x5c>
   d66d2:	eeb0 0a48 	vmov.f32	s0, s16
   d66d6:	eef0 0a68 	vmov.f32	s1, s17
   d66da:	b00b      	add	sp, #44	; 0x2c
   d66dc:	ecbd 8b02 	vpop	{d8}
   d66e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d66e4:	4b17      	ldr	r3, [pc, #92]	; (d6744 <sqrt+0xbc>)
   d66e6:	9708      	str	r7, [sp, #32]
   d66e8:	2201      	movs	r2, #1
   d66ea:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d66ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d66f2:	e88d 000c 	stmia.w	sp, {r2, r3}
   d66f6:	b1b6      	cbz	r6, d6726 <sqrt+0x9e>
   d66f8:	4642      	mov	r2, r8
   d66fa:	464b      	mov	r3, r9
   d66fc:	4640      	mov	r0, r8
   d66fe:	4649      	mov	r1, r9
   d6700:	f000 fe92 	bl	d7428 <__aeabi_ddiv>
   d6704:	2e02      	cmp	r6, #2
   d6706:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d670a:	d10e      	bne.n	d672a <sqrt+0xa2>
   d670c:	f7fe fd1a 	bl	d5144 <__errno>
   d6710:	2321      	movs	r3, #33	; 0x21
   d6712:	6003      	str	r3, [r0, #0]
   d6714:	9b08      	ldr	r3, [sp, #32]
   d6716:	b973      	cbnz	r3, d6736 <sqrt+0xae>
   d6718:	ed9d 0b06 	vldr	d0, [sp, #24]
   d671c:	b00b      	add	sp, #44	; 0x2c
   d671e:	ecbd 8b02 	vpop	{d8}
   d6722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6726:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d672a:	4668      	mov	r0, sp
   d672c:	f000 fb98 	bl	d6e60 <matherr>
   d6730:	2800      	cmp	r0, #0
   d6732:	d1ef      	bne.n	d6714 <sqrt+0x8c>
   d6734:	e7ea      	b.n	d670c <sqrt+0x84>
   d6736:	f7fe fd05 	bl	d5144 <__errno>
   d673a:	9b08      	ldr	r3, [sp, #32]
   d673c:	6003      	str	r3, [r0, #0]
   d673e:	e7eb      	b.n	d6718 <sqrt+0x90>
   d6740:	2003dd40 	.word	0x2003dd40
   d6744:	000d7c54 	.word	0x000d7c54

000d6748 <__ieee754_atan2>:
   d6748:	ec51 0b11 	vmov	r0, r1, d1
   d674c:	4243      	negs	r3, r0
   d674e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6752:	4303      	orrs	r3, r0
   d6754:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d6758:	4f75      	ldr	r7, [pc, #468]	; (d6930 <__ieee754_atan2+0x1e8>)
   d675a:	ea48 73d3 	orr.w	r3, r8, r3, lsr #31
   d675e:	42bb      	cmp	r3, r7
   d6760:	ec55 4b10 	vmov	r4, r5, d0
   d6764:	d849      	bhi.n	d67fa <__ieee754_atan2+0xb2>
   d6766:	4263      	negs	r3, r4
   d6768:	4323      	orrs	r3, r4
   d676a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   d676e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   d6772:	42bb      	cmp	r3, r7
   d6774:	46a9      	mov	r9, r5
   d6776:	d840      	bhi.n	d67fa <__ieee754_atan2+0xb2>
   d6778:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   d677c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d6780:	4303      	orrs	r3, r0
   d6782:	468e      	mov	lr, r1
   d6784:	d050      	beq.n	d6828 <__ieee754_atan2+0xe0>
   d6786:	178e      	asrs	r6, r1, #30
   d6788:	f006 0602 	and.w	r6, r6, #2
   d678c:	ea54 030a 	orrs.w	r3, r4, sl
   d6790:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
   d6794:	d039      	beq.n	d680a <__ieee754_atan2+0xc2>
   d6796:	ea50 0308 	orrs.w	r3, r0, r8
   d679a:	d03e      	beq.n	d681a <__ieee754_atan2+0xd2>
   d679c:	45b8      	cmp	r8, r7
   d679e:	d055      	beq.n	d684c <__ieee754_atan2+0x104>
   d67a0:	45ba      	cmp	sl, r7
   d67a2:	d03a      	beq.n	d681a <__ieee754_atan2+0xd2>
   d67a4:	ebc8 080a 	rsb	r8, r8, sl
   d67a8:	ea4f 5828 	mov.w	r8, r8, asr #20
   d67ac:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
   d67b0:	dc40      	bgt.n	d6834 <__ieee754_atan2+0xec>
   d67b2:	2900      	cmp	r1, #0
   d67b4:	db70      	blt.n	d6898 <__ieee754_atan2+0x150>
   d67b6:	4602      	mov	r2, r0
   d67b8:	460b      	mov	r3, r1
   d67ba:	4620      	mov	r0, r4
   d67bc:	4629      	mov	r1, r5
   d67be:	f000 fe33 	bl	d7428 <__aeabi_ddiv>
   d67c2:	ec41 0b10 	vmov	d0, r0, r1
   d67c6:	f000 fb43 	bl	d6e50 <fabs>
   d67ca:	f000 f985 	bl	d6ad8 <atan>
   d67ce:	ec51 0b10 	vmov	r0, r1, d0
   d67d2:	2e01      	cmp	r6, #1
   d67d4:	d05a      	beq.n	d688c <__ieee754_atan2+0x144>
   d67d6:	2e02      	cmp	r6, #2
   d67d8:	d048      	beq.n	d686c <__ieee754_atan2+0x124>
   d67da:	2e00      	cmp	r6, #0
   d67dc:	d042      	beq.n	d6864 <__ieee754_atan2+0x11c>
   d67de:	a33e      	add	r3, pc, #248	; (adr r3, d68d8 <__ieee754_atan2+0x190>)
   d67e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d67e4:	f000 fb42 	bl	d6e6c <__aeabi_dsub>
   d67e8:	a33d      	add	r3, pc, #244	; (adr r3, d68e0 <__ieee754_atan2+0x198>)
   d67ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d67ee:	f000 fb3d 	bl	d6e6c <__aeabi_dsub>
   d67f2:	ec41 0b10 	vmov	d0, r0, r1
   d67f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67fa:	4622      	mov	r2, r4
   d67fc:	462b      	mov	r3, r5
   d67fe:	f000 fb37 	bl	d6e70 <__adddf3>
   d6802:	ec41 0b10 	vmov	d0, r0, r1
   d6806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d680a:	2e02      	cmp	r6, #2
   d680c:	d016      	beq.n	d683c <__ieee754_atan2+0xf4>
   d680e:	2e03      	cmp	r6, #3
   d6810:	d10e      	bne.n	d6830 <__ieee754_atan2+0xe8>
   d6812:	ed9f 0b35 	vldr	d0, [pc, #212]	; d68e8 <__ieee754_atan2+0x1a0>
   d6816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d681a:	f1b9 0f00 	cmp.w	r9, #0
   d681e:	db11      	blt.n	d6844 <__ieee754_atan2+0xfc>
   d6820:	ed9f 0b33 	vldr	d0, [pc, #204]	; d68f0 <__ieee754_atan2+0x1a8>
   d6824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6828:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d682c:	f000 b954 	b.w	d6ad8 <atan>
   d6830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6834:	a12e      	add	r1, pc, #184	; (adr r1, d68f0 <__ieee754_atan2+0x1a8>)
   d6836:	e9d1 0100 	ldrd	r0, r1, [r1]
   d683a:	e7ca      	b.n	d67d2 <__ieee754_atan2+0x8a>
   d683c:	ed9f 0b28 	vldr	d0, [pc, #160]	; d68e0 <__ieee754_atan2+0x198>
   d6840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6844:	ed9f 0b2c 	vldr	d0, [pc, #176]	; d68f8 <__ieee754_atan2+0x1b0>
   d6848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d684c:	45c2      	cmp	sl, r8
   d684e:	d029      	beq.n	d68a4 <__ieee754_atan2+0x15c>
   d6850:	2e02      	cmp	r6, #2
   d6852:	d0f3      	beq.n	d683c <__ieee754_atan2+0xf4>
   d6854:	2e03      	cmp	r6, #3
   d6856:	d0dc      	beq.n	d6812 <__ieee754_atan2+0xca>
   d6858:	2e01      	cmp	r6, #1
   d685a:	d02d      	beq.n	d68b8 <__ieee754_atan2+0x170>
   d685c:	ed9f 0b28 	vldr	d0, [pc, #160]	; d6900 <__ieee754_atan2+0x1b8>
   d6860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6864:	ec41 0b10 	vmov	d0, r0, r1
   d6868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d686c:	a31a      	add	r3, pc, #104	; (adr r3, d68d8 <__ieee754_atan2+0x190>)
   d686e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6872:	f000 fafb 	bl	d6e6c <__aeabi_dsub>
   d6876:	4602      	mov	r2, r0
   d6878:	460b      	mov	r3, r1
   d687a:	a119      	add	r1, pc, #100	; (adr r1, d68e0 <__ieee754_atan2+0x198>)
   d687c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d6880:	f000 faf4 	bl	d6e6c <__aeabi_dsub>
   d6884:	ec41 0b10 	vmov	d0, r0, r1
   d6888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d688c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   d6890:	ec41 0b10 	vmov	d0, r0, r1
   d6894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6898:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
   d689c:	da8b      	bge.n	d67b6 <__ieee754_atan2+0x6e>
   d689e:	2000      	movs	r0, #0
   d68a0:	2100      	movs	r1, #0
   d68a2:	e796      	b.n	d67d2 <__ieee754_atan2+0x8a>
   d68a4:	2e02      	cmp	r6, #2
   d68a6:	d013      	beq.n	d68d0 <__ieee754_atan2+0x188>
   d68a8:	2e03      	cmp	r6, #3
   d68aa:	d00d      	beq.n	d68c8 <__ieee754_atan2+0x180>
   d68ac:	2e01      	cmp	r6, #1
   d68ae:	d007      	beq.n	d68c0 <__ieee754_atan2+0x178>
   d68b0:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6908 <__ieee754_atan2+0x1c0>
   d68b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68b8:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6910 <__ieee754_atan2+0x1c8>
   d68bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68c0:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6918 <__ieee754_atan2+0x1d0>
   d68c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68c8:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6920 <__ieee754_atan2+0x1d8>
   d68cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68d0:	ed9f 0b15 	vldr	d0, [pc, #84]	; d6928 <__ieee754_atan2+0x1e0>
   d68d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68d8:	33145c07 	.word	0x33145c07
   d68dc:	3ca1a626 	.word	0x3ca1a626
   d68e0:	54442d18 	.word	0x54442d18
   d68e4:	400921fb 	.word	0x400921fb
   d68e8:	54442d18 	.word	0x54442d18
   d68ec:	c00921fb 	.word	0xc00921fb
   d68f0:	54442d18 	.word	0x54442d18
   d68f4:	3ff921fb 	.word	0x3ff921fb
   d68f8:	54442d18 	.word	0x54442d18
   d68fc:	bff921fb 	.word	0xbff921fb
	...
   d6908:	54442d18 	.word	0x54442d18
   d690c:	3fe921fb 	.word	0x3fe921fb
   d6910:	00000000 	.word	0x00000000
   d6914:	80000000 	.word	0x80000000
   d6918:	54442d18 	.word	0x54442d18
   d691c:	bfe921fb 	.word	0xbfe921fb
   d6920:	7f3321d2 	.word	0x7f3321d2
   d6924:	c002d97c 	.word	0xc002d97c
   d6928:	7f3321d2 	.word	0x7f3321d2
   d692c:	4002d97c 	.word	0x4002d97c
   d6930:	7ff00000 	.word	0x7ff00000

000d6934 <__ieee754_sqrt>:
   d6934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6938:	4965      	ldr	r1, [pc, #404]	; (d6ad0 <__ieee754_sqrt+0x19c>)
   d693a:	ec55 4b10 	vmov	r4, r5, d0
   d693e:	460e      	mov	r6, r1
   d6940:	4029      	ands	r1, r5
   d6942:	42b1      	cmp	r1, r6
   d6944:	f000 8097 	beq.w	d6a76 <__ieee754_sqrt+0x142>
   d6948:	2d00      	cmp	r5, #0
   d694a:	462b      	mov	r3, r5
   d694c:	ee10 2a10 	vmov	r2, s0
   d6950:	dd74      	ble.n	d6a3c <__ieee754_sqrt+0x108>
   d6952:	152f      	asrs	r7, r5, #20
   d6954:	d07f      	beq.n	d6a56 <__ieee754_sqrt+0x122>
   d6956:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d695a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d695e:	07f9      	lsls	r1, r7, #31
   d6960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6964:	d465      	bmi.n	d6a32 <__ieee754_sqrt+0xfe>
   d6966:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d696a:	2600      	movs	r6, #0
   d696c:	440b      	add	r3, r1
   d696e:	107f      	asrs	r7, r7, #1
   d6970:	0052      	lsls	r2, r2, #1
   d6972:	46b6      	mov	lr, r6
   d6974:	2016      	movs	r0, #22
   d6976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d697a:	eb0e 0401 	add.w	r4, lr, r1
   d697e:	429c      	cmp	r4, r3
   d6980:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d6984:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6988:	dc03      	bgt.n	d6992 <__ieee754_sqrt+0x5e>
   d698a:	1b1b      	subs	r3, r3, r4
   d698c:	eb04 0e01 	add.w	lr, r4, r1
   d6990:	440e      	add	r6, r1
   d6992:	3801      	subs	r0, #1
   d6994:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d6998:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d699c:	d1ed      	bne.n	d697a <__ieee754_sqrt+0x46>
   d699e:	4684      	mov	ip, r0
   d69a0:	2420      	movs	r4, #32
   d69a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d69a6:	e009      	b.n	d69bc <__ieee754_sqrt+0x88>
   d69a8:	d020      	beq.n	d69ec <__ieee754_sqrt+0xb8>
   d69aa:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d69ae:	3c01      	subs	r4, #1
   d69b0:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d69b4:	442b      	add	r3, r5
   d69b6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d69ba:	d020      	beq.n	d69fe <__ieee754_sqrt+0xca>
   d69bc:	459e      	cmp	lr, r3
   d69be:	eb01 050c 	add.w	r5, r1, ip
   d69c2:	daf1      	bge.n	d69a8 <__ieee754_sqrt+0x74>
   d69c4:	2d00      	cmp	r5, #0
   d69c6:	eb05 0c01 	add.w	ip, r5, r1
   d69ca:	db09      	blt.n	d69e0 <__ieee754_sqrt+0xac>
   d69cc:	46f0      	mov	r8, lr
   d69ce:	4295      	cmp	r5, r2
   d69d0:	ebce 0303 	rsb	r3, lr, r3
   d69d4:	d900      	bls.n	d69d8 <__ieee754_sqrt+0xa4>
   d69d6:	3b01      	subs	r3, #1
   d69d8:	1b52      	subs	r2, r2, r5
   d69da:	4408      	add	r0, r1
   d69dc:	46c6      	mov	lr, r8
   d69de:	e7e4      	b.n	d69aa <__ieee754_sqrt+0x76>
   d69e0:	f1bc 0f00 	cmp.w	ip, #0
   d69e4:	dbf2      	blt.n	d69cc <__ieee754_sqrt+0x98>
   d69e6:	f10e 0801 	add.w	r8, lr, #1
   d69ea:	e7f0      	b.n	d69ce <__ieee754_sqrt+0x9a>
   d69ec:	4295      	cmp	r5, r2
   d69ee:	d81e      	bhi.n	d6a2e <__ieee754_sqrt+0xfa>
   d69f0:	2d00      	cmp	r5, #0
   d69f2:	eb05 0c01 	add.w	ip, r5, r1
   d69f6:	db50      	blt.n	d6a9a <__ieee754_sqrt+0x166>
   d69f8:	4698      	mov	r8, r3
   d69fa:	2300      	movs	r3, #0
   d69fc:	e7ec      	b.n	d69d8 <__ieee754_sqrt+0xa4>
   d69fe:	4313      	orrs	r3, r2
   d6a00:	d004      	beq.n	d6a0c <__ieee754_sqrt+0xd8>
   d6a02:	1c42      	adds	r2, r0, #1
   d6a04:	d04d      	beq.n	d6aa2 <__ieee754_sqrt+0x16e>
   d6a06:	f000 0301 	and.w	r3, r0, #1
   d6a0a:	4418      	add	r0, r3
   d6a0c:	0840      	lsrs	r0, r0, #1
   d6a0e:	1071      	asrs	r1, r6, #1
   d6a10:	07f3      	lsls	r3, r6, #31
   d6a12:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d6a16:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d6a1a:	bf48      	it	mi
   d6a1c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d6a20:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d6a24:	4602      	mov	r2, r0
   d6a26:	ec43 2b10 	vmov	d0, r2, r3
   d6a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a2e:	4673      	mov	r3, lr
   d6a30:	e7bb      	b.n	d69aa <__ieee754_sqrt+0x76>
   d6a32:	005b      	lsls	r3, r3, #1
   d6a34:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d6a38:	0052      	lsls	r2, r2, #1
   d6a3a:	e794      	b.n	d6966 <__ieee754_sqrt+0x32>
   d6a3c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d6a40:	4321      	orrs	r1, r4
   d6a42:	d028      	beq.n	d6a96 <__ieee754_sqrt+0x162>
   d6a44:	bbad      	cbnz	r5, d6ab2 <__ieee754_sqrt+0x17e>
   d6a46:	462f      	mov	r7, r5
   d6a48:	0ad3      	lsrs	r3, r2, #11
   d6a4a:	3f15      	subs	r7, #21
   d6a4c:	0552      	lsls	r2, r2, #21
   d6a4e:	2b00      	cmp	r3, #0
   d6a50:	d0fa      	beq.n	d6a48 <__ieee754_sqrt+0x114>
   d6a52:	02dd      	lsls	r5, r3, #11
   d6a54:	d428      	bmi.n	d6aa8 <__ieee754_sqrt+0x174>
   d6a56:	2100      	movs	r1, #0
   d6a58:	e000      	b.n	d6a5c <__ieee754_sqrt+0x128>
   d6a5a:	4601      	mov	r1, r0
   d6a5c:	005b      	lsls	r3, r3, #1
   d6a5e:	02dc      	lsls	r4, r3, #11
   d6a60:	f101 0001 	add.w	r0, r1, #1
   d6a64:	d5f9      	bpl.n	d6a5a <__ieee754_sqrt+0x126>
   d6a66:	f1c0 0420 	rsb	r4, r0, #32
   d6a6a:	fa22 f404 	lsr.w	r4, r2, r4
   d6a6e:	4323      	orrs	r3, r4
   d6a70:	1a7f      	subs	r7, r7, r1
   d6a72:	4082      	lsls	r2, r0
   d6a74:	e76f      	b.n	d6956 <__ieee754_sqrt+0x22>
   d6a76:	ee10 2a10 	vmov	r2, s0
   d6a7a:	462b      	mov	r3, r5
   d6a7c:	ee10 0a10 	vmov	r0, s0
   d6a80:	4629      	mov	r1, r5
   d6a82:	f000 fba7 	bl	d71d4 <__aeabi_dmul>
   d6a86:	4622      	mov	r2, r4
   d6a88:	462b      	mov	r3, r5
   d6a8a:	f000 f9f1 	bl	d6e70 <__adddf3>
   d6a8e:	ec41 0b10 	vmov	d0, r0, r1
   d6a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a9a:	f1bc 0f00 	cmp.w	ip, #0
   d6a9e:	daa2      	bge.n	d69e6 <__ieee754_sqrt+0xb2>
   d6aa0:	e7aa      	b.n	d69f8 <__ieee754_sqrt+0xc4>
   d6aa2:	3601      	adds	r6, #1
   d6aa4:	4620      	mov	r0, r4
   d6aa6:	e7b2      	b.n	d6a0e <__ieee754_sqrt+0xda>
   d6aa8:	2420      	movs	r4, #32
   d6aaa:	f04f 31ff 	mov.w	r1, #4294967295
   d6aae:	2000      	movs	r0, #0
   d6ab0:	e7db      	b.n	d6a6a <__ieee754_sqrt+0x136>
   d6ab2:	ee10 2a10 	vmov	r2, s0
   d6ab6:	462b      	mov	r3, r5
   d6ab8:	4620      	mov	r0, r4
   d6aba:	4629      	mov	r1, r5
   d6abc:	f000 f9d6 	bl	d6e6c <__aeabi_dsub>
   d6ac0:	4602      	mov	r2, r0
   d6ac2:	460b      	mov	r3, r1
   d6ac4:	f000 fcb0 	bl	d7428 <__aeabi_ddiv>
   d6ac8:	ec41 0b10 	vmov	d0, r0, r1
   d6acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ad0:	7ff00000 	.word	0x7ff00000
   d6ad4:	00000000 	.word	0x00000000

000d6ad8 <atan>:
   d6ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6adc:	ec55 4b10 	vmov	r4, r5, d0
   d6ae0:	4bd1      	ldr	r3, [pc, #836]	; (d6e28 <atan+0x350>)
   d6ae2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   d6ae6:	429e      	cmp	r6, r3
   d6ae8:	46ab      	mov	fp, r5
   d6aea:	dd10      	ble.n	d6b0e <atan+0x36>
   d6aec:	4bcf      	ldr	r3, [pc, #828]	; (d6e2c <atan+0x354>)
   d6aee:	429e      	cmp	r6, r3
   d6af0:	f300 80b2 	bgt.w	d6c58 <atan+0x180>
   d6af4:	f000 80ad 	beq.w	d6c52 <atan+0x17a>
   d6af8:	f1bb 0f00 	cmp.w	fp, #0
   d6afc:	f340 80fd 	ble.w	d6cfa <atan+0x222>
   d6b00:	a5ad      	add	r5, pc, #692	; (adr r5, d6db8 <atan+0x2e0>)
   d6b02:	e9d5 4500 	ldrd	r4, r5, [r5]
   d6b06:	ec45 4b10 	vmov	d0, r4, r5
   d6b0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6b0e:	4bc8      	ldr	r3, [pc, #800]	; (d6e30 <atan+0x358>)
   d6b10:	429e      	cmp	r6, r3
   d6b12:	f300 80c0 	bgt.w	d6c96 <atan+0x1be>
   d6b16:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   d6b1a:	429e      	cmp	r6, r3
   d6b1c:	f340 80a8 	ble.w	d6c70 <atan+0x198>
   d6b20:	f04f 3aff 	mov.w	sl, #4294967295
   d6b24:	4622      	mov	r2, r4
   d6b26:	462b      	mov	r3, r5
   d6b28:	4620      	mov	r0, r4
   d6b2a:	4629      	mov	r1, r5
   d6b2c:	f000 fb52 	bl	d71d4 <__aeabi_dmul>
   d6b30:	4602      	mov	r2, r0
   d6b32:	460b      	mov	r3, r1
   d6b34:	4680      	mov	r8, r0
   d6b36:	4689      	mov	r9, r1
   d6b38:	f000 fb4c 	bl	d71d4 <__aeabi_dmul>
   d6b3c:	a3a0      	add	r3, pc, #640	; (adr r3, d6dc0 <atan+0x2e8>)
   d6b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b42:	4606      	mov	r6, r0
   d6b44:	460f      	mov	r7, r1
   d6b46:	f000 fb45 	bl	d71d4 <__aeabi_dmul>
   d6b4a:	a39f      	add	r3, pc, #636	; (adr r3, d6dc8 <atan+0x2f0>)
   d6b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b50:	f000 f98e 	bl	d6e70 <__adddf3>
   d6b54:	4632      	mov	r2, r6
   d6b56:	463b      	mov	r3, r7
   d6b58:	f000 fb3c 	bl	d71d4 <__aeabi_dmul>
   d6b5c:	a39c      	add	r3, pc, #624	; (adr r3, d6dd0 <atan+0x2f8>)
   d6b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b62:	f000 f985 	bl	d6e70 <__adddf3>
   d6b66:	4632      	mov	r2, r6
   d6b68:	463b      	mov	r3, r7
   d6b6a:	f000 fb33 	bl	d71d4 <__aeabi_dmul>
   d6b6e:	a39a      	add	r3, pc, #616	; (adr r3, d6dd8 <atan+0x300>)
   d6b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b74:	f000 f97c 	bl	d6e70 <__adddf3>
   d6b78:	4632      	mov	r2, r6
   d6b7a:	463b      	mov	r3, r7
   d6b7c:	f000 fb2a 	bl	d71d4 <__aeabi_dmul>
   d6b80:	a397      	add	r3, pc, #604	; (adr r3, d6de0 <atan+0x308>)
   d6b82:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b86:	f000 f973 	bl	d6e70 <__adddf3>
   d6b8a:	4632      	mov	r2, r6
   d6b8c:	463b      	mov	r3, r7
   d6b8e:	f000 fb21 	bl	d71d4 <__aeabi_dmul>
   d6b92:	a395      	add	r3, pc, #596	; (adr r3, d6de8 <atan+0x310>)
   d6b94:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b98:	f000 f96a 	bl	d6e70 <__adddf3>
   d6b9c:	4642      	mov	r2, r8
   d6b9e:	464b      	mov	r3, r9
   d6ba0:	f000 fb18 	bl	d71d4 <__aeabi_dmul>
   d6ba4:	a392      	add	r3, pc, #584	; (adr r3, d6df0 <atan+0x318>)
   d6ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6baa:	4680      	mov	r8, r0
   d6bac:	4689      	mov	r9, r1
   d6bae:	4630      	mov	r0, r6
   d6bb0:	4639      	mov	r1, r7
   d6bb2:	f000 fb0f 	bl	d71d4 <__aeabi_dmul>
   d6bb6:	a390      	add	r3, pc, #576	; (adr r3, d6df8 <atan+0x320>)
   d6bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6bbc:	f000 f956 	bl	d6e6c <__aeabi_dsub>
   d6bc0:	4632      	mov	r2, r6
   d6bc2:	463b      	mov	r3, r7
   d6bc4:	f000 fb06 	bl	d71d4 <__aeabi_dmul>
   d6bc8:	a38d      	add	r3, pc, #564	; (adr r3, d6e00 <atan+0x328>)
   d6bca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6bce:	f000 f94d 	bl	d6e6c <__aeabi_dsub>
   d6bd2:	4632      	mov	r2, r6
   d6bd4:	463b      	mov	r3, r7
   d6bd6:	f000 fafd 	bl	d71d4 <__aeabi_dmul>
   d6bda:	a38b      	add	r3, pc, #556	; (adr r3, d6e08 <atan+0x330>)
   d6bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6be0:	f000 f944 	bl	d6e6c <__aeabi_dsub>
   d6be4:	4632      	mov	r2, r6
   d6be6:	463b      	mov	r3, r7
   d6be8:	f000 faf4 	bl	d71d4 <__aeabi_dmul>
   d6bec:	a388      	add	r3, pc, #544	; (adr r3, d6e10 <atan+0x338>)
   d6bee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6bf2:	f000 f93b 	bl	d6e6c <__aeabi_dsub>
   d6bf6:	4632      	mov	r2, r6
   d6bf8:	463b      	mov	r3, r7
   d6bfa:	f000 faeb 	bl	d71d4 <__aeabi_dmul>
   d6bfe:	f1ba 3fff 	cmp.w	sl, #4294967295
   d6c02:	4602      	mov	r2, r0
   d6c04:	460b      	mov	r3, r1
   d6c06:	d07c      	beq.n	d6d02 <atan+0x22a>
   d6c08:	4640      	mov	r0, r8
   d6c0a:	4649      	mov	r1, r9
   d6c0c:	f000 f930 	bl	d6e70 <__adddf3>
   d6c10:	4622      	mov	r2, r4
   d6c12:	462b      	mov	r3, r5
   d6c14:	f000 fade 	bl	d71d4 <__aeabi_dmul>
   d6c18:	4e86      	ldr	r6, [pc, #536]	; (d6e34 <atan+0x35c>)
   d6c1a:	4b87      	ldr	r3, [pc, #540]	; (d6e38 <atan+0x360>)
   d6c1c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   d6c20:	4456      	add	r6, sl
   d6c22:	449a      	add	sl, r3
   d6c24:	e9da 2300 	ldrd	r2, r3, [sl]
   d6c28:	f000 f920 	bl	d6e6c <__aeabi_dsub>
   d6c2c:	4622      	mov	r2, r4
   d6c2e:	462b      	mov	r3, r5
   d6c30:	f000 f91c 	bl	d6e6c <__aeabi_dsub>
   d6c34:	4602      	mov	r2, r0
   d6c36:	460b      	mov	r3, r1
   d6c38:	e9d6 0100 	ldrd	r0, r1, [r6]
   d6c3c:	f000 f916 	bl	d6e6c <__aeabi_dsub>
   d6c40:	f1bb 0f00 	cmp.w	fp, #0
   d6c44:	db52      	blt.n	d6cec <atan+0x214>
   d6c46:	4604      	mov	r4, r0
   d6c48:	460d      	mov	r5, r1
   d6c4a:	ec45 4b10 	vmov	d0, r4, r5
   d6c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c52:	2c00      	cmp	r4, #0
   d6c54:	f43f af50 	beq.w	d6af8 <atan+0x20>
   d6c58:	4622      	mov	r2, r4
   d6c5a:	462b      	mov	r3, r5
   d6c5c:	4620      	mov	r0, r4
   d6c5e:	4629      	mov	r1, r5
   d6c60:	f000 f906 	bl	d6e70 <__adddf3>
   d6c64:	4604      	mov	r4, r0
   d6c66:	460d      	mov	r5, r1
   d6c68:	ec45 4b10 	vmov	d0, r4, r5
   d6c6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c70:	a369      	add	r3, pc, #420	; (adr r3, d6e18 <atan+0x340>)
   d6c72:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6c76:	ee10 0a10 	vmov	r0, s0
   d6c7a:	4629      	mov	r1, r5
   d6c7c:	f000 f8f8 	bl	d6e70 <__adddf3>
   d6c80:	2200      	movs	r2, #0
   d6c82:	4b6e      	ldr	r3, [pc, #440]	; (d6e3c <atan+0x364>)
   d6c84:	f000 fd36 	bl	d76f4 <__aeabi_dcmpgt>
   d6c88:	2800      	cmp	r0, #0
   d6c8a:	f43f af49 	beq.w	d6b20 <atan+0x48>
   d6c8e:	ec45 4b10 	vmov	d0, r4, r5
   d6c92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c96:	f000 f8db 	bl	d6e50 <fabs>
   d6c9a:	4b69      	ldr	r3, [pc, #420]	; (d6e40 <atan+0x368>)
   d6c9c:	429e      	cmp	r6, r3
   d6c9e:	ec55 4b10 	vmov	r4, r5, d0
   d6ca2:	dc3f      	bgt.n	d6d24 <atan+0x24c>
   d6ca4:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   d6ca8:	429e      	cmp	r6, r3
   d6caa:	dc68      	bgt.n	d6d7e <atan+0x2a6>
   d6cac:	ee10 2a10 	vmov	r2, s0
   d6cb0:	ee10 0a10 	vmov	r0, s0
   d6cb4:	462b      	mov	r3, r5
   d6cb6:	4629      	mov	r1, r5
   d6cb8:	f000 f8da 	bl	d6e70 <__adddf3>
   d6cbc:	2200      	movs	r2, #0
   d6cbe:	4b5f      	ldr	r3, [pc, #380]	; (d6e3c <atan+0x364>)
   d6cc0:	f000 f8d4 	bl	d6e6c <__aeabi_dsub>
   d6cc4:	2200      	movs	r2, #0
   d6cc6:	4606      	mov	r6, r0
   d6cc8:	460f      	mov	r7, r1
   d6cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d6cce:	4620      	mov	r0, r4
   d6cd0:	4629      	mov	r1, r5
   d6cd2:	f000 f8cd 	bl	d6e70 <__adddf3>
   d6cd6:	4602      	mov	r2, r0
   d6cd8:	460b      	mov	r3, r1
   d6cda:	4630      	mov	r0, r6
   d6cdc:	4639      	mov	r1, r7
   d6cde:	f000 fba3 	bl	d7428 <__aeabi_ddiv>
   d6ce2:	f04f 0a00 	mov.w	sl, #0
   d6ce6:	4604      	mov	r4, r0
   d6ce8:	460d      	mov	r5, r1
   d6cea:	e71b      	b.n	d6b24 <atan+0x4c>
   d6cec:	4604      	mov	r4, r0
   d6cee:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   d6cf2:	ec45 4b10 	vmov	d0, r4, r5
   d6cf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6cfa:	a549      	add	r5, pc, #292	; (adr r5, d6e20 <atan+0x348>)
   d6cfc:	e9d5 4500 	ldrd	r4, r5, [r5]
   d6d00:	e7b2      	b.n	d6c68 <atan+0x190>
   d6d02:	4640      	mov	r0, r8
   d6d04:	4649      	mov	r1, r9
   d6d06:	f000 f8b3 	bl	d6e70 <__adddf3>
   d6d0a:	4622      	mov	r2, r4
   d6d0c:	462b      	mov	r3, r5
   d6d0e:	f000 fa61 	bl	d71d4 <__aeabi_dmul>
   d6d12:	4602      	mov	r2, r0
   d6d14:	460b      	mov	r3, r1
   d6d16:	4620      	mov	r0, r4
   d6d18:	4629      	mov	r1, r5
   d6d1a:	f000 f8a7 	bl	d6e6c <__aeabi_dsub>
   d6d1e:	4604      	mov	r4, r0
   d6d20:	460d      	mov	r5, r1
   d6d22:	e7a1      	b.n	d6c68 <atan+0x190>
   d6d24:	4b47      	ldr	r3, [pc, #284]	; (d6e44 <atan+0x36c>)
   d6d26:	429e      	cmp	r6, r3
   d6d28:	dc1d      	bgt.n	d6d66 <atan+0x28e>
   d6d2a:	ee10 0a10 	vmov	r0, s0
   d6d2e:	2200      	movs	r2, #0
   d6d30:	4b45      	ldr	r3, [pc, #276]	; (d6e48 <atan+0x370>)
   d6d32:	4629      	mov	r1, r5
   d6d34:	f000 f89a 	bl	d6e6c <__aeabi_dsub>
   d6d38:	2200      	movs	r2, #0
   d6d3a:	4606      	mov	r6, r0
   d6d3c:	460f      	mov	r7, r1
   d6d3e:	4b42      	ldr	r3, [pc, #264]	; (d6e48 <atan+0x370>)
   d6d40:	4620      	mov	r0, r4
   d6d42:	4629      	mov	r1, r5
   d6d44:	f000 fa46 	bl	d71d4 <__aeabi_dmul>
   d6d48:	2200      	movs	r2, #0
   d6d4a:	4b3c      	ldr	r3, [pc, #240]	; (d6e3c <atan+0x364>)
   d6d4c:	f000 f890 	bl	d6e70 <__adddf3>
   d6d50:	4602      	mov	r2, r0
   d6d52:	460b      	mov	r3, r1
   d6d54:	4630      	mov	r0, r6
   d6d56:	4639      	mov	r1, r7
   d6d58:	f000 fb66 	bl	d7428 <__aeabi_ddiv>
   d6d5c:	f04f 0a02 	mov.w	sl, #2
   d6d60:	4604      	mov	r4, r0
   d6d62:	460d      	mov	r5, r1
   d6d64:	e6de      	b.n	d6b24 <atan+0x4c>
   d6d66:	462b      	mov	r3, r5
   d6d68:	ee10 2a10 	vmov	r2, s0
   d6d6c:	2000      	movs	r0, #0
   d6d6e:	4937      	ldr	r1, [pc, #220]	; (d6e4c <atan+0x374>)
   d6d70:	f000 fb5a 	bl	d7428 <__aeabi_ddiv>
   d6d74:	f04f 0a03 	mov.w	sl, #3
   d6d78:	4604      	mov	r4, r0
   d6d7a:	460d      	mov	r5, r1
   d6d7c:	e6d2      	b.n	d6b24 <atan+0x4c>
   d6d7e:	ee10 0a10 	vmov	r0, s0
   d6d82:	2200      	movs	r2, #0
   d6d84:	4b2d      	ldr	r3, [pc, #180]	; (d6e3c <atan+0x364>)
   d6d86:	4629      	mov	r1, r5
   d6d88:	f000 f870 	bl	d6e6c <__aeabi_dsub>
   d6d8c:	2200      	movs	r2, #0
   d6d8e:	4606      	mov	r6, r0
   d6d90:	460f      	mov	r7, r1
   d6d92:	4b2a      	ldr	r3, [pc, #168]	; (d6e3c <atan+0x364>)
   d6d94:	4620      	mov	r0, r4
   d6d96:	4629      	mov	r1, r5
   d6d98:	f000 f86a 	bl	d6e70 <__adddf3>
   d6d9c:	4602      	mov	r2, r0
   d6d9e:	460b      	mov	r3, r1
   d6da0:	4630      	mov	r0, r6
   d6da2:	4639      	mov	r1, r7
   d6da4:	f000 fb40 	bl	d7428 <__aeabi_ddiv>
   d6da8:	f04f 0a01 	mov.w	sl, #1
   d6dac:	4604      	mov	r4, r0
   d6dae:	460d      	mov	r5, r1
   d6db0:	e6b8      	b.n	d6b24 <atan+0x4c>
   d6db2:	bf00      	nop
   d6db4:	f3af 8000 	nop.w
   d6db8:	54442d18 	.word	0x54442d18
   d6dbc:	3ff921fb 	.word	0x3ff921fb
   d6dc0:	e322da11 	.word	0xe322da11
   d6dc4:	3f90ad3a 	.word	0x3f90ad3a
   d6dc8:	24760deb 	.word	0x24760deb
   d6dcc:	3fa97b4b 	.word	0x3fa97b4b
   d6dd0:	a0d03d51 	.word	0xa0d03d51
   d6dd4:	3fb10d66 	.word	0x3fb10d66
   d6dd8:	c54c206e 	.word	0xc54c206e
   d6ddc:	3fb745cd 	.word	0x3fb745cd
   d6de0:	920083ff 	.word	0x920083ff
   d6de4:	3fc24924 	.word	0x3fc24924
   d6de8:	5555550d 	.word	0x5555550d
   d6dec:	3fd55555 	.word	0x3fd55555
   d6df0:	2c6a6c2f 	.word	0x2c6a6c2f
   d6df4:	bfa2b444 	.word	0xbfa2b444
   d6df8:	52defd9a 	.word	0x52defd9a
   d6dfc:	3fadde2d 	.word	0x3fadde2d
   d6e00:	af749a6d 	.word	0xaf749a6d
   d6e04:	3fb3b0f2 	.word	0x3fb3b0f2
   d6e08:	fe231671 	.word	0xfe231671
   d6e0c:	3fbc71c6 	.word	0x3fbc71c6
   d6e10:	9998ebc4 	.word	0x9998ebc4
   d6e14:	3fc99999 	.word	0x3fc99999
   d6e18:	8800759c 	.word	0x8800759c
   d6e1c:	7e37e43c 	.word	0x7e37e43c
   d6e20:	54442d18 	.word	0x54442d18
   d6e24:	bff921fb 	.word	0xbff921fb
   d6e28:	440fffff 	.word	0x440fffff
   d6e2c:	7ff00000 	.word	0x7ff00000
   d6e30:	3fdbffff 	.word	0x3fdbffff
   d6e34:	000d7c80 	.word	0x000d7c80
   d6e38:	000d7c60 	.word	0x000d7c60
   d6e3c:	3ff00000 	.word	0x3ff00000
   d6e40:	3ff2ffff 	.word	0x3ff2ffff
   d6e44:	40037fff 	.word	0x40037fff
   d6e48:	3ff80000 	.word	0x3ff80000
   d6e4c:	bff00000 	.word	0xbff00000

000d6e50 <fabs>:
   d6e50:	ec53 2b10 	vmov	r2, r3, d0
   d6e54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d6e58:	ec43 2b10 	vmov	d0, r2, r3
   d6e5c:	4770      	bx	lr
   d6e5e:	bf00      	nop

000d6e60 <matherr>:
   d6e60:	2000      	movs	r0, #0
   d6e62:	4770      	bx	lr

000d6e64 <__aeabi_drsub>:
   d6e64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6e68:	e002      	b.n	d6e70 <__adddf3>
   d6e6a:	bf00      	nop

000d6e6c <__aeabi_dsub>:
   d6e6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6e70 <__adddf3>:
   d6e70:	b530      	push	{r4, r5, lr}
   d6e72:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6e76:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6e7a:	ea94 0f05 	teq	r4, r5
   d6e7e:	bf08      	it	eq
   d6e80:	ea90 0f02 	teqeq	r0, r2
   d6e84:	bf1f      	itttt	ne
   d6e86:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6e8a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6e8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6e92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6e96:	f000 80e2 	beq.w	d705e <__adddf3+0x1ee>
   d6e9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6e9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6ea2:	bfb8      	it	lt
   d6ea4:	426d      	neglt	r5, r5
   d6ea6:	dd0c      	ble.n	d6ec2 <__adddf3+0x52>
   d6ea8:	442c      	add	r4, r5
   d6eaa:	ea80 0202 	eor.w	r2, r0, r2
   d6eae:	ea81 0303 	eor.w	r3, r1, r3
   d6eb2:	ea82 0000 	eor.w	r0, r2, r0
   d6eb6:	ea83 0101 	eor.w	r1, r3, r1
   d6eba:	ea80 0202 	eor.w	r2, r0, r2
   d6ebe:	ea81 0303 	eor.w	r3, r1, r3
   d6ec2:	2d36      	cmp	r5, #54	; 0x36
   d6ec4:	bf88      	it	hi
   d6ec6:	bd30      	pophi	{r4, r5, pc}
   d6ec8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6ecc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6ed0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6ed4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6ed8:	d002      	beq.n	d6ee0 <__adddf3+0x70>
   d6eda:	4240      	negs	r0, r0
   d6edc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6ee0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6ee4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6ee8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6eec:	d002      	beq.n	d6ef4 <__adddf3+0x84>
   d6eee:	4252      	negs	r2, r2
   d6ef0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6ef4:	ea94 0f05 	teq	r4, r5
   d6ef8:	f000 80a7 	beq.w	d704a <__adddf3+0x1da>
   d6efc:	f1a4 0401 	sub.w	r4, r4, #1
   d6f00:	f1d5 0e20 	rsbs	lr, r5, #32
   d6f04:	db0d      	blt.n	d6f22 <__adddf3+0xb2>
   d6f06:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6f0a:	fa22 f205 	lsr.w	r2, r2, r5
   d6f0e:	1880      	adds	r0, r0, r2
   d6f10:	f141 0100 	adc.w	r1, r1, #0
   d6f14:	fa03 f20e 	lsl.w	r2, r3, lr
   d6f18:	1880      	adds	r0, r0, r2
   d6f1a:	fa43 f305 	asr.w	r3, r3, r5
   d6f1e:	4159      	adcs	r1, r3
   d6f20:	e00e      	b.n	d6f40 <__adddf3+0xd0>
   d6f22:	f1a5 0520 	sub.w	r5, r5, #32
   d6f26:	f10e 0e20 	add.w	lr, lr, #32
   d6f2a:	2a01      	cmp	r2, #1
   d6f2c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6f30:	bf28      	it	cs
   d6f32:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6f36:	fa43 f305 	asr.w	r3, r3, r5
   d6f3a:	18c0      	adds	r0, r0, r3
   d6f3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6f40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6f44:	d507      	bpl.n	d6f56 <__adddf3+0xe6>
   d6f46:	f04f 0e00 	mov.w	lr, #0
   d6f4a:	f1dc 0c00 	rsbs	ip, ip, #0
   d6f4e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6f52:	eb6e 0101 	sbc.w	r1, lr, r1
   d6f56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6f5a:	d31b      	bcc.n	d6f94 <__adddf3+0x124>
   d6f5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6f60:	d30c      	bcc.n	d6f7c <__adddf3+0x10c>
   d6f62:	0849      	lsrs	r1, r1, #1
   d6f64:	ea5f 0030 	movs.w	r0, r0, rrx
   d6f68:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6f6c:	f104 0401 	add.w	r4, r4, #1
   d6f70:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6f74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6f78:	f080 809a 	bcs.w	d70b0 <__adddf3+0x240>
   d6f7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6f80:	bf08      	it	eq
   d6f82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6f86:	f150 0000 	adcs.w	r0, r0, #0
   d6f8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6f8e:	ea41 0105 	orr.w	r1, r1, r5
   d6f92:	bd30      	pop	{r4, r5, pc}
   d6f94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6f98:	4140      	adcs	r0, r0
   d6f9a:	eb41 0101 	adc.w	r1, r1, r1
   d6f9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6fa2:	f1a4 0401 	sub.w	r4, r4, #1
   d6fa6:	d1e9      	bne.n	d6f7c <__adddf3+0x10c>
   d6fa8:	f091 0f00 	teq	r1, #0
   d6fac:	bf04      	itt	eq
   d6fae:	4601      	moveq	r1, r0
   d6fb0:	2000      	moveq	r0, #0
   d6fb2:	fab1 f381 	clz	r3, r1
   d6fb6:	bf08      	it	eq
   d6fb8:	3320      	addeq	r3, #32
   d6fba:	f1a3 030b 	sub.w	r3, r3, #11
   d6fbe:	f1b3 0220 	subs.w	r2, r3, #32
   d6fc2:	da0c      	bge.n	d6fde <__adddf3+0x16e>
   d6fc4:	320c      	adds	r2, #12
   d6fc6:	dd08      	ble.n	d6fda <__adddf3+0x16a>
   d6fc8:	f102 0c14 	add.w	ip, r2, #20
   d6fcc:	f1c2 020c 	rsb	r2, r2, #12
   d6fd0:	fa01 f00c 	lsl.w	r0, r1, ip
   d6fd4:	fa21 f102 	lsr.w	r1, r1, r2
   d6fd8:	e00c      	b.n	d6ff4 <__adddf3+0x184>
   d6fda:	f102 0214 	add.w	r2, r2, #20
   d6fde:	bfd8      	it	le
   d6fe0:	f1c2 0c20 	rsble	ip, r2, #32
   d6fe4:	fa01 f102 	lsl.w	r1, r1, r2
   d6fe8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6fec:	bfdc      	itt	le
   d6fee:	ea41 010c 	orrle.w	r1, r1, ip
   d6ff2:	4090      	lslle	r0, r2
   d6ff4:	1ae4      	subs	r4, r4, r3
   d6ff6:	bfa2      	ittt	ge
   d6ff8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6ffc:	4329      	orrge	r1, r5
   d6ffe:	bd30      	popge	{r4, r5, pc}
   d7000:	ea6f 0404 	mvn.w	r4, r4
   d7004:	3c1f      	subs	r4, #31
   d7006:	da1c      	bge.n	d7042 <__adddf3+0x1d2>
   d7008:	340c      	adds	r4, #12
   d700a:	dc0e      	bgt.n	d702a <__adddf3+0x1ba>
   d700c:	f104 0414 	add.w	r4, r4, #20
   d7010:	f1c4 0220 	rsb	r2, r4, #32
   d7014:	fa20 f004 	lsr.w	r0, r0, r4
   d7018:	fa01 f302 	lsl.w	r3, r1, r2
   d701c:	ea40 0003 	orr.w	r0, r0, r3
   d7020:	fa21 f304 	lsr.w	r3, r1, r4
   d7024:	ea45 0103 	orr.w	r1, r5, r3
   d7028:	bd30      	pop	{r4, r5, pc}
   d702a:	f1c4 040c 	rsb	r4, r4, #12
   d702e:	f1c4 0220 	rsb	r2, r4, #32
   d7032:	fa20 f002 	lsr.w	r0, r0, r2
   d7036:	fa01 f304 	lsl.w	r3, r1, r4
   d703a:	ea40 0003 	orr.w	r0, r0, r3
   d703e:	4629      	mov	r1, r5
   d7040:	bd30      	pop	{r4, r5, pc}
   d7042:	fa21 f004 	lsr.w	r0, r1, r4
   d7046:	4629      	mov	r1, r5
   d7048:	bd30      	pop	{r4, r5, pc}
   d704a:	f094 0f00 	teq	r4, #0
   d704e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7052:	bf06      	itte	eq
   d7054:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7058:	3401      	addeq	r4, #1
   d705a:	3d01      	subne	r5, #1
   d705c:	e74e      	b.n	d6efc <__adddf3+0x8c>
   d705e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7062:	bf18      	it	ne
   d7064:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7068:	d029      	beq.n	d70be <__adddf3+0x24e>
   d706a:	ea94 0f05 	teq	r4, r5
   d706e:	bf08      	it	eq
   d7070:	ea90 0f02 	teqeq	r0, r2
   d7074:	d005      	beq.n	d7082 <__adddf3+0x212>
   d7076:	ea54 0c00 	orrs.w	ip, r4, r0
   d707a:	bf04      	itt	eq
   d707c:	4619      	moveq	r1, r3
   d707e:	4610      	moveq	r0, r2
   d7080:	bd30      	pop	{r4, r5, pc}
   d7082:	ea91 0f03 	teq	r1, r3
   d7086:	bf1e      	ittt	ne
   d7088:	2100      	movne	r1, #0
   d708a:	2000      	movne	r0, #0
   d708c:	bd30      	popne	{r4, r5, pc}
   d708e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7092:	d105      	bne.n	d70a0 <__adddf3+0x230>
   d7094:	0040      	lsls	r0, r0, #1
   d7096:	4149      	adcs	r1, r1
   d7098:	bf28      	it	cs
   d709a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d709e:	bd30      	pop	{r4, r5, pc}
   d70a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d70a4:	bf3c      	itt	cc
   d70a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d70aa:	bd30      	popcc	{r4, r5, pc}
   d70ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d70b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d70b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d70b8:	f04f 0000 	mov.w	r0, #0
   d70bc:	bd30      	pop	{r4, r5, pc}
   d70be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d70c2:	bf1a      	itte	ne
   d70c4:	4619      	movne	r1, r3
   d70c6:	4610      	movne	r0, r2
   d70c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d70cc:	bf1c      	itt	ne
   d70ce:	460b      	movne	r3, r1
   d70d0:	4602      	movne	r2, r0
   d70d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d70d6:	bf06      	itte	eq
   d70d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d70dc:	ea91 0f03 	teqeq	r1, r3
   d70e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d70e4:	bd30      	pop	{r4, r5, pc}
   d70e6:	bf00      	nop

000d70e8 <__aeabi_ui2d>:
   d70e8:	f090 0f00 	teq	r0, #0
   d70ec:	bf04      	itt	eq
   d70ee:	2100      	moveq	r1, #0
   d70f0:	4770      	bxeq	lr
   d70f2:	b530      	push	{r4, r5, lr}
   d70f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d70f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d70fc:	f04f 0500 	mov.w	r5, #0
   d7100:	f04f 0100 	mov.w	r1, #0
   d7104:	e750      	b.n	d6fa8 <__adddf3+0x138>
   d7106:	bf00      	nop

000d7108 <__aeabi_i2d>:
   d7108:	f090 0f00 	teq	r0, #0
   d710c:	bf04      	itt	eq
   d710e:	2100      	moveq	r1, #0
   d7110:	4770      	bxeq	lr
   d7112:	b530      	push	{r4, r5, lr}
   d7114:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7118:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d711c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7120:	bf48      	it	mi
   d7122:	4240      	negmi	r0, r0
   d7124:	f04f 0100 	mov.w	r1, #0
   d7128:	e73e      	b.n	d6fa8 <__adddf3+0x138>
   d712a:	bf00      	nop

000d712c <__aeabi_f2d>:
   d712c:	0042      	lsls	r2, r0, #1
   d712e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7132:	ea4f 0131 	mov.w	r1, r1, rrx
   d7136:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d713a:	bf1f      	itttt	ne
   d713c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7140:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7144:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7148:	4770      	bxne	lr
   d714a:	f092 0f00 	teq	r2, #0
   d714e:	bf14      	ite	ne
   d7150:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7154:	4770      	bxeq	lr
   d7156:	b530      	push	{r4, r5, lr}
   d7158:	f44f 7460 	mov.w	r4, #896	; 0x380
   d715c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7160:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7164:	e720      	b.n	d6fa8 <__adddf3+0x138>
   d7166:	bf00      	nop

000d7168 <__aeabi_ul2d>:
   d7168:	ea50 0201 	orrs.w	r2, r0, r1
   d716c:	bf08      	it	eq
   d716e:	4770      	bxeq	lr
   d7170:	b530      	push	{r4, r5, lr}
   d7172:	f04f 0500 	mov.w	r5, #0
   d7176:	e00a      	b.n	d718e <__aeabi_l2d+0x16>

000d7178 <__aeabi_l2d>:
   d7178:	ea50 0201 	orrs.w	r2, r0, r1
   d717c:	bf08      	it	eq
   d717e:	4770      	bxeq	lr
   d7180:	b530      	push	{r4, r5, lr}
   d7182:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7186:	d502      	bpl.n	d718e <__aeabi_l2d+0x16>
   d7188:	4240      	negs	r0, r0
   d718a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d718e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7192:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7196:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d719a:	f43f aedc 	beq.w	d6f56 <__adddf3+0xe6>
   d719e:	f04f 0203 	mov.w	r2, #3
   d71a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d71a6:	bf18      	it	ne
   d71a8:	3203      	addne	r2, #3
   d71aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d71ae:	bf18      	it	ne
   d71b0:	3203      	addne	r2, #3
   d71b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d71b6:	f1c2 0320 	rsb	r3, r2, #32
   d71ba:	fa00 fc03 	lsl.w	ip, r0, r3
   d71be:	fa20 f002 	lsr.w	r0, r0, r2
   d71c2:	fa01 fe03 	lsl.w	lr, r1, r3
   d71c6:	ea40 000e 	orr.w	r0, r0, lr
   d71ca:	fa21 f102 	lsr.w	r1, r1, r2
   d71ce:	4414      	add	r4, r2
   d71d0:	e6c1      	b.n	d6f56 <__adddf3+0xe6>
   d71d2:	bf00      	nop

000d71d4 <__aeabi_dmul>:
   d71d4:	b570      	push	{r4, r5, r6, lr}
   d71d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d71da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d71de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d71e2:	bf1d      	ittte	ne
   d71e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d71e8:	ea94 0f0c 	teqne	r4, ip
   d71ec:	ea95 0f0c 	teqne	r5, ip
   d71f0:	f000 f8de 	bleq	d73b0 <__aeabi_dmul+0x1dc>
   d71f4:	442c      	add	r4, r5
   d71f6:	ea81 0603 	eor.w	r6, r1, r3
   d71fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d71fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7202:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7206:	bf18      	it	ne
   d7208:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d720c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7214:	d038      	beq.n	d7288 <__aeabi_dmul+0xb4>
   d7216:	fba0 ce02 	umull	ip, lr, r0, r2
   d721a:	f04f 0500 	mov.w	r5, #0
   d721e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7222:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7226:	fbe0 e503 	umlal	lr, r5, r0, r3
   d722a:	f04f 0600 	mov.w	r6, #0
   d722e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7232:	f09c 0f00 	teq	ip, #0
   d7236:	bf18      	it	ne
   d7238:	f04e 0e01 	orrne.w	lr, lr, #1
   d723c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7240:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7244:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7248:	d204      	bcs.n	d7254 <__aeabi_dmul+0x80>
   d724a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d724e:	416d      	adcs	r5, r5
   d7250:	eb46 0606 	adc.w	r6, r6, r6
   d7254:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7258:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d725c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7260:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7264:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7268:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d726c:	bf88      	it	hi
   d726e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7272:	d81e      	bhi.n	d72b2 <__aeabi_dmul+0xde>
   d7274:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7278:	bf08      	it	eq
   d727a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d727e:	f150 0000 	adcs.w	r0, r0, #0
   d7282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7286:	bd70      	pop	{r4, r5, r6, pc}
   d7288:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d728c:	ea46 0101 	orr.w	r1, r6, r1
   d7290:	ea40 0002 	orr.w	r0, r0, r2
   d7294:	ea81 0103 	eor.w	r1, r1, r3
   d7298:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d729c:	bfc2      	ittt	gt
   d729e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d72a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d72a6:	bd70      	popgt	{r4, r5, r6, pc}
   d72a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d72ac:	f04f 0e00 	mov.w	lr, #0
   d72b0:	3c01      	subs	r4, #1
   d72b2:	f300 80ab 	bgt.w	d740c <__aeabi_dmul+0x238>
   d72b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d72ba:	bfde      	ittt	le
   d72bc:	2000      	movle	r0, #0
   d72be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d72c2:	bd70      	pople	{r4, r5, r6, pc}
   d72c4:	f1c4 0400 	rsb	r4, r4, #0
   d72c8:	3c20      	subs	r4, #32
   d72ca:	da35      	bge.n	d7338 <__aeabi_dmul+0x164>
   d72cc:	340c      	adds	r4, #12
   d72ce:	dc1b      	bgt.n	d7308 <__aeabi_dmul+0x134>
   d72d0:	f104 0414 	add.w	r4, r4, #20
   d72d4:	f1c4 0520 	rsb	r5, r4, #32
   d72d8:	fa00 f305 	lsl.w	r3, r0, r5
   d72dc:	fa20 f004 	lsr.w	r0, r0, r4
   d72e0:	fa01 f205 	lsl.w	r2, r1, r5
   d72e4:	ea40 0002 	orr.w	r0, r0, r2
   d72e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d72ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d72f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d72f4:	fa21 f604 	lsr.w	r6, r1, r4
   d72f8:	eb42 0106 	adc.w	r1, r2, r6
   d72fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7300:	bf08      	it	eq
   d7302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7306:	bd70      	pop	{r4, r5, r6, pc}
   d7308:	f1c4 040c 	rsb	r4, r4, #12
   d730c:	f1c4 0520 	rsb	r5, r4, #32
   d7310:	fa00 f304 	lsl.w	r3, r0, r4
   d7314:	fa20 f005 	lsr.w	r0, r0, r5
   d7318:	fa01 f204 	lsl.w	r2, r1, r4
   d731c:	ea40 0002 	orr.w	r0, r0, r2
   d7320:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7328:	f141 0100 	adc.w	r1, r1, #0
   d732c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7330:	bf08      	it	eq
   d7332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7336:	bd70      	pop	{r4, r5, r6, pc}
   d7338:	f1c4 0520 	rsb	r5, r4, #32
   d733c:	fa00 f205 	lsl.w	r2, r0, r5
   d7340:	ea4e 0e02 	orr.w	lr, lr, r2
   d7344:	fa20 f304 	lsr.w	r3, r0, r4
   d7348:	fa01 f205 	lsl.w	r2, r1, r5
   d734c:	ea43 0302 	orr.w	r3, r3, r2
   d7350:	fa21 f004 	lsr.w	r0, r1, r4
   d7354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7358:	fa21 f204 	lsr.w	r2, r1, r4
   d735c:	ea20 0002 	bic.w	r0, r0, r2
   d7360:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7364:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7368:	bf08      	it	eq
   d736a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d736e:	bd70      	pop	{r4, r5, r6, pc}
   d7370:	f094 0f00 	teq	r4, #0
   d7374:	d10f      	bne.n	d7396 <__aeabi_dmul+0x1c2>
   d7376:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d737a:	0040      	lsls	r0, r0, #1
   d737c:	eb41 0101 	adc.w	r1, r1, r1
   d7380:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7384:	bf08      	it	eq
   d7386:	3c01      	subeq	r4, #1
   d7388:	d0f7      	beq.n	d737a <__aeabi_dmul+0x1a6>
   d738a:	ea41 0106 	orr.w	r1, r1, r6
   d738e:	f095 0f00 	teq	r5, #0
   d7392:	bf18      	it	ne
   d7394:	4770      	bxne	lr
   d7396:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d739a:	0052      	lsls	r2, r2, #1
   d739c:	eb43 0303 	adc.w	r3, r3, r3
   d73a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d73a4:	bf08      	it	eq
   d73a6:	3d01      	subeq	r5, #1
   d73a8:	d0f7      	beq.n	d739a <__aeabi_dmul+0x1c6>
   d73aa:	ea43 0306 	orr.w	r3, r3, r6
   d73ae:	4770      	bx	lr
   d73b0:	ea94 0f0c 	teq	r4, ip
   d73b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d73b8:	bf18      	it	ne
   d73ba:	ea95 0f0c 	teqne	r5, ip
   d73be:	d00c      	beq.n	d73da <__aeabi_dmul+0x206>
   d73c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d73c4:	bf18      	it	ne
   d73c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d73ca:	d1d1      	bne.n	d7370 <__aeabi_dmul+0x19c>
   d73cc:	ea81 0103 	eor.w	r1, r1, r3
   d73d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d73d4:	f04f 0000 	mov.w	r0, #0
   d73d8:	bd70      	pop	{r4, r5, r6, pc}
   d73da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d73de:	bf06      	itte	eq
   d73e0:	4610      	moveq	r0, r2
   d73e2:	4619      	moveq	r1, r3
   d73e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d73e8:	d019      	beq.n	d741e <__aeabi_dmul+0x24a>
   d73ea:	ea94 0f0c 	teq	r4, ip
   d73ee:	d102      	bne.n	d73f6 <__aeabi_dmul+0x222>
   d73f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d73f4:	d113      	bne.n	d741e <__aeabi_dmul+0x24a>
   d73f6:	ea95 0f0c 	teq	r5, ip
   d73fa:	d105      	bne.n	d7408 <__aeabi_dmul+0x234>
   d73fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7400:	bf1c      	itt	ne
   d7402:	4610      	movne	r0, r2
   d7404:	4619      	movne	r1, r3
   d7406:	d10a      	bne.n	d741e <__aeabi_dmul+0x24a>
   d7408:	ea81 0103 	eor.w	r1, r1, r3
   d740c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7410:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7414:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7418:	f04f 0000 	mov.w	r0, #0
   d741c:	bd70      	pop	{r4, r5, r6, pc}
   d741e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7422:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7426:	bd70      	pop	{r4, r5, r6, pc}

000d7428 <__aeabi_ddiv>:
   d7428:	b570      	push	{r4, r5, r6, lr}
   d742a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d742e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7432:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7436:	bf1d      	ittte	ne
   d7438:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d743c:	ea94 0f0c 	teqne	r4, ip
   d7440:	ea95 0f0c 	teqne	r5, ip
   d7444:	f000 f8a7 	bleq	d7596 <__aeabi_ddiv+0x16e>
   d7448:	eba4 0405 	sub.w	r4, r4, r5
   d744c:	ea81 0e03 	eor.w	lr, r1, r3
   d7450:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7454:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7458:	f000 8088 	beq.w	d756c <__aeabi_ddiv+0x144>
   d745c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7460:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7464:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7468:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d746c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7470:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7474:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7478:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d747c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7480:	429d      	cmp	r5, r3
   d7482:	bf08      	it	eq
   d7484:	4296      	cmpeq	r6, r2
   d7486:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d748a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d748e:	d202      	bcs.n	d7496 <__aeabi_ddiv+0x6e>
   d7490:	085b      	lsrs	r3, r3, #1
   d7492:	ea4f 0232 	mov.w	r2, r2, rrx
   d7496:	1ab6      	subs	r6, r6, r2
   d7498:	eb65 0503 	sbc.w	r5, r5, r3
   d749c:	085b      	lsrs	r3, r3, #1
   d749e:	ea4f 0232 	mov.w	r2, r2, rrx
   d74a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d74a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d74aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d74ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d74b2:	bf22      	ittt	cs
   d74b4:	1ab6      	subcs	r6, r6, r2
   d74b6:	4675      	movcs	r5, lr
   d74b8:	ea40 000c 	orrcs.w	r0, r0, ip
   d74bc:	085b      	lsrs	r3, r3, #1
   d74be:	ea4f 0232 	mov.w	r2, r2, rrx
   d74c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d74c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d74ca:	bf22      	ittt	cs
   d74cc:	1ab6      	subcs	r6, r6, r2
   d74ce:	4675      	movcs	r5, lr
   d74d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d74d4:	085b      	lsrs	r3, r3, #1
   d74d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d74da:	ebb6 0e02 	subs.w	lr, r6, r2
   d74de:	eb75 0e03 	sbcs.w	lr, r5, r3
   d74e2:	bf22      	ittt	cs
   d74e4:	1ab6      	subcs	r6, r6, r2
   d74e6:	4675      	movcs	r5, lr
   d74e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d74ec:	085b      	lsrs	r3, r3, #1
   d74ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d74f2:	ebb6 0e02 	subs.w	lr, r6, r2
   d74f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d74fa:	bf22      	ittt	cs
   d74fc:	1ab6      	subcs	r6, r6, r2
   d74fe:	4675      	movcs	r5, lr
   d7500:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7504:	ea55 0e06 	orrs.w	lr, r5, r6
   d7508:	d018      	beq.n	d753c <__aeabi_ddiv+0x114>
   d750a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d750e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7512:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7516:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d751a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d751e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7522:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7526:	d1c0      	bne.n	d74aa <__aeabi_ddiv+0x82>
   d7528:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d752c:	d10b      	bne.n	d7546 <__aeabi_ddiv+0x11e>
   d752e:	ea41 0100 	orr.w	r1, r1, r0
   d7532:	f04f 0000 	mov.w	r0, #0
   d7536:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d753a:	e7b6      	b.n	d74aa <__aeabi_ddiv+0x82>
   d753c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7540:	bf04      	itt	eq
   d7542:	4301      	orreq	r1, r0
   d7544:	2000      	moveq	r0, #0
   d7546:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d754a:	bf88      	it	hi
   d754c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7550:	f63f aeaf 	bhi.w	d72b2 <__aeabi_dmul+0xde>
   d7554:	ebb5 0c03 	subs.w	ip, r5, r3
   d7558:	bf04      	itt	eq
   d755a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d755e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7562:	f150 0000 	adcs.w	r0, r0, #0
   d7566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d756a:	bd70      	pop	{r4, r5, r6, pc}
   d756c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7570:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7574:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7578:	bfc2      	ittt	gt
   d757a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d757e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7582:	bd70      	popgt	{r4, r5, r6, pc}
   d7584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7588:	f04f 0e00 	mov.w	lr, #0
   d758c:	3c01      	subs	r4, #1
   d758e:	e690      	b.n	d72b2 <__aeabi_dmul+0xde>
   d7590:	ea45 0e06 	orr.w	lr, r5, r6
   d7594:	e68d      	b.n	d72b2 <__aeabi_dmul+0xde>
   d7596:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d759a:	ea94 0f0c 	teq	r4, ip
   d759e:	bf08      	it	eq
   d75a0:	ea95 0f0c 	teqeq	r5, ip
   d75a4:	f43f af3b 	beq.w	d741e <__aeabi_dmul+0x24a>
   d75a8:	ea94 0f0c 	teq	r4, ip
   d75ac:	d10a      	bne.n	d75c4 <__aeabi_ddiv+0x19c>
   d75ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d75b2:	f47f af34 	bne.w	d741e <__aeabi_dmul+0x24a>
   d75b6:	ea95 0f0c 	teq	r5, ip
   d75ba:	f47f af25 	bne.w	d7408 <__aeabi_dmul+0x234>
   d75be:	4610      	mov	r0, r2
   d75c0:	4619      	mov	r1, r3
   d75c2:	e72c      	b.n	d741e <__aeabi_dmul+0x24a>
   d75c4:	ea95 0f0c 	teq	r5, ip
   d75c8:	d106      	bne.n	d75d8 <__aeabi_ddiv+0x1b0>
   d75ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d75ce:	f43f aefd 	beq.w	d73cc <__aeabi_dmul+0x1f8>
   d75d2:	4610      	mov	r0, r2
   d75d4:	4619      	mov	r1, r3
   d75d6:	e722      	b.n	d741e <__aeabi_dmul+0x24a>
   d75d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d75dc:	bf18      	it	ne
   d75de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d75e2:	f47f aec5 	bne.w	d7370 <__aeabi_dmul+0x19c>
   d75e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d75ea:	f47f af0d 	bne.w	d7408 <__aeabi_dmul+0x234>
   d75ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d75f2:	f47f aeeb 	bne.w	d73cc <__aeabi_dmul+0x1f8>
   d75f6:	e712      	b.n	d741e <__aeabi_dmul+0x24a>

000d75f8 <__gedf2>:
   d75f8:	f04f 3cff 	mov.w	ip, #4294967295
   d75fc:	e006      	b.n	d760c <__cmpdf2+0x4>
   d75fe:	bf00      	nop

000d7600 <__ledf2>:
   d7600:	f04f 0c01 	mov.w	ip, #1
   d7604:	e002      	b.n	d760c <__cmpdf2+0x4>
   d7606:	bf00      	nop

000d7608 <__cmpdf2>:
   d7608:	f04f 0c01 	mov.w	ip, #1
   d760c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d761c:	bf18      	it	ne
   d761e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7622:	d01b      	beq.n	d765c <__cmpdf2+0x54>
   d7624:	b001      	add	sp, #4
   d7626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d762a:	bf0c      	ite	eq
   d762c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7630:	ea91 0f03 	teqne	r1, r3
   d7634:	bf02      	ittt	eq
   d7636:	ea90 0f02 	teqeq	r0, r2
   d763a:	2000      	moveq	r0, #0
   d763c:	4770      	bxeq	lr
   d763e:	f110 0f00 	cmn.w	r0, #0
   d7642:	ea91 0f03 	teq	r1, r3
   d7646:	bf58      	it	pl
   d7648:	4299      	cmppl	r1, r3
   d764a:	bf08      	it	eq
   d764c:	4290      	cmpeq	r0, r2
   d764e:	bf2c      	ite	cs
   d7650:	17d8      	asrcs	r0, r3, #31
   d7652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7656:	f040 0001 	orr.w	r0, r0, #1
   d765a:	4770      	bx	lr
   d765c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7664:	d102      	bne.n	d766c <__cmpdf2+0x64>
   d7666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d766a:	d107      	bne.n	d767c <__cmpdf2+0x74>
   d766c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7674:	d1d6      	bne.n	d7624 <__cmpdf2+0x1c>
   d7676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d767a:	d0d3      	beq.n	d7624 <__cmpdf2+0x1c>
   d767c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7680:	4770      	bx	lr
   d7682:	bf00      	nop

000d7684 <__aeabi_cdrcmple>:
   d7684:	4684      	mov	ip, r0
   d7686:	4610      	mov	r0, r2
   d7688:	4662      	mov	r2, ip
   d768a:	468c      	mov	ip, r1
   d768c:	4619      	mov	r1, r3
   d768e:	4663      	mov	r3, ip
   d7690:	e000      	b.n	d7694 <__aeabi_cdcmpeq>
   d7692:	bf00      	nop

000d7694 <__aeabi_cdcmpeq>:
   d7694:	b501      	push	{r0, lr}
   d7696:	f7ff ffb7 	bl	d7608 <__cmpdf2>
   d769a:	2800      	cmp	r0, #0
   d769c:	bf48      	it	mi
   d769e:	f110 0f00 	cmnmi.w	r0, #0
   d76a2:	bd01      	pop	{r0, pc}

000d76a4 <__aeabi_dcmpeq>:
   d76a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d76a8:	f7ff fff4 	bl	d7694 <__aeabi_cdcmpeq>
   d76ac:	bf0c      	ite	eq
   d76ae:	2001      	moveq	r0, #1
   d76b0:	2000      	movne	r0, #0
   d76b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d76b6:	bf00      	nop

000d76b8 <__aeabi_dcmplt>:
   d76b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d76bc:	f7ff ffea 	bl	d7694 <__aeabi_cdcmpeq>
   d76c0:	bf34      	ite	cc
   d76c2:	2001      	movcc	r0, #1
   d76c4:	2000      	movcs	r0, #0
   d76c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d76ca:	bf00      	nop

000d76cc <__aeabi_dcmple>:
   d76cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d76d0:	f7ff ffe0 	bl	d7694 <__aeabi_cdcmpeq>
   d76d4:	bf94      	ite	ls
   d76d6:	2001      	movls	r0, #1
   d76d8:	2000      	movhi	r0, #0
   d76da:	f85d fb08 	ldr.w	pc, [sp], #8
   d76de:	bf00      	nop

000d76e0 <__aeabi_dcmpge>:
   d76e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d76e4:	f7ff ffce 	bl	d7684 <__aeabi_cdrcmple>
   d76e8:	bf94      	ite	ls
   d76ea:	2001      	movls	r0, #1
   d76ec:	2000      	movhi	r0, #0
   d76ee:	f85d fb08 	ldr.w	pc, [sp], #8
   d76f2:	bf00      	nop

000d76f4 <__aeabi_dcmpgt>:
   d76f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d76f8:	f7ff ffc4 	bl	d7684 <__aeabi_cdrcmple>
   d76fc:	bf34      	ite	cc
   d76fe:	2001      	movcc	r0, #1
   d7700:	2000      	movcs	r0, #0
   d7702:	f85d fb08 	ldr.w	pc, [sp], #8
   d7706:	bf00      	nop

000d7708 <__aeabi_dcmpun>:
   d7708:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d770c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7710:	d102      	bne.n	d7718 <__aeabi_dcmpun+0x10>
   d7712:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7716:	d10a      	bne.n	d772e <__aeabi_dcmpun+0x26>
   d7718:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d771c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7720:	d102      	bne.n	d7728 <__aeabi_dcmpun+0x20>
   d7722:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7726:	d102      	bne.n	d772e <__aeabi_dcmpun+0x26>
   d7728:	f04f 0000 	mov.w	r0, #0
   d772c:	4770      	bx	lr
   d772e:	f04f 0001 	mov.w	r0, #1
   d7732:	4770      	bx	lr

000d7734 <__aeabi_d2f>:
   d7734:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7738:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d773c:	bf24      	itt	cs
   d773e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7742:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7746:	d90d      	bls.n	d7764 <__aeabi_d2f+0x30>
   d7748:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d774c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7750:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7754:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7758:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d775c:	bf08      	it	eq
   d775e:	f020 0001 	biceq.w	r0, r0, #1
   d7762:	4770      	bx	lr
   d7764:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7768:	d121      	bne.n	d77ae <__aeabi_d2f+0x7a>
   d776a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d776e:	bfbc      	itt	lt
   d7770:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7774:	4770      	bxlt	lr
   d7776:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d777a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d777e:	f1c2 0218 	rsb	r2, r2, #24
   d7782:	f1c2 0c20 	rsb	ip, r2, #32
   d7786:	fa10 f30c 	lsls.w	r3, r0, ip
   d778a:	fa20 f002 	lsr.w	r0, r0, r2
   d778e:	bf18      	it	ne
   d7790:	f040 0001 	orrne.w	r0, r0, #1
   d7794:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7798:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d779c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d77a0:	ea40 000c 	orr.w	r0, r0, ip
   d77a4:	fa23 f302 	lsr.w	r3, r3, r2
   d77a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d77ac:	e7cc      	b.n	d7748 <__aeabi_d2f+0x14>
   d77ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d77b2:	d107      	bne.n	d77c4 <__aeabi_d2f+0x90>
   d77b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d77b8:	bf1e      	ittt	ne
   d77ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d77be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d77c2:	4770      	bxne	lr
   d77c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d77c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d77cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d77d0:	4770      	bx	lr
   d77d2:	bf00      	nop

000d77d4 <__cxa_atexit>:
   d77d4:	b510      	push	{r4, lr}
   d77d6:	4c05      	ldr	r4, [pc, #20]	; (d77ec <__cxa_atexit+0x18>)
   d77d8:	4613      	mov	r3, r2
   d77da:	b12c      	cbz	r4, d77e8 <__cxa_atexit+0x14>
   d77dc:	460a      	mov	r2, r1
   d77de:	4601      	mov	r1, r0
   d77e0:	2002      	movs	r0, #2
   d77e2:	f3af 8000 	nop.w
   d77e6:	bd10      	pop	{r4, pc}
   d77e8:	4620      	mov	r0, r4
   d77ea:	bd10      	pop	{r4, pc}
   d77ec:	00000000 	.word	0x00000000

000d77f0 <memcpy>:
   d77f0:	b510      	push	{r4, lr}
   d77f2:	1e43      	subs	r3, r0, #1
   d77f4:	440a      	add	r2, r1
   d77f6:	4291      	cmp	r1, r2
   d77f8:	d004      	beq.n	d7804 <memcpy+0x14>
   d77fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d77fe:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7802:	e7f8      	b.n	d77f6 <memcpy+0x6>
   d7804:	bd10      	pop	{r4, pc}

000d7806 <memset>:
   d7806:	4402      	add	r2, r0
   d7808:	4603      	mov	r3, r0
   d780a:	4293      	cmp	r3, r2
   d780c:	d002      	beq.n	d7814 <memset+0xe>
   d780e:	f803 1b01 	strb.w	r1, [r3], #1
   d7812:	e7fa      	b.n	d780a <memset+0x4>
   d7814:	4770      	bx	lr
	...

000d7818 <srand>:
   d7818:	b538      	push	{r3, r4, r5, lr}
   d781a:	4b12      	ldr	r3, [pc, #72]	; (d7864 <srand+0x4c>)
   d781c:	681c      	ldr	r4, [r3, #0]
   d781e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7820:	4605      	mov	r5, r0
   d7822:	b9d3      	cbnz	r3, d785a <srand+0x42>
   d7824:	2018      	movs	r0, #24
   d7826:	f7fd fc5d 	bl	d50e4 <malloc>
   d782a:	f243 330e 	movw	r3, #13070	; 0x330e
   d782e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7830:	8003      	strh	r3, [r0, #0]
   d7832:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7836:	8043      	strh	r3, [r0, #2]
   d7838:	f241 2334 	movw	r3, #4660	; 0x1234
   d783c:	8083      	strh	r3, [r0, #4]
   d783e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7842:	80c3      	strh	r3, [r0, #6]
   d7844:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7848:	8103      	strh	r3, [r0, #8]
   d784a:	2305      	movs	r3, #5
   d784c:	8143      	strh	r3, [r0, #10]
   d784e:	230b      	movs	r3, #11
   d7850:	8183      	strh	r3, [r0, #12]
   d7852:	2201      	movs	r2, #1
   d7854:	2300      	movs	r3, #0
   d7856:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d785a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d785c:	2200      	movs	r2, #0
   d785e:	611d      	str	r5, [r3, #16]
   d7860:	615a      	str	r2, [r3, #20]
   d7862:	bd38      	pop	{r3, r4, r5, pc}
   d7864:	2003dda4 	.word	0x2003dda4

000d7868 <strdup>:
   d7868:	4b02      	ldr	r3, [pc, #8]	; (d7874 <strdup+0xc>)
   d786a:	4601      	mov	r1, r0
   d786c:	6818      	ldr	r0, [r3, #0]
   d786e:	f000 b803 	b.w	d7878 <_strdup_r>
   d7872:	bf00      	nop
   d7874:	2003dda4 	.word	0x2003dda4

000d7878 <_strdup_r>:
   d7878:	b570      	push	{r4, r5, r6, lr}
   d787a:	4606      	mov	r6, r0
   d787c:	4608      	mov	r0, r1
   d787e:	460c      	mov	r4, r1
   d7880:	f000 f80d 	bl	d789e <strlen>
   d7884:	1c45      	adds	r5, r0, #1
   d7886:	4629      	mov	r1, r5
   d7888:	4630      	mov	r0, r6
   d788a:	f7fd fc53 	bl	d5134 <_malloc_r>
   d788e:	4606      	mov	r6, r0
   d7890:	b118      	cbz	r0, d789a <_strdup_r+0x22>
   d7892:	462a      	mov	r2, r5
   d7894:	4621      	mov	r1, r4
   d7896:	f7ff ffab 	bl	d77f0 <memcpy>
   d789a:	4630      	mov	r0, r6
   d789c:	bd70      	pop	{r4, r5, r6, pc}

000d789e <strlen>:
   d789e:	4603      	mov	r3, r0
   d78a0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d78a4:	2a00      	cmp	r2, #0
   d78a6:	d1fb      	bne.n	d78a0 <strlen+0x2>
   d78a8:	1a18      	subs	r0, r3, r0
   d78aa:	3801      	subs	r0, #1
   d78ac:	4770      	bx	lr

000d78ae <link_code_end>:
	...

000d78b0 <dynalib_user>:
   d78b0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d78c0:	0000 0000                                   ....

000d78c4 <_ZL17gyroCalibration_1>:
   d78c4:	5fea 4059 cab9 3e5f c748 bf91               ._Y@.._>H...

000d78d0 <_ZL18accelCalibration_1>:
   d78d0:	a414 3c06 3d28 3e92 3a77 3e24 7254 6e61     ...<(=.>w:$>Tran
   d78e0:	6d73 7369 6973 6e6f 6220 6765 6e69 2e2e     smission begin..
   d78f0:	002e 7277 7469 6e69 2067 202d 6425 7320     ..writing - %d s
   d7900:	6275 6441 7264 7365 0073 7277 7469 6e69     ubAddress.writin
   d7910:	2067 202d 6425 6420 7461 0061 7254 6e61     g - %d data.Tran
   d7920:	6d73 7369 6973 6e6f 7320 6375 6563 7373     smission success
   d7930:	7566 216c 5400 6172 736e 696d 7373 6f69     ful!.Transmissio
   d7940:	206e 6166 6c69 6465 002e 7341 5720 7269     n failed..As Wir
   d7950:	2e65 6e65 5464 6172 736e 696d 7373 6f69     e.endTransmissio
   d7960:	206e 6572 7574 6e72 2073 2061 6f6e 2d6e     n returns a non-
   d7970:	657a 6f72 7620 6c61 6575 6920 652e 2c2e     zero value i.e.,
   d7980:	2520 0064 6773 694c 0031 6773 694c 0032      %d.sgLi1.sgLi2.
   d7990:	6773 6f4c 0031 6773 6952 0031 6773 6952     sgLo1.sgRi1.sgRi
   d79a0:	0032 6773 6f52 0031 6625 6100 676e 656c     2.sgRo1.%f.angle
   d79b0:	5831 6100 676e 656c 5931 6100 676e 656c     1X.angle1Y.angle
   d79c0:	5a31 0000                                   1Z..

000d79c4 <_ZTVN5spark13EthernetClassE>:
	...
   d79cc:	51b3 000d 51a9 000d 519f 000d 5195 000d     .Q...Q...Q...Q..
   d79dc:	5189 000d 517d 000d 5171 000d 5169 000d     .Q..}Q..qQ..iQ..
   d79ec:	515f 000d 5155 000d 615d 000d 6162 6475     _Q..UQ..]a..baud
   d79fc:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d7a0c:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d7a1c:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d7a2c:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d7a3c:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d7a4c:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d7a5c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d7a6c:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d7a7c:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d7a8c:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d7a9c:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d7aac:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d7abc:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d7acc:	696e 0063 6c61 006c 2b25 3330 3a64 3025     nic.all.%+03d:%0
   d7adc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d7aec:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d7afc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7b04:	5539 000d 553f 000d 5583 000d 554d 000d     9U..?U...U..MU..
   d7b14:	553b 000d                                   ;U..

000d7b18 <_ZTV9IPAddress>:
	...
   d7b20:	5ad1 000d 5ac1 000d 5ac3 000d               .Z...Z...Z..

000d7b2c <_ZTV9USBSerial>:
	...
   d7b34:	5ba9 000d 5bf9 000d 5c07 000d 5269 000d     .[...[...\..iR..
   d7b44:	5be5 000d 5bab 000d 5bc1 000d 5bf3 000d     .[...[...[...[..
   d7b54:	5bd7 000d 5ba5 000d                         .[...[..

000d7b5c <_ZTVN5spark13CellularClassE>:
	...
   d7b64:	5d13 000d 5d09 000d 5cff 000d 5cb5 000d     .]...]...\...\..
   d7b74:	5cf3 000d 5ce7 000d 5cdb 000d 5cd3 000d     .\...\...\...\..
   d7b84:	5cc9 000d 5cbf 000d 615d 000d               .\...\..]a..

000d7b90 <_ZTV11USARTSerial>:
	...
   d7b98:	5d4d 000d 5d9d 000d 5dab 000d 5269 000d     M]...]...]..iR..
   d7ba8:	5d61 000d 5d83 000d 5d6f 000d 5d97 000d     a]...]..o]...]..
   d7bb8:	5d4f 000d 5d53 000d                         O]..S]..

000d7bc0 <_ZTV7TwoWire>:
	...
   d7bc8:	5e79 000d 5ec3 000d 5e9b 000d 5e7b 000d     y^...^...^..{^..
   d7bd8:	5ea3 000d 5eab 000d 5eb3 000d 5ebb 000d     .^...^...^...^..

000d7be8 <_ZTVN5spark9MeshClassE>:
	...
   d7bf0:	5fd9 000d 5fcf 000d 5fc5 000d 5fbb 000d     ._..._..._..._..
   d7c00:	5faf 000d 5fa3 000d 5f97 000d 5f8f 000d     ._..._..._..._..
   d7c10:	5f85 000d 5f7b 000d 615d 000d               ._..{_..]a..

000d7c1c <_ZTVN5spark12NetworkClassE>:
	...
   d7c24:	60f5 000d 60ff 000d 6109 000d 6113 000d     .`...`...a...a..
   d7c34:	611d 000d 6129 000d 6135 000d 6141 000d     .a..)a..5a..Aa..
   d7c44:	6149 000d 6153 000d 615d 000d               Ia..Sa..]a..

000d7c50 <_ZSt7nothrow>:
   d7c50:	0000 0000 7173 7472 0000 0000 0000 0000     ....sqrt........

000d7c60 <atanlo>:
   d7c60:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   d7c70:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000d7c80 <atanhi>:
   d7c80:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   d7c90:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000d7ca0 <__sf_fake_stdin>:
	...

000d7cc0 <__sf_fake_stdout>:
	...

000d7ce0 <__sf_fake_stderr>:
	...
   d7d00:	0043                                        C.

000d7d02 <link_const_variable_data_end>:
	...

000d7d04 <link_constructors_location>:
   d7d04:	000d4c69 	.word	0x000d4c69
   d7d08:	000d51bd 	.word	0x000d51bd
   d7d0c:	000d51ed 	.word	0x000d51ed
   d7d10:	000d5241 	.word	0x000d5241
   d7d14:	000d53a5 	.word	0x000d53a5
   d7d18:	000d53b5 	.word	0x000d53b5
   d7d1c:	000d540d 	.word	0x000d540d
   d7d20:	000d5d1d 	.word	0x000d5d1d
   d7d24:	000d60a5 	.word	0x000d60a5
   d7d28:	000d6229 	.word	0x000d6229
   d7d2c:	000d63f5 	.word	0x000d63f5
   d7d30:	000d6479 	.word	0x000d6479
   d7d34:	000d653d 	.word	0x000d653d
   d7d38:	000d6601 	.word	0x000d6601

000d7d3c <link_constructors_end>:
   d7d3c:	00000000 	.word	0x00000000
